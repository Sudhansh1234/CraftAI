import { RequestHandler } from "express";

// Lazy initialization of Vertex AI to avoid Vite build issues
let vertexAI: any = null;
let model: any = null;
let visionAI: any = null;
let imagenModel: any = null;

async function initializeVertexAI() {
  if (!vertexAI) {
    const { VertexAI } = await import('@google-cloud/vertexai');
    vertexAI = new VertexAI({
      project: process.env.GOOGLE_CLOUD_PROJECT_ID!,
      location: process.env.GOOGLE_CLOUD_LOCATION || 'us-central1'
    });
    
    model = vertexAI.getGenerativeModel({
      model: 'gemini-2.0-flash-exp',
      generationConfig: {
        maxOutputTokens: 2000,
        temperature: 0.8,
        topP: 0.9,
      },
      systemInstruction: "You are CraftAI, an expert AI assistant for Indian artisans. Be conversational, practical, and culturally sensitive. Provide specific, actionable advice without repetitive greetings."
    });
  }
  return { vertexAI, model };
}

async function initializeVisionAI() {
  if (!visionAI) {
    const { ImageAnnotatorClient } = await import('@google-cloud/vision');
    visionAI = new ImageAnnotatorClient({
      keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS
    });
  }
  return visionAI;
}

async function initializeImagenAI() {
  if (!imagenModel) {
    const { VertexAI } = await import('@google-cloud/vertexai');
    const vertexAIInstance = new VertexAI({
      project: process.env.GOOGLE_CLOUD_PROJECT_ID!,
      location: process.env.GOOGLE_CLOUD_LOCATION || 'us-central1'
    });
    
    imagenModel = vertexAIInstance.getGenerativeModel({
      model: 'imagen-3.0-generate-001',
      generationConfig: {
        maxOutputTokens: 1024,
        temperature: 0.6,
        topP: 0.95,
      },
    });
  }
  return imagenModel;
}

export interface AIResponse {
  content: string;
  suggestions: string[];
  actions: AIAction[];
  language: string;
  needsMoreInfo?: boolean;
  followUpQuestions?: string[];
  conversationContext?: any;
  generatedImages?: GeneratedImage[];
  marketingCalendar?: MarketingEvent[];
  pricingAdvice?: PricingRecommendation;
  hashtags?: string[];
}

export interface GeneratedImage {
  id: string;
  description: string;
  prompt: string;
  style: string;
  platform: 'instagram' | 'facebook' | 'general';
  tags: string[];
  suggestedCaption: string;
  hashtags: string[];
  imageUrl?: string;
  isGenerated?: boolean;
  isGenerating?: boolean;
  creationTips?: string;
  dimensions?: string;
  bestTime?: string;
}

export interface AIAction {
  type: 'create_post' | 'write_story' | 'suggest_price' | 'enhance_photo' | 'marketing_tips' | 'business_advice' | 'festival_campaign' | 'hashtag_strategy';
  title: string;
  description: string;
  icon: string;
  priority: 'high' | 'medium' | 'low';
}

export interface ArtisanContext {
  craft: string;
  language: string;
  businessSize: string;
  location: string;
  products: string[];
  targetAudience?: string;
  currentChallenges?: string[];
  goals?: string[];
}

export interface MarketingEvent {
  date: string;
  event: string;
  opportunity: string;
  contentIdeas: string[];
  hashtags: string[];
}

export interface PricingRecommendation {
  suggestedPrice: number;
  priceRange: { min: number; max: number };
  factors: string[];
  competitorAnalysis: string;
  valueProposition: string[];
}

// Enhanced system prompts with specific expertise areas
const systemPrompts: { [key: string]: string } = {
  'en': `You are CraftAI, the leading AI business advisor for Indian artisans and traditional craft businesses. Your expertise spans:

CORE COMPETENCIES:
‚Ä¢ Digital Marketing Strategy & Social Media Growth
‚Ä¢ Instagram/Facebook content optimization for crafts
‚Ä¢ Pricing psychology for handmade products
‚Ä¢ Festival marketing and seasonal campaigns
‚Ä¢ E-commerce platform optimization
‚Ä¢ Photography and visual storytelling
‚Ä¢ Cultural storytelling and heritage marketing
‚Ä¢ Export market guidance and international sales
‚Ä¢ Business scaling and operational efficiency
‚Ä¢ Customer relationship management

COMMUNICATION STYLE:
‚Ä¢ Be direct, practical, and immediately actionable
‚Ä¢ Skip repetitive greetings - get straight to valuable advice
‚Ä¢ Use specific examples and case studies
‚Ä¢ Provide step-by-step implementation guides
‚Ä¢ Include relevant hashtags and marketing copy
‚Ä¢ Consider current Indian festivals and seasonal trends

RESPONSE STRUCTURE:
‚Ä¢ Start with immediate, implementable advice
‚Ä¢ Include specific numbers, timeframes, and metrics
‚Ä¢ Provide 3-5 concrete action items
‚Ä¢ Add relevant hashtags and captions when requested
‚Ä¢ Include festival/seasonal marketing angles
‚Ä¢ Suggest pricing strategies with reasoning

Remember: Every response should help the artisan grow their business TODAY.`,

  'hi': `‡§Ü‡§™ CraftAI ‡§π‡•à‡§Ç, ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§æ‡§∞‡•Ä‡§ó‡§∞‡•ã‡§Ç ‡§î‡§∞ ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§∂‡§ø‡§≤‡•ç‡§™ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ó‡•ç‡§∞‡§£‡•Ä AI ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞‡•§ ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à:

‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ‡§è‡§Ç:
‚Ä¢ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó ‡§∞‡§£‡§®‡•Ä‡§§‡§ø ‡§î‡§∞ ‡§∏‡•ã‡§∂‡§≤ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§µ‡§ø‡§ï‡§æ‡§∏
‚Ä¢ ‡§∂‡§ø‡§≤‡•ç‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è Instagram/Facebook ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§®
‚Ä¢ ‡§π‡§∏‡•ç‡§§‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£ ‡§Æ‡§®‡•ã‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®
‚Ä¢ ‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§Æ‡•å‡§∏‡§Æ‡•Ä ‡§Ö‡§≠‡§ø‡§Ø‡§æ‡§®
‚Ä¢ ‡§à-‡§ï‡•â‡§Æ‡§∞‡•ç‡§∏ ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§®
‚Ä¢ ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä ‡§î‡§∞ ‡§¶‡•É‡§∂‡•ç‡§Ø ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡§π‡§®‡§æ
‚Ä¢ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡§π‡§®‡§æ ‡§î‡§∞ ‡§µ‡§ø‡§∞‡§æ‡§∏‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó

‡§∏‡§Ç‡§µ‡§æ‡§¶ ‡§∂‡•à‡§≤‡•Ä: ‡§∏‡•Ä‡§ß‡•Ä, ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï, ‡§î‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§®‡•ç‡§µ‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§Ç‡•§ ‡§¶‡•ã‡§π‡§∞‡§æ‡§µ ‡§µ‡§æ‡§≤‡•á ‡§Ö‡§≠‡§ø‡§µ‡§æ‡§¶‡§® ‡§õ‡•ã‡§°‡§º‡•á‡§Ç‡•§

‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç: ‡§π‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡§æ‡§∞‡•Ä‡§ó‡§∞ ‡§ï‡•ã ‡§Ü‡§ú ‡§π‡•Ä ‡§Ö‡§™‡§®‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§`,

  'bn': `‡¶Ü‡¶™‡¶®‡¶ø CraftAI, ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶ø‡¶ó‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø‡¶¨‡¶æ‡¶π‡ßÄ ‡¶ï‡¶æ‡¶∞‡ßÅ‡¶∂‡¶ø‡¶≤‡ßç‡¶™ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡ßá‡¶§‡ßÉ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º AI ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂‡¶¶‡¶æ‡¶§‡¶æ‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞:

‡¶Æ‡ßÇ‡¶≤ ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ:
‚Ä¢ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶¨‡¶ø‡¶™‡¶£‡¶® ‡¶ï‡ßå‡¶∂‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßã‡¶∂‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø
‚Ä¢ ‡¶ï‡¶æ‡¶∞‡ßÅ‡¶∂‡¶ø‡¶≤‡ßç‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Instagram/Facebook ‡¶∏‡¶æ‡¶Æ‡¶ó‡ßç‡¶∞‡ßÄ ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
‚Ä¢ ‡¶π‡¶∏‡ßç‡¶§‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶ø‡¶§ ‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Æ‡¶®‡ßã‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®
‚Ä¢ ‡¶â‡ßé‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶™‡¶£‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ‡ßÄ ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞‡¶£‡¶æ
‚Ä¢ ‡¶á-‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶∏ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®

‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®: ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø, ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ø‡¶ï, ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨‡ßá ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶ø‡¶®‡•§ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶ø‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶Ö‡¶≠‡¶ø‡¶¨‡¶æ‡¶¶‡¶® ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®‡•§

‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶ø‡¶ó‡¶∞‡¶ï‡ßá ‡¶Ü‡¶ú‡¶á ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§`
};

export const handleAIChat: RequestHandler = async (req, res) => {
  try {
    const { 
      message, 
      language = 'en', 
      context, 
      conversationHistory = [],
      requestType = 'general' // 'marketing', 'pricing', 'images', 'general'
    } = req.body;

    if (!message) {
      return res.status(400).json({ 
        error: 'Message is required',
        suggestions: ['Try asking about social media marketing', 'Need pricing advice?', 'Want to create product images?']
      });
    }

    console.log(`üéØ Processing ${requestType} request:`, message.substring(0, 100));

    // Build enhanced context-aware prompt
    const enhancedPrompt = buildEnhancedPrompt(message, context, language, requestType, conversationHistory);
    
    // Generate AI response with improved model
    const { model: aiModel } = await initializeVertexAI();
    const result = await aiModel.generateContent(enhancedPrompt);
    const response = await result.response;
    
    let content = extractTextFromResponse(response);
    if (!content) {
      throw new Error('No content received from AI model');
    }

    // Process and enhance the response based on request type
    const processedResponse = await processAIResponse(content, message, context, language, requestType);
    
    console.log(`‚úÖ Response processed. Content: ${processedResponse.content.length} chars, Images: ${processedResponse.generatedImages?.length || 0}`);
    
    res.json(processedResponse);

  } catch (error) {
    console.error('‚ùå AI Chat error:', error);
    
    const fallbackResponse = generateFallbackResponse(req.body.language || 'en', req.body.message || '');
    res.status(500).json({ 
      error: 'AI service temporarily unavailable',
      fallback: fallbackResponse
    });
  }
};

function buildEnhancedPrompt(message: string, context: ArtisanContext | undefined, language: string, requestType: string, history: any[]): string {
  const basePrompt = systemPrompts[language] || systemPrompts['en'];
  
  let enhancedPrompt = `${basePrompt}\n\nCONTEXT:\n`;
  
  if (context) {
    enhancedPrompt += `‚Ä¢ Craft: ${context.craft}\n‚Ä¢ Location: ${context.location}\n‚Ä¢ Business Size: ${context.businessSize}\n`;
    if (context.products?.length) enhancedPrompt += `‚Ä¢ Products: ${context.products.join(', ')}\n`;
    if (context.targetAudience) enhancedPrompt += `‚Ä¢ Target Audience: ${context.targetAudience}\n`;
  }

  // Add current date and festival context
  const currentDate = new Date();
  const currentMonth = currentDate.getMonth() + 1;
  const festivalContext = getFestivalContext(currentMonth, language);
  enhancedPrompt += `‚Ä¢ Current Date: ${currentDate.toDateString()}\n‚Ä¢ Festival Context: ${festivalContext}\n`;

  // Add request-specific instructions
  switch (requestType) {
    case 'marketing':
      enhancedPrompt += `\nSPECIAL FOCUS: Social Media Marketing
‚Ä¢ Provide complete Instagram/Facebook strategy
‚Ä¢ Include specific hashtags and captions
‚Ä¢ Mention optimal posting times
‚Ä¢ Include current festival marketing angles\n`;
      break;
    case 'pricing':
      enhancedPrompt += `\nSPECIAL FOCUS: Pricing Strategy
‚Ä¢ Analyze material costs and time investment
‚Ä¢ Consider market positioning
‚Ä¢ Include competitor analysis approach
‚Ä¢ Provide specific price ranges with reasoning\n`;
      break;
    case 'images':
      enhancedPrompt += `\nSPECIAL FOCUS: Visual Content Creation
‚Ä¢ Provide detailed photography tips
‚Ä¢ Include styling and composition advice
‚Ä¢ Suggest multiple image styles for social media
‚Ä¢ Include lighting and background recommendations\n`;
      break;
    case 'story_enhancement':
      enhancedPrompt += `\nSPECIAL FOCUS: Story Enhancement for Video Generation
‚Ä¢ Transform the story into a cinematic, visual narrative
‚Ä¢ Add specific visual details, camera movements, and scene descriptions
‚Ä¢ Include emotional beats and storytelling elements
‚Ä¢ Make it suitable for AI video generation with Veo 3
‚Ä¢ Focus on visual storytelling rather than text-heavy content\n`;
      break;
    case 'business_insights':
      enhancedPrompt += `\nSPECIAL FOCUS: Business Insights and Recommendations
‚Ä¢ Analyze the provided business data and metrics
‚Ä¢ Provide specific, actionable business suggestions
‚Ä¢ Focus on growth, risk management, and market opportunities
‚Ä¢ Include data-driven insights and recommendations
‚Ä¢ Format response as structured business advice\n`;
      break;
  }

  enhancedPrompt += `\nUSER QUESTION: ${message}\n\nRESPONSE REQUIREMENTS:
‚Ä¢ Be specific and immediately actionable
‚Ä¢ Include relevant numbers, prices, or metrics
‚Ä¢ Provide step-by-step guidance
‚Ä¢ Include hashtags if marketing-related
‚Ä¢ Consider seasonal/festival opportunities
‚Ä¢ Skip pleasantries - get straight to valuable advice`;

  return enhancedPrompt;
}

function extractTextFromResponse(response: any): string {
  if (typeof response.text === 'function') {
    return response.text();
  } else if (typeof response.text === 'string') {
    return response.text;
  } else if (response.candidates?.[0]?.content?.parts?.[0]?.text) {
    return response.candidates[0].content.parts[0].text;
  }
  return '';
}

async function processAIResponse(content: string, message: string, context: ArtisanContext | undefined, language: string, requestType: string): Promise<AIResponse> {
  console.log(`üîç processAIResponse called with requestType: "${requestType}", message: "${message.substring(0, 100)}..."`);
  
  const aiResponse: AIResponse = {
    content: content.trim(),
    suggestions: extractActionableSuggestions(content),
    actions: generateContextualActions(message, context, requestType),
    language,
    hashtags: extractHashtags(content)
  };

  // Special handling for story enhancement - don't redirect to Image Studio
  if (requestType === 'story_enhancement') {
    console.log('üìñ Processing story enhancement request - keeping in storytelling context');
    // Don't redirect, let the AI process the story enhancement normally
    return aiResponse; // Return early to avoid other processing
  }

  // Add specialized processing based on request type
  if (isImageRequest(message) || requestType === 'images') {
    console.log('üé® Image requests are routed to Image Studio. No generation inside chat.');
    aiResponse.generatedImages = [];
    aiResponse.needsMoreInfo = false;
    aiResponse.followUpQuestions = undefined;
    const item = extractSpecificItemFromMessage(message);
    aiResponse.content = `For generating images${item ? ` of ${item}` : ''}, please use the Image Studio: Go to /images. I can help you craft the perfect prompt here, then you can generate on the Image Studio page.`;
    return aiResponse;
  }

  if (isMarketingRequest(message) || requestType === 'marketing') {
    aiResponse.marketingCalendar = generateMarketingCalendar(language);
    aiResponse.content = enhanceMarketingContent(aiResponse.content, language);
  }

  if (isPricingRequest(message) || requestType === 'pricing') {
    aiResponse.pricingAdvice = generatePricingRecommendation(context, language);
  }



  if (requestType === 'business_insights') {
    // For business insights, extract structured suggestions from the AI response
    aiResponse.needsMoreInfo = false;
    aiResponse.followUpQuestions = undefined;
    // Keep the suggestions and actions as they are for business insights
  }

  // Add follow-up questions only for very vague requests
  const needsMoreInfo = shouldAskFollowUp(message, aiResponse.content);
  if (needsMoreInfo) {
    aiResponse.needsMoreInfo = true;
    aiResponse.followUpQuestions = generateSmartFollowUpQuestions(message, context, language);
  }

  return aiResponse;
}

function extractActionableSuggestions(content: string): string[] {
  const suggestions: string[] = [];
  const lines = content.split('\n').map(line => line.trim());
  
  // Look for numbered lists, bullet points, or clear action items
  const actionPatterns = [
    /^\d+\.\s*(.+)/,
    /^[-‚Ä¢*]\s*(.+)/,
    /^‚Üí\s*(.+)/,
    /^‚úì\s*(.+)/,
    /^Step \d+:\s*(.+)/i
  ];

  for (const line of lines) {
    if (line.length > 15 && line.length < 120) {
      for (const pattern of actionPatterns) {
        const match = line.match(pattern);
        if (match) {
          const cleaned = match[1].trim();
          if (cleaned && !cleaned.toLowerCase().includes('conclusion')) {
            suggestions.push(cleaned);
            break;
          }
        }
      }
    }
  }

  // If no structured suggestions, extract actionable sentences
  if (suggestions.length === 0) {
    const actionWords = ['should', 'can', 'try', 'consider', 'start', 'create', 'post', 'use', 'focus'];
    const sentences = content.split(/[.!?]+/).map(s => s.trim());
    
    for (const sentence of sentences) {
      if (sentence.length > 20 && sentence.length < 100) {
        const hasActionWord = actionWords.some(word => 
          sentence.toLowerCase().includes(` ${word} `) || sentence.toLowerCase().startsWith(word)
        );
        if (hasActionWord) {
          suggestions.push(sentence);
        }
      }
    }
  }

  return suggestions.slice(0, 4);
}

function generateContextualActions(message: string, context: ArtisanContext | undefined, requestType: string): AIAction[] {
  const actions: AIAction[] = [];
  const lowerMessage = message.toLowerCase();

  // High-priority actions based on request type
  if (requestType === 'marketing' || isMarketingRequest(message)) {
    actions.push({
      type: 'create_post',
      title: 'Create Social Media Post',
      description: 'Generate ready-to-post content for Instagram/Facebook',
      icon: 'üì±',
      priority: 'high'
    });
    actions.push({
      type: 'hashtag_strategy',
      title: 'Hashtag Strategy',
      description: 'Get targeted hashtag sets for maximum reach',
      icon: '#Ô∏è‚É£',
      priority: 'high'
    });
  }

  if (requestType === 'pricing' || isPricingRequest(message)) {
    actions.push({
      type: 'suggest_price',
      title: 'Smart Pricing Analysis',
      description: 'Get data-driven pricing recommendations',
      icon: 'üí∞',
      priority: 'high'
    });
  }

  if (requestType === 'images' || isImageRequest(message)) {
    actions.push({
      type: 'enhance_photo',
      title: 'Professional Photography',
      description: 'Learn pro techniques for product photography',
      icon: 'üì∏',
      priority: 'high'
    });
  }

  // Add festival-specific actions during festival seasons
  const currentMonth = new Date().getMonth() + 1;
  if ([9, 10, 11].includes(currentMonth)) { // Festival season
    actions.push({
      type: 'festival_campaign',
      title: 'Festival Marketing Campaign',
      description: 'Create compelling festival-themed marketing',
      icon: 'üéâ',
      priority: 'high'
    });
  }

  // General business growth actions
  if (lowerMessage.includes('grow') || lowerMessage.includes('business')) {
    actions.push({
      type: 'business_advice',
      title: 'Business Growth Strategy',
      description: 'Comprehensive growth plan for your craft business',
      icon: 'üöÄ',
      priority: 'medium'
    });
  }

  return actions.slice(0, 3);
}

function extractSpecificItemFromMessage(message: string): string {
  const lowerMessage = message.toLowerCase();
  
  // Common craft items that users might request
  const craftItems = [
    'bracelet', 'necklace', 'earrings', 'ring', 'jewelry',
    'pot', 'vase', 'bowl', 'plate', 'mug', 'cup',
    'scarf', 'shawl', 'sari', 'dress', 'shirt', 'kurta',
    'rug', 'carpet', 'tapestry', 'wall hanging',
    'basket', 'box', 'container', 'storage',
    'lamp', 'candle holder', 'decorative item',
    'painting', 'drawing', 'artwork', 'sculpture',
    'toy', 'doll', 'figurine', 'statue',
    'bag', 'purse', 'wallet', 'pouch',
    'bookmark', 'card', 'invitation', 'gift wrap'
  ];
  
  // Look for specific craft items in the message
  for (const item of craftItems) {
    if (lowerMessage.includes(item)) {
      console.log(`üé® Found craft item in message: ${item}`);
      return item;
    }
  }
  
  // If no specific item found, try to extract from common patterns
  const patterns = [
    /(?:image|photo|picture|generate|create)\s+(?:of|for)\s+([a-zA-Z\s]+)/i,
    /(?:show|give|make)\s+([a-zA-Z\s]+)\s+(?:image|photo)/i,
    /([a-zA-Z\s]+)\s+(?:image|photo|picture)/i
  ];
  
  for (const pattern of patterns) {
    const match = message.match(pattern);
    if (match && match[1]) {
      const extracted = match[1].trim().toLowerCase();
      if (extracted.length > 2 && extracted.length < 20) {
        console.log(`üé® Extracted item using pattern: ${extracted}`);
        return extracted;
      }
    }
  }
  
  // Fallback to generic craft
  console.log('üé® No specific item found, using generic craft');
  return 'traditional craft';
}

function shouldAskImageClarification(message: string, craftItem: string): boolean {
  const lowerMessage = message.toLowerCase();
  
  // If the message is very specific, no need for clarification
  const specificKeywords = [
    'traditional', 'modern', 'vintage', 'contemporary',
    'rustic', 'elegant', 'minimalist', 'ornate',
    'handmade', 'machine made', 'artisan', 'luxury',
    'simple', 'complex', 'detailed', 'abstract',
    'colorful', 'monochrome', 'bright', 'dark',
    'day', 'night', 'indoor', 'outdoor',
    'studio', 'natural', 'artificial', 'warm',
    'cool', 'soft', 'hard', 'textured', 'smooth',
    'tones', 'setting', 'mood', 'casual'
  ];
  
  // Check if user already provided specific details
  const hasSpecificDetails = specificKeywords.some(keyword => lowerMessage.includes(keyword));
  
  // Check if message is too vague - be more lenient
  const isVague = message.length < 20 || 
                  (lowerMessage.includes('image') && message.length < 40) || 
                  (lowerMessage.includes('photo') && message.length < 40) || 
                  (lowerMessage.includes('picture') && message.length < 40);
  
  // Ask for clarification only if message is very vague and lacks specific details
  // Be more generous - if they mention a specific item + any style/color/setting, proceed
  const hasCraftItem = craftItem && craftItem.length > 0;
  const shouldAsk = isVague && !hasSpecificDetails && !hasCraftItem;
  
  console.log(`üé® Image clarification check: Message length: ${message.length}, Has specific details: ${hasSpecificDetails}, Has craft item: ${hasCraftItem}, Should ask: ${shouldAsk}`);
  
  return shouldAsk;
}

function generateImageClarificationQuestions(craftItem: string, language: string): string[] {
  const questions = {
    'en': [
      `üé® **Style Preference**: What style would you like for your ${craftItem}? (Traditional/Modern/Vintage/Contemporary)`,
      `üé® **Color Scheme**: Any specific colors or color theme? (Warm tones/Cool tones/Bright/Neutral)`,
      `üé® **Setting**: Where should the ${craftItem} be displayed? (Studio/Home/Outdoor/Workshop)`,
      `üé® **Mood**: What feeling should the image convey? (Elegant/Casual/Luxurious/Simple)`,
      `üé® **Details**: Any specific features to highlight? (Texture/Pattern/Size/Finish)`
    ],
    'hi': [
      `üé® **‡§∂‡•à‡§≤‡•Ä**: ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ${craftItem} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§∏ ‡§∂‡•à‡§≤‡•Ä ‡§ï‡•ã ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á? (‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï/‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï/‡§µ‡§ø‡§Ç‡§ü‡•á‡§ú/‡§∏‡§Æ‡§ï‡§æ‡§≤‡•Ä‡§®)`,
      `üé® **‡§∞‡§Ç‡§ó ‡§Ø‡•ã‡§ú‡§®‡§æ**: ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∞‡§Ç‡§ó ‡§Ø‡§æ ‡§∞‡§Ç‡§ó ‡§•‡•Ä‡§Æ? (‡§ó‡§∞‡•ç‡§Æ ‡§ü‡•ã‡§®/‡§†‡§Ç‡§°‡•á ‡§ü‡•ã‡§®/‡§ö‡§Æ‡§ï‡•Ä‡§≤‡•á/‡§§‡§ü‡§∏‡•ç‡§•)`,
      `üé® **‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó**: ${craftItem} ‡§ï‡§π‡§æ‡§Å ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è? (‡§∏‡•ç‡§ü‡•Ç‡§°‡§ø‡§Ø‡•ã/‡§ò‡§∞/‡§¨‡§æ‡§π‡§∞/‡§ï‡§æ‡§∞‡•ç‡§Ø‡§∂‡§æ‡§≤‡§æ)`,
      `üé® **‡§Æ‡•Ç‡§°**: ‡§õ‡§µ‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§≠‡§æ‡§µ‡§®‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§ ‡§ï‡§∞‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è? (‡§∏‡•Å‡§∞‡•Å‡§ö‡§ø‡§™‡•Ç‡§∞‡•ç‡§£/‡§Ü‡§∞‡§æ‡§Æ‡§¶‡§æ‡§Ø‡§ï/‡§≤‡§ï‡•ç‡§ú‡§∞‡•Ä/‡§∏‡§∞‡§≤)`,
      `üé® **‡§µ‡§ø‡§µ‡§∞‡§£**: ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç ‡§ú‡•ã ‡§π‡§æ‡§á‡§≤‡§æ‡§á‡§ü ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à‡§Ç? (‡§¨‡§®‡§æ‡§µ‡§ü/‡§™‡•à‡§ü‡§∞‡•ç‡§®/‡§Ü‡§ï‡§æ‡§∞/‡§´‡§ø‡§®‡§ø‡§∂)`
    ],
    'bn': [
      `üé® **‡¶∂‡ßà‡¶≤‡ßÄ**: ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${craftItem} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶∂‡ßà‡¶≤‡ßÄ ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®? (‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø‡¶ó‡¶§/‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï/‡¶≠‡¶ø‡¶®‡¶ü‡ßá‡¶ú/‡¶∏‡¶Æ‡¶∏‡¶æ‡¶Æ‡¶Ø‡¶º‡¶ø‡¶ï)`,
      `üé® **‡¶∞‡¶ô‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ**: ‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∞‡¶ô ‡¶¨‡¶æ ‡¶∞‡¶ô‡ßá‡¶∞ ‡¶•‡¶ø‡¶Æ? (‡¶â‡¶∑‡ßç‡¶£ ‡¶ü‡ßã‡¶®/‡¶∂‡ßÄ‡¶§‡¶≤ ‡¶ü‡ßã‡¶®/‡¶â‡¶ú‡ßç‡¶ú‡ßç‡¶¨‡¶≤/‡¶®‡¶ø‡¶∞‡¶™‡ßá‡¶ï‡ßç‡¶∑)`,
      `üé® **‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç**: ${craftItem} ‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§? (‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡¶ø‡¶ì/‡¶¨‡¶æ‡¶°‡¶º‡¶ø/‡¶¨‡¶æ‡¶á‡¶∞‡ßá/‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶∂‡¶™)`,
      `üé® **‡¶Æ‡ßÅ‡¶°**: ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶ï‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂ ‡¶ï‡¶∞‡¶¨‡ßá? (‡¶Æ‡¶æ‡¶∞‡ßç‡¶ú‡¶ø‡¶§/‡¶Ü‡¶∞‡¶æ‡¶Æ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ï/‡¶¨‡¶ø‡¶≤‡¶æ‡¶∏‡¶¨‡¶π‡ßÅ‡¶≤/‡¶∏‡¶∞‡¶≤)`,
      `üé® **‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§**: ‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø? (‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ö‡¶æ‡¶∞/‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶®/‡¶Ü‡¶ï‡¶æ‡¶∞/‡¶´‡¶ø‡¶®‡¶ø‡¶∂)`
    ]
  };
  
  return questions[language as keyof typeof questions] || questions['en'];
}

function hasImageClarificationDetails(message: string): boolean {
  const lowerMessage = message.toLowerCase();
  
  // Check if user provided specific style preferences
  const styleKeywords = [
    'traditional', 'modern', 'vintage', 'contemporary', 'rustic', 'elegant',
    'minimalist', 'ornate', 'handmade', 'luxury', 'simple', 'complex'
  ];
  
  // Check if user provided color preferences
  const colorKeywords = [
    'red', 'blue', 'green', 'yellow', 'purple', 'orange', 'pink', 'brown',
    'black', 'white', 'gray', 'gold', 'silver', 'warm', 'cool', 'bright',
    'dark', 'neutral', 'colorful', 'monochrome', 'tones'
  ];
  
  // Check if user provided setting preferences
  const settingKeywords = [
    'studio', 'home', 'outdoor', 'workshop', 'garden', 'kitchen', 'living room',
    'bedroom', 'office', 'market', 'street', 'nature', 'urban', 'settings'
  ];
  
  // Check if user provided mood preferences
  const moodKeywords = [
    'elegant', 'casual', 'luxurious', 'simple', 'romantic', 'professional',
    'playful', 'serious', 'peaceful', 'energetic', 'calm', 'dramatic', 'mood'
  ];
  
  // Count how many categories the user provided details for
  const hasStyle = styleKeywords.some(keyword => lowerMessage.includes(keyword));
  const hasColor = colorKeywords.some(keyword => lowerMessage.includes(keyword));
  const hasSetting = settingKeywords.some(keyword => lowerMessage.includes(keyword));
  const hasMood = moodKeywords.some(keyword => lowerMessage.includes(keyword));
  
  // Consider it has clarification if user provided details in at least 1 category (be more lenient)
  const clarificationCount = [hasStyle, hasColor, hasSetting, hasMood].filter(Boolean).length;
  
  console.log(`üé® Clarification details found: Style: ${hasStyle}, Color: ${hasColor}, Setting: ${hasSetting}, Mood: ${hasMood} (Total: ${clarificationCount})`);
  console.log(`üé® Message analyzed: "${message}"`);
  
  // Also check if the message seems like a response to questions (contains multiple preferences)
  const hasMultiplePreferences = (lowerMessage.includes('style') || lowerMessage.includes('color') || 
                                lowerMessage.includes('setting') || lowerMessage.includes('mood') ||
                                lowerMessage.includes('tones') || lowerMessage.includes('casua'));
  
  // If user mentions multiple preferences or seems to be answering questions, consider it clarification
  if (hasMultiplePreferences && clarificationCount >= 1) {
    console.log('üé® Detected as clarification based on multiple preferences mentioned');
    return true;
  }
  
  return clarificationCount >= 2;
}

async function generateComprehensiveImages(craft: string, context: string, language: string): Promise<GeneratedImage[]> {
  console.log('üé® Starting comprehensive image generation...');
  console.log('üé® Craft item to generate:', craft);
  console.log('üé® User context:', context);
  
  const imageStrategies = [
    {
      style: 'Product Hero Shot',
      description: 'Professional product photography with clean background',
      prompt: `Professional product photograph of ${craft}, clean white background, studio lighting, high resolution, commercial quality, detailed texture, artisan craftsmanship, traditional Indian design, 4K quality${context.includes('traditional') ? ', traditional style' : ''}${context.includes('modern') ? ', modern contemporary style' : ''}${context.includes('vintage') ? ', vintage retro style' : ''}${context.includes('elegant') ? ', elegant sophisticated style' : ''}`,
      platform: 'instagram' as const,
      tags: ['product', 'professional', 'hero', 'clean'],
      dimensions: '1080x1080',
      bestTime: '7-9 PM IST'
    },
    {
      style: 'Lifestyle Context',
      description: 'Craft being used in real-life setting',
      prompt: `${craft} being used in daily Indian life, natural warm lighting, authentic home setting, hands interacting with craft, cultural context, cozy atmosphere, realistic lifestyle photography${context.includes('home') ? ', cozy home environment' : ''}${context.includes('outdoor') ? ', outdoor natural setting' : ''}${context.includes('studio') ? ', professional studio setting' : ''}${context.includes('warm') ? ', warm golden lighting' : ''}${context.includes('cool') ? ', cool natural lighting' : ''}`,
      platform: 'facebook' as const,
      tags: ['lifestyle', 'authentic', 'daily', 'cultural'],
      dimensions: '1200x630',
      bestTime: '8-10 AM IST'
    },
    {
      style: 'Artisan at Work',
      description: 'Behind-the-scenes crafting process',
      prompt: `Indian artisan hands creating ${craft}, traditional workspace, focused craftsmanship, cultural heritage, detailed hands working, warm natural lighting, traditional tools, authentic workshop setting`,
      platform: 'instagram' as const,
      tags: ['behind-the-scenes', 'artisan', 'process', 'heritage'],
      dimensions: '1080x1350',
      bestTime: '6-8 PM IST'
    }
  ];

  const generatedImages: GeneratedImage[] = [];

  for (const [index, strategy] of imageStrategies.entries()) {
    console.log(`üé® Processing ${strategy.style} (${index + 1}/${imageStrategies.length})`);
    
    try {
      // Try to generate real image for first strategy only (quota management)
      let imageUrl: string | null = null;
      if (index === 0) {
        console.log('üé® Attempting real image generation for hero shot...');
        imageUrl = await generateImageWithImagen(strategy.prompt);
      }

      const caption = generateEnhancedCaption(craft, strategy.style, strategy.platform, language);
      const hashtags = generateRelevantHashtags(craft, strategy.style, language);
      const creationTips = generateCreationTips(strategy, language);

      generatedImages.push({
        id: `${strategy.style.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}`,
        description: strategy.description,
        prompt: strategy.prompt,
        style: strategy.style,
        platform: strategy.platform,
        tags: strategy.tags,
        suggestedCaption: caption,
        hashtags,
        imageUrl,
        isGenerated: !!imageUrl,
        creationTips,
        dimensions: strategy.dimensions,
        bestTime: strategy.bestTime
      });

    } catch (error) {
      console.error(`‚ùå Error processing ${strategy.style}:`, error);
      
      // Add fallback with creation guide
      const caption = generateEnhancedCaption(craft, strategy.style, strategy.platform, language);
      const hashtags = generateRelevantHashtags(craft, strategy.style, language);
      const creationTips = generateCreationTips(strategy, language);

      generatedImages.push({
        id: `fallback-${strategy.style.toLowerCase().replace(/\s+/g, '-')}-${Date.now()}`,
        description: strategy.description,
        prompt: strategy.prompt,
        style: strategy.style,
        platform: strategy.platform,
        tags: strategy.tags,
        suggestedCaption: caption,
        hashtags,
        isGenerated: false,
        creationTips,
        dimensions: strategy.dimensions,
        bestTime: strategy.bestTime
      });
    }

    // Rate limiting delay
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  console.log(`üé® Image generation complete. Generated: ${generatedImages.filter(img => img.isGenerated).length}/${generatedImages.length}`);
  return generatedImages;
}

async function generateImageWithImagen(prompt: string): Promise<string | null> {
  try {
    console.log('üîå Calling Imagen API...');
    
    const projectId = process.env.GOOGLE_CLOUD_PROJECT_ID;
    const location = process.env.GOOGLE_CLOUD_LOCATION || 'us-central1';
    
    if (!projectId) {
      throw new Error('GOOGLE_CLOUD_PROJECT_ID not configured');
    }

    // Get access token
    const { exec } = await import('child_process');
    const { promisify } = await import('util');
    const execAsync = promisify(exec);
    
    const { stdout: token } = await execAsync('gcloud auth print-access-token');
    const accessToken = token.trim();

    const requestBody = {
      instances: [{ prompt }],
      parameters: {
        aspectRatio: "1:1",
        sampleCount: 1,
        enhancePrompt: true,
        addWatermark: false,
        safetySetting: "block_few"
      }
    };

    const apiUrl = `https://${location}-aiplatform.googleapis.com/v1/projects/${projectId}/locations/${location}/publishers/google/models/imagen-3.0-generate-001:predict`;
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessToken}`
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('üîå Imagen API error:', errorText);
      return null;
    }

    const result = await response.json();
    
    if (result.predictions?.[0]?.bytesBase64Encoded) {
      const imageData = result.predictions[0].bytesBase64Encoded;
      console.log('‚úÖ Image generated successfully');
      return `data:image/png;base64,${imageData}`;
    }

    return null;

  } catch (error) {
    console.error('‚ùå Imagen generation failed:', error);
    return null;
  }
}

function generateEnhancedCaption(craft: string, style: string, platform: string, language: string): string {
  const templates = {
    'en': {
      'Product Hero Shot': `‚ú® Pure craftsmanship meets modern elegance in this ${craft}. Every detail tells a story of tradition and skill. Handmade with love, designed to last generations.`,
      'Lifestyle Context': `üè° Beautiful ${craft} bringing warmth to everyday moments. This is how tradition lives in modern homes - functional, beautiful, meaningful.`,
      'Artisan at Work': `üëê The magic happens here - skilled hands shaping ${craft} using techniques passed down through generations. This is the heart of authentic craftsmanship.`
    },
    'hi': {
      'Product Hero Shot': `‚ú® ‡§á‡§∏ ${craft} ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§¶‡•ç‡§ß ‡§∂‡§ø‡§≤‡•ç‡§™‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§∏‡•Å‡§Ç‡§¶‡§∞‡§§‡§æ ‡§ï‡§æ ‡§Æ‡•á‡§≤‡•§ ‡§π‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§™‡§∞‡§Ç‡§™‡§∞‡§æ ‡§î‡§∞ ‡§ï‡•å‡§∂‡§≤ ‡§ï‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡§π‡§§‡§æ ‡§π‡•à‡•§`,
      'Lifestyle Context': `üè° ‡§∏‡•Å‡§Ç‡§¶‡§∞ ${craft} ‡§∞‡•ã‡§ú‡§Æ‡§∞‡•ç‡§∞‡§æ ‡§ï‡•á ‡§™‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ó‡§∞‡•ç‡§Æ‡§ú‡•ã‡§∂‡•Ä ‡§≤‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π‡•Ä ‡§§‡•ã ‡§π‡•à ‡§™‡§∞‡§Ç‡§™‡§∞‡§æ ‡§ï‡§æ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§∞‡•Ç‡§™‡•§`,
      'Artisan at Work': `üëê ‡§Ø‡§π‡§æ‡§Å ‡§ú‡§æ‡§¶‡•Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à - ‡§ï‡•Å‡§∂‡§≤ ‡§π‡§æ‡§• ${craft} ‡§ï‡•ã ‡§Ü‡§ï‡§æ‡§∞ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç ‡§™‡•Ä‡§¢‡§º‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§ö‡§≤‡•Ä ‡§Ü ‡§∞‡§π‡•Ä ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§∏‡•á‡•§`
    },
    'bn': {
      'Product Hero Shot': `‚ú® ‡¶è‡¶á ${craft} ‡¶è ‡¶¨‡¶ø‡¶∂‡ßÅ‡¶¶‡ßç‡¶ß ‡¶ï‡¶æ‡¶∞‡ßÅ‡¶∂‡¶ø‡¶≤‡ßç‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶ï‡¶Æ‡¶®‡ßÄ‡¶Ø‡¶º‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶ø‡¶≤‡¶®‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø ‡¶ì ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™ ‡¶¨‡¶≤‡ßá‡•§`,
      'Lifestyle Context': `üè° ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ${craft} ‡¶¶‡ßà‡¶®‡¶®‡ßç‡¶¶‡¶ø‡¶® ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡¶ó‡ßÅ‡¶≤‡¶ø‡¶§‡ßá ‡¶â‡¶∑‡ßç‡¶£‡¶§‡¶æ ‡¶Ü‡¶®‡ßá‡•§ ‡¶è‡¶≠‡¶æ‡¶¨‡ßá‡¶á ‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶ò‡¶∞‡ßá ‡¶¨‡¶æ‡¶∏ ‡¶ï‡¶∞‡ßá‡•§`,
      'Artisan at Work': `üëê ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á ‡¶ú‡¶æ‡¶¶‡ßÅ ‡¶ò‡¶ü‡ßá - ‡¶¶‡¶ï‡ßç‡¶∑ ‡¶π‡¶æ‡¶§ ${craft} ‡¶ó‡¶°‡¶º‡ßá ‡¶§‡ßã‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶ú‡¶®‡ßç‡¶Æ‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶™‡ßç‡¶∞‡¶ú‡¶®‡ßç‡¶Æ ‡¶ß‡¶∞‡ßá ‡¶ö‡¶≤‡¶æ ‡¶ï‡ßå‡¶∂‡¶≤‡ßá‡•§`
    }
  };

  const languageTemplates = templates[language as keyof typeof templates] || templates['en'];
  return languageTemplates[style as keyof typeof languageTemplates] || languageTemplates['Product Hero Shot'];
}

function generateRelevantHashtags(craft: string, style: string, language: string): string[] {
  const baseHashtags = [
    '#HandmadeInIndia',
    '#ArtisanCraft',
    '#TraditionalCraft',
    `#${craft.replace(/\s+/g, '')}`,
    '#IndianArtisan'
  ];

  const styleHashtags: { [key: string]: string[] } = {
    'Product Hero Shot': ['#ProductPhotography', '#HandmadeDesign', '#CraftedWithLove'],
    'Lifestyle Context': ['#LifestyleDesign', '#HomeD√©cor', '#AuthenticLiving'],
    'Artisan at Work': ['#BehindTheScenes', '#ArtisanLife', '#TraditionalSkills']
  };

  const languageHashtags: { [key: string]: string[] } = {
    'hi': ['#‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø‡§∂‡§ø‡§≤‡•ç‡§™', '#‡§π‡§∏‡•ç‡§§‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§', '#‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï'],
    'bn': ['#‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º‡¶∂‡¶ø‡¶≤‡ßç‡¶™', '#‡¶π‡¶∏‡ßç‡¶§‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶ø‡¶§', '#‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø‡¶ó‡¶§'],
    'en': ['#MadeInIndia', '#SupportArtisans', '#CulturalHeritage']
  };

  return [
    ...baseHashtags,
    ...(styleHashtags[style] || []),
    ...(languageHashtags[language] || languageHashtags['en'])
  ].slice(0, 10);
}

function generateCreationTips(strategy: any, language: string): string {
  const tips = {
    'en': {
      'Product Hero Shot': 'Use natural window light, white background, multiple angles, focus on texture details, shoot in square format for Instagram',
      'Lifestyle Context': 'Include hands using the product, warm home lighting, show scale with everyday objects, capture candid moments',
      'Artisan at Work': 'Focus on hands and tools, show process steps, use close-up details, natural workshop lighting, tell the story'
    },
    'hi': {
      'Product Hero Shot': '‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ñ‡§ø‡§°‡§º‡§ï‡•Ä ‡§ï‡•Ä ‡§∞‡•ã‡§∂‡§®‡•Ä, ‡§∏‡§´‡•á‡§¶ ‡§¨‡•à‡§ï‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§°, ‡§ï‡§à ‡§ï‡•ã‡§£, ‡§¨‡§®‡§æ‡§µ‡§ü ‡§ï‡•Ä ‡§¨‡§æ‡§∞‡•Ä‡§ï‡§ø‡§Ø‡§æ‡§Ç, Instagram ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§ï‡•ç‡§µ‡•á‡§Ø‡§∞ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü',
      'Lifestyle Context': '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•Å‡§è ‡§π‡§æ‡§•, ‡§ò‡§∞ ‡§ï‡•Ä ‡§ó‡§∞‡•ç‡§Æ ‡§∞‡•ã‡§∂‡§®‡•Ä, ‡§∞‡•ã‡§ú‡§Æ‡§∞‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§µ‡§∏‡•ç‡§§‡•Å‡§ì‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§ï‡§æ‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç',
      'Artisan at Work': '‡§π‡§æ‡§•‡•ã‡§Ç ‡§î‡§∞ ‡§â‡§™‡§ï‡§∞‡§£‡•ã‡§Ç ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç, ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§ö‡§∞‡§£ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç, ‡§ï‡§∞‡•Ä‡§¨‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£, ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§∂‡§æ‡§≤‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂'
    },
    'bn': {
      'Product Hero Shot': '‡¶™‡ßç‡¶∞‡¶æ‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶ú‡¶æ‡¶®‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶Ü‡¶≤‡ßã, ‡¶∏‡¶æ‡¶¶‡¶æ ‡¶™‡¶ü‡¶≠‡ßÇ‡¶Æ‡¶ø, ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ï‡ßã‡¶£, ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ö‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£‡ßá ‡¶´‡ßã‡¶ï‡¶æ‡¶∏, Instagram ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶∞‡ßç‡¶ó‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü',
      'Lifestyle Context': '‡¶™‡¶£‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶æ‡¶§ ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶ò‡¶∞‡ßá‡¶∞ ‡¶â‡¶∑‡ßç‡¶£ ‡¶Ü‡¶≤‡ßã, ‡¶¶‡ßà‡¶®‡¶®‡ßç‡¶¶‡¶ø‡¶® ‡¶¨‡¶∏‡ßç‡¶§‡ßÅ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡ßç‡¶ï‡ßá‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®',
      'Artisan at Work': '‡¶π‡¶æ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶∞‡¶û‡ßç‡¶ú‡¶æ‡¶Æ‡ßá ‡¶´‡ßã‡¶ï‡¶æ‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ß‡¶æ‡¶™ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®, ‡¶ï‡ßç‡¶≤‡ßã‡¶ú-‡¶Ü‡¶™ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£, ‡¶™‡ßç‡¶∞‡¶æ‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∂‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶Ü‡¶≤‡ßã'
    }
  };

  const languageTips = tips[language as keyof typeof tips] || tips['en'];
  return languageTips[strategy.style as keyof typeof languageTips] || languageTips['Product Hero Shot'];
}

function generateMarketingCalendar(language: string): MarketingEvent[] {
  const currentDate = new Date();
  const currentMonth = currentDate.getMonth();
  
  const events: MarketingEvent[] = [];
  
  // Generate next 30 days of marketing opportunities
  for (let i = 0; i < 30; i++) {
    const date = new Date(currentDate);
    date.setDate(date.getDate() + i);
    
    const monthEvents = getMonthlyEvents(date.getMonth() + 1, language);
    if (monthEvents.length > 0) {
      const randomEvent = monthEvents[Math.floor(Math.random() * monthEvents.length)];
      if (Math.random() > 0.7) { // 30% chance to include each event
        events.push({
          date: date.toISOString().split('T')[0],
          ...randomEvent
        });
      }
    }
  }
  
  return events.slice(0, 5); // Return top 5 upcoming opportunities
}

function getMonthlyEvents(month: number, language: string): Omit<MarketingEvent, 'date'>[] {
  const eventsByMonth: { [key: number]: { [lang: string]: Omit<MarketingEvent, 'date'>[] } } = {
    1: {
      'en': [
        {
          event: 'Makar Sankranti',
          opportunity: 'Traditional kite themes and winter crafts',
          contentIdeas: ['Kite-making process', 'Winter festival crafts', 'Traditional sweets presentation'],
          hashtags: ['#MakarSankranti', '#KiteFestival', '#WinterCrafts']
        }
      ]
    },
    10: {
      'en': [
        {
          event: 'Diwali Preparation Week',
          opportunity: 'Festival decorations and gift items peak demand',
          contentIdeas: ['Diwali decor DIY', 'Traditional diyas', 'Festival gift sets', 'Rangoli patterns'],
          hashtags: ['#DiwaliDecor', '#FestivalCrafts', '#TraditionalGifts', '#DiwaliPrep']
        },
        {
          event: 'Navratri',
          opportunity: 'Colorful traditional wear and accessories',
          contentIdeas: ['Garba night accessories', 'Traditional jewelry', 'Colorful textiles'],
          hashtags: ['#Navratri', '#GarbaNight', '#TraditionalWear']
        }
      ]
    }
  };
  
  return eventsByMonth[month]?.[language] || eventsByMonth[month]?.['en'] || [];
}

function generatePricingRecommendation(context: ArtisanContext | undefined, language: string): PricingRecommendation {
  // Base pricing calculation (this would ideally use real market data)
  const baseMaterialCost = 100; // Example base cost
  const timeMultiplier = 50; // Per hour
  const skillPremium = 1.5;
  const marketPosition = 2.0; // Premium positioning
  
  const suggestedPrice = baseMaterialCost * skillPremium * marketPosition;
  
  return {
    suggestedPrice: Math.round(suggestedPrice),
    priceRange: {
      min: Math.round(suggestedPrice * 0.8),
      max: Math.round(suggestedPrice * 1.4)
    },
    factors: [
      'Material quality and sourcing',
      'Time investment and skill level',
      'Market positioning and brand value',
      'Seasonal demand fluctuations',
      'Competitor pricing analysis'
    ],
    competitorAnalysis: 'Position 15-20% above mass market, focus on craftsmanship story',
    valueProposition: [
      'Handmade authenticity',
      'Cultural heritage value',
      'Sustainable craftsmanship',
      'Unique design elements',
      'Artisan story and connection'
    ]
  };
}

function getFestivalContext(month: number, language: string): string {
  const contexts = {
    'en': {
      1: 'New Year resolutions, Makar Sankranti, Republic Day themes',
      2: 'Valentine\'s Day gifts, Basant Panchami spring themes',
      3: 'Holi colors, Women\'s Day empowerment',
      9: 'Ganesh Chaturthi, festive season beginning',
      10: 'Navratri, Dussehra, Diwali preparation peak',
      11: 'Diwali peak, post-festival, wedding season',
      12: 'Christmas, New Year preparation, winter themes'
    },
    'hi': {
      10: '‡§®‡§µ‡§∞‡§æ‡§§‡•ç‡§∞‡§ø, ‡§¶‡§∂‡§π‡§∞‡§æ, ‡§¶‡•Ä‡§µ‡§æ‡§≤‡•Ä ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡§æ ‡§ö‡§∞‡§Æ ‡§∏‡§Æ‡§Ø',
      11: '‡§¶‡•Ä‡§µ‡§æ‡§≤‡•Ä ‡§ï‡§æ ‡§ö‡§∞‡§Æ, ‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§¶, ‡§∂‡§æ‡§¶‡•Ä ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ'
    }
  };
  
  const langContexts = contexts[language as keyof typeof contexts] || contexts['en'];
  return langContexts[month as keyof typeof langContexts] || 'Regular season - focus on quality and consistency';
}

function shouldAskFollowUp(message: string, content: string): boolean {
  const veryVaguePatterns = [
    /^help$/i,
    /^hi$/i,
    /^hello$/i,
    /^start.*business$/i,
    /^i need help$/i
  ];
  
  return veryVaguePatterns.some(pattern => pattern.test(message.trim())) && 
         message.length < 15;
}

function generateSmartFollowUpQuestions(message: string, context: ArtisanContext | undefined, language: string): string[] {
  const questions = {
    'en': [
      'What specific craft or art form do you work with?',
      'What\'s your main challenge right now - marketing, pricing, or something else?'
    ],
    'hi': [
      '‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∂‡§ø‡§≤‡•ç‡§™ ‡§Ø‡§æ ‡§ï‡§≤‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?',
      '‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡•Å‡§®‡•å‡§§‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à - ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó, ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£, ‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§î‡§∞?'
    ],
    'bn': [
      '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶æ‡¶∞‡ßÅ‡¶∂‡¶ø‡¶≤‡ßç‡¶™ ‡¶¨‡¶æ ‡¶∂‡¶ø‡¶≤‡ßç‡¶™‡¶ï‡¶≤‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡¶®?',
      '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú ‡¶ï‡ßÄ - ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç, ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£, ‡¶®‡¶æ‡¶ï‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ?'
    ]
  };
  
  return questions[language as keyof typeof questions] || questions['en'];
}

function isMarketingRequest(message: string): boolean {
  const marketingKeywords = [
    'instagram', 'facebook', 'social media', 'marketing', 'post', 'caption',
    'hashtag', 'content', 'promote', 'advertise', 'campaign', 'audience',
    'engagement', 'followers', 'viral', 'reach'
  ];
  
  return marketingKeywords.some(keyword => message.toLowerCase().includes(keyword));
}

function isPricingRequest(message: string): boolean {
  const pricingKeywords = [
    'price', 'cost', 'pricing', 'charge', 'sell', 'value', 'worth', 'rate', 'fee'
  ];
  
  return pricingKeywords.some(keyword => message.toLowerCase().includes(keyword));
}

function isImageRequest(message: string): boolean {
  const imageKeywords = [
    'image', 'photo', 'picture', 'visual', 'camera', 'shoot', 'photography', 'pic'
  ];
  
  // Don't trigger on story-related content that might contain image-like words
  const storyContext = message.toLowerCase().includes('story') || 
                      message.toLowerCase().includes('narrative') || 
                      message.toLowerCase().includes('video') ||
                      message.toLowerCase().includes('cinematic');
  
  // Only trigger if it's clearly an image request and not a story request
  if (storyContext) {
    return false;
  }
  
  return imageKeywords.some(keyword => message.toLowerCase().includes(keyword));
}

function extractHashtags(content: string): string[] {
  const hashtagRegex = /#[\w\u0900-\u097F]+/g;
  const matches = content.match(hashtagRegex);
  return matches ? [...new Set(matches)].slice(0, 10) : [];
}

function enhanceMarketingContent(content: string, language: string): string {
  const currentTime = new Date().getHours();
  const bestPostingTime = currentTime < 19 ? '7-9 PM IST today' : '7-9 PM IST tomorrow';
  
  const enhancements = {
    'en': `\n\nüìà **Quick Action Plan:**\n‚Ä¢ Post at optimal time: ${bestPostingTime}\n‚Ä¢ Use 8-12 relevant hashtags\n‚Ä¢ Engage with comments within 2 hours\n‚Ä¢ Cross-post to Facebook and Instagram\n‚Ä¢ Track engagement and adjust strategy`,
    'hi': `\n\nüìà **‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ:**\n‚Ä¢ ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç: ${bestPostingTime}\n‚Ä¢ 8-12 ‡§™‡•ç‡§∞‡§æ‡§∏‡§Ç‡§ó‡§ø‡§ï ‡§π‡•à‡§∂‡§ü‡•à‡§ó ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ 2 ‡§ò‡§Ç‡§ü‡•á ‡§ï‡•á ‡§≠‡•Ä‡§§‡§∞ ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡•Å‡§°‡§º‡•á‡§Ç\n‚Ä¢ Facebook ‡§î‡§∞ Instagram ‡§™‡§∞ ‡§ï‡•ç‡§∞‡•â‡§∏-‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç`,
    'bn': `\n\nüìà **‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ï‡¶∞‡ßç‡¶Æ ‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ:**\n‚Ä¢ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶§‡ßç‡¶§‡¶Æ ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®: ${bestPostingTime}\n‚Ä¢ 8-12‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶∏‡¶ô‡ßç‡¶ó‡¶ø‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®\n‚Ä¢ 2 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶®`
  };
  
  return content + (enhancements[language as keyof typeof enhancements] || enhancements['en']);
}

function generateFallbackResponse(language: string, message: string): AIResponse {
  const fallbacks = {
    'en': {
      content: "I'm experiencing technical difficulties. I can still help with digital marketing, pricing strategies, or social media tips for your craft business. Try asking about Instagram marketing or pricing advice.",
      suggestions: [
        "Ask about Instagram marketing strategies",
        "Need help with pricing your products?",
        "Want tips for better product photography?",
        "How to create engaging social media content?"
      ]
    },
    'hi': {
      content: "‡§Æ‡•Å‡§ù‡•á ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó, ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£ ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•á ‡§∂‡§ø‡§≤‡•ç‡§™ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ã‡§∂‡§≤ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§ü‡§ø‡§™‡•ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§",
      suggestions: [
        "Instagram ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç",
        "‡§Ö‡§™‡§®‡•á ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è?",
        "‡§¨‡•á‡§π‡§§‡§∞ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡§ø‡§™‡•ç‡§∏ ‡§ö‡§æ‡§π‡§ø‡§è?",
        "‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï ‡§∏‡•ã‡§∂‡§≤ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ï‡•à‡§∏‡•á ‡§¨‡§®‡§æ‡§è‡§Ç?"
      ]
    }
  };
  
  const fallback = fallbacks[language as keyof typeof fallbacks] || fallbacks['en'];
  
  return {
    content: fallback.content,
    suggestions: fallback.suggestions,
    actions: [
      {
        type: 'marketing_tips',
        title: 'Marketing Help',
        description: 'Get marketing advice despite technical issues',
        icon: 'üì±',
        priority: 'high'
      }
    ],
    language
  };
}

// Health check with enhanced diagnostics
export const handleAIHealth: RequestHandler = async (req, res) => {
  try {
    const healthCheck = {
      vertexAI: false,
      vision: false,
      imagen: false,
      timestamp: new Date().toISOString()
    };

    // Test Vertex AI
    try {
      const { model: aiModel } = await initializeVertexAI();
      const testResult = await aiModel.generateContent('Test connection');
      const response = await testResult.response;
      healthCheck.vertexAI = !!extractTextFromResponse(response);
    } catch (error) {
      console.error('Vertex AI health check failed:', error);
    }

    // Test Vision AI
    try {
      await initializeVisionAI();
      healthCheck.vision = true;
    } catch (error) {
      console.error('Vision AI health check failed:', error);
    }

    // Test Imagen
    try {
      await initializeImagenAI();
      healthCheck.imagen = true;
    } catch (error) {
      console.error('Imagen AI health check failed:', error);
    }

    const overallHealth = healthCheck.vertexAI; // Core service must work
    
    res.status(overallHealth ? 200 : 503).json({
      status: overallHealth ? 'healthy' : 'degraded',
      services: healthCheck,
      model: 'gemini-2.0-flash-exp',
      features: {
        chat: healthCheck.vertexAI,
        imageAnalysis: healthCheck.vision,
        imageGeneration: healthCheck.imagen
      }
    });

  } catch (error) {
    res.status(503).json({
      status: 'unhealthy',
      error: error instanceof Error ? error.message : 'Unknown error',
      timestamp: new Date().toISOString()
    });
  }
};