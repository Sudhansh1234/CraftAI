{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/routes/speech.ts","../../server/routes/ai.ts","../../server/routes/images.ts","../../server/routes/videos.ts","../../server/routes/location.ts","../../server/routes/business-flow.ts","../../server/routes/questionnaire.ts","../../server/routes/social.ts","../../server/database/firebase.ts","../../server/database/firebase-seed.ts","../../server/routes/dashboard.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { RequestHandler } from \"express\";\nimport { SpeechClient } from \"@google-cloud/speech\";\nimport { Translate } from \"@google-cloud/translate/build/src/v2\";\nimport multer from \"multer\";\nimport path from \"path\";\n\n// Configure multer for audio file uploads\nconst storage = multer.memoryStorage();\nconst upload = multer({ \n  storage: storage,\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n  fileFilter: (req, file, cb) => {\n    // Accept audio files\n    if (file.mimetype.startsWith('audio/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only audio files are allowed'));\n    }\n  }\n});\n\n// Initialize Google Cloud clients\nconst speechClient = new SpeechClient();\nconst translateClient = new Translate();\n\n// Language mapping for speech recognition\nconst speechLanguageMap: { [key: string]: string } = {\n  'en': 'en-US',\n  'hi': 'hi-IN',\n  'bn': 'bn-IN',\n  'te': 'te-IN',\n  'ta': 'ta-IN',\n  'mr': 'mr-IN',\n  'gu': 'gu-IN',\n  'kn': 'kn-IN',\n  'ml': 'ml-IN',\n  'pa': 'pa-IN',\n  'or': 'or-IN',\n  'as': 'as-IN'\n};\n\n// Language mapping for translation\nconst translateLanguageMap: { [key: string]: string } = {\n  'en': 'en',\n  'hi': 'hi',\n  'bn': 'bn',\n  'te': 'te',\n  'ta': 'ta',\n  'mr': 'mr',\n  'gu': 'gu',\n  'kn': 'kn',\n  'ml': 'ml',\n  'pa': 'pa',\n  'or': 'or',\n  'as': 'as'\n};\n\nexport const handleSpeechToText: RequestHandler = async (req, res) => {\n  try {\n    // Handle file upload\n    upload.single('audio')(req, res, async (err) => {\n      if (err) {\n        return res.status(400).json({ \n          error: 'File upload error', \n          details: err.message \n        });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ \n          error: 'No audio file provided' \n        });\n      }\n\n      const { targetLanguage = 'en' } = req.body;\n      const audioBuffer = req.file.buffer;\n      const audioMimeType = req.file.mimetype;\n\n      // Configure speech recognition request\n      const audio = {\n        content: audioBuffer.toString('base64')\n      };\n\n      const config = {\n        encoding: audioMimeType.includes('webm') ? 'WEBM_OPUS' : \n                   audioMimeType.includes('mp3') ? 'MP3' : \n                   audioMimeType.includes('wav') ? 'LINEAR16' : 'WEBM_OPUS',\n        sampleRateHertz: 48000,\n        languageCode: speechLanguageMap[targetLanguage] || 'en-US',\n        alternativeLanguageCodes: ['en-US', 'hi-IN', 'bn-IN'],\n        enableAutomaticPunctuation: true,\n        enableWordTimeOffsets: false,\n        model: 'latest_long',\n        useEnhanced: true\n      };\n\n      const request = {\n        audio: audio,\n        config: config,\n      };\n\n      // Perform speech recognition\n      const [response] = await speechClient.recognize(request);\n      \n      if (!response.results || response.results.length === 0) {\n        return res.json({\n          text: '',\n          confidence: 0,\n          language: targetLanguage,\n          message: 'No speech detected'\n        });\n      }\n\n      const transcription = response.results\n        .map(result => result.alternatives?.[0]?.transcript)\n        .filter(Boolean)\n        .join(' ');\n\n      const confidence = response.results[0]?.alternatives?.[0]?.confidence || 0;\n\n      // If target language is not English, translate the result\n      let translatedText = transcription;\n      let detectedLanguage = targetLanguage;\n\n      if (targetLanguage !== 'en' && transcription) {\n        try {\n          const [translationResponse] = await translateClient.translate(\n            transcription, \n            translateLanguageMap[targetLanguage]\n          );\n          translatedText = translationResponse;\n        } catch (translateError) {\n          console.warn('Translation failed, returning original text:', translateError);\n        }\n      }\n\n      res.json({\n        text: translatedText,\n        originalText: transcription,\n        confidence: confidence,\n        language: targetLanguage,\n        detectedLanguage: detectedLanguage,\n        message: 'Speech recognition successful'\n      });\n\n    });\n\n  } catch (error) {\n    console.error('Speech recognition error:', error);\n    res.status(500).json({ \n      error: 'Speech recognition failed', \n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};\n\n// Health check endpoint\nexport const handleSpeechHealth: RequestHandler = async (req, res) => {\n  try {\n    // Test Google Cloud connectivity\n    await speechClient.getProjectId();\n    res.json({ \n      status: 'healthy', \n      service: 'Google Cloud Speech-to-Text',\n      message: 'Speech service is operational'\n    });\n  } catch (error) {\n    res.status(503).json({ \n      status: 'unhealthy', \n      service: 'Google Cloud Speech-to-Text',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};\n\n","import { RequestHandler } from \"express\";\n\n// Context: QUESTIONNAIRE MODE - Handles general AI chat and location queries\n// This route is for general AI assistance, not flow generation\n\n// Lazy initialization of Vertex AI to avoid Vite build issues\nlet vertexAI: any = null;\nlet model: any = null;\nlet visionAI: any = null;\nlet imagenModel: any = null;\nlet googleGenAI: any = null;\n\nexport async function initializeVertexAI() {\n  if (!vertexAI) {\n    const { VertexAI } = await import('@google-cloud/vertexai');\n    vertexAI = new VertexAI({\n      project: process.env.GOOGLE_CLOUD_PROJECT_ID!,\n      location: process.env.GOOGLE_CLOUD_LOCATION || 'us-central1'\n    });\n    \n    model = vertexAI.getGenerativeModel({\n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 2000,\n        temperature: 0.8,\n        topP: 0.9,\n      },\n      systemInstruction: `You are ArtisAI, an AI-powered marketplace assistant designed to help local artisans set up their profiles, list products, and grow their businesses.  \nYou must always be polite, supportive, and use simple conversational language.  \nYour goal is to guide artisans step by step and adapt your questions dynamically based on missing information.  \n\n## Core Functions\n1. **Account Setup & Product Listing**\n   - Collect artisan details (name, craft type, location, contact).\n   - Collect product details (product name, category, material, price, stock, photos).\n   - Ask only for missing information (dynamic questionnaire style).\n   - Confirm and summarize details before saving.\n\n2. **City Name Recognition & Location-Based Support**\n   - Accept manual city input from the user.\n   - Identify the artisan's location and store it.\n   - Suggest nearby suppliers, wholesalers, and raw material markets using Google Maps API.\n   - Discover local craft fairs or exhibitions.\n   - Always sort search results by proximity.\n\n3. **Smart Quick Actions (Dynamic Shortcuts)**\n   - Contextual Buttons based on situation:\n     - Location actions: \"Find Suppliers\", \"Local Markets\".\n     - Business actions: \"Pricing Help\", \"Marketing Tips\".\n     - Image actions: \"Generate Images\", \"Photo Tips\".\n   - Recommend next steps clearly (like \"Would you like me to suggest suppliers near you?\").\n\n4. **Marketing Support**\n   - Give tips for using Instagram, Facebook, WhatsApp effectively.\n   - Generate social media content (captions, post ideas, hashtags).\n   - Suggest a marketing calendar (e.g., seasonal festivals, special offers).\n   - Help with hashtag generation tailored to craft type.\n\n5. **Pricing Assistance**\n   - Suggest pricing strategies (cost-based, value-based).\n   - Provide competitor pricing insights (approximate, market-based).\n   - Help calculate profit margins.\n   - Suggest bulk/wholesale pricing if artisan mentions wholesale.\n\n6. **Business Insights**\n   - Share local and global market trends relevant to crafts.\n   - Suggest growth strategies (e.g., online shops, collaborations).\n   - Provide customer engagement tips (loyalty, retention).\n   - Recommend sales optimization tactics (better product descriptions, bundling).\n\n## Behavior Rules\n- Always remember previous answers in the current session (chat history).\n- Summarize what's collected so far when the artisan seems confused.\n- Keep responses short and conversational (2‚Äì4 sentences max).\n- Use encouraging tone: \"That's wonderful!\", \"Great choice!\", \"Perfect, let's move forward.\"\n- When suggesting actions, always offer **clear next steps** or **quick buttons**.\n\n## Example Flow\nüë©‚Äçüé® Artisan: \"I want to sell handmade pottery.\"  \nü§ñ Bot: \"That's wonderful! Can you tell me your city so I can suggest local markets and fairs?\"  \nüë©‚Äçüé® Artisan: \"Jaipur.\"  \nü§ñ Bot: \"Great! I'll remember that. Would you like me to show nearby suppliers or start setting up your first product listing?\"`\n    });\n  }\n  return { vertexAI, model };\n}\n\nexport async function initializeVisionAI() {\n  if (!visionAI) {\n    const { ImageAnnotatorClient } = await import('@google-cloud/vision');\n    visionAI = new ImageAnnotatorClient({\n      keyFilename: process.env.GOOGLE_APPLICATION_CREDENTIALS\n    });\n  }\n  return visionAI;\n}\n\nexport async function initializeImagenAI() {\n  if (!imagenModel) {\n    const { VertexAI } = await import('@google-cloud/vertexai');\n    const vertexAIInstance = new VertexAI({\n      project: process.env.GOOGLE_CLOUD_PROJECT_ID!,\n      location: process.env.GOOGLE_CLOUD_LOCATION || 'us-central1'\n    });\n    \n    imagenModel = vertexAIInstance.getGenerativeModel({\n      model: 'imagen-3.0-generate-001',\n      generationConfig: {\n        maxOutputTokens: 1024,\n        temperature: 0.6,\n        topP: 0.95,\n      },\n    });\n  }\n  return imagenModel;\n}\n\n// Removed Google GenAI initialization - using Vertex AI directly instead\n\nexport interface AIResponse {\n  content: string;\n  suggestions: string[];\n  actions: AIAction[];\n  language: string;\n  needsMoreInfo?: boolean;\n  followUpQuestions?: string[];\n  conversationContext?: any;\n  generatedImages?: GeneratedImage[];\n  marketingCalendar?: MarketingEvent[];\n  pricingAdvice?: PricingRecommendation;\n  hashtags?: string[];\n}\n\nexport interface GeneratedImage {\n  id: string;\n  description: string;\n  prompt: string;\n  style: string;\n  platform: 'instagram' | 'facebook' | 'general';\n  tags: string[];\n  suggestedCaption: string;\n  hashtags: string[];\n  imageUrl?: string;\n  isGenerated?: boolean;\n  isGenerating?: boolean;\n  creationTips?: string;\n  dimensions?: string;\n  bestTime?: string;\n}\n\nexport interface AIAction {\n  type: 'create_post' | 'write_story' | 'suggest_price' | 'enhance_photo' | 'marketing_tips' | 'business_advice' | 'festival_campaign' | 'hashtag_strategy';\n  title: string;\n  description: string;\n  icon: string;\n  priority: 'high' | 'medium' | 'low';\n}\n\nexport interface ArtisanContext {\n  craft: string;\n  language: string;\n  businessSize: string;\n  location: string;\n  products: string[];\n  targetAudience?: string;\n  currentChallenges?: string[];\n  goals?: string[];\n}\n\nexport interface MarketingEvent {\n  date: string;\n  event: string;\n  opportunity: string;\n  contentIdeas: string[];\n  hashtags: string[];\n}\n\nexport interface PricingRecommendation {\n  suggestedPrice: number;\n  priceRange: { min: number; max: number };\n  factors: string[];\n  competitorAnalysis: string;\n  valueProposition: string[];\n}\n\n// Enhanced system prompts with specific expertise areas\nconst systemPrompts: { [key: string]: string } = {\n  'en': `You are ArtisAI, the leading AI business advisor for Indian artisans and traditional craft businesses. Your expertise spans:\n\nCORE COMPETENCIES:\n‚Ä¢ Digital Marketing Strategy & Social Media Growth\n‚Ä¢ Instagram/Facebook content optimization for crafts\n‚Ä¢ Pricing psychology for handmade products\n‚Ä¢ Festival marketing and seasonal campaigns\n‚Ä¢ E-commerce platform optimization\n‚Ä¢ Photography and visual storytelling\n‚Ä¢ Cultural storytelling and heritage marketing\n‚Ä¢ Export market guidance and international sales\n‚Ä¢ Business scaling and operational efficiency\n‚Ä¢ Customer relationship management\n\nCOMMUNICATION STYLE:\n‚Ä¢ Be direct, practical, and immediately actionable\n‚Ä¢ Skip repetitive greetings - get straight to valuable advice\n‚Ä¢ Use specific examples and case studies\n‚Ä¢ Provide step-by-step implementation guides\n‚Ä¢ Include relevant hashtags and marketing copy\n‚Ä¢ Consider current Indian festivals and seasonal trends\n\nRESPONSE STRUCTURE:\n‚Ä¢ Start with immediate, implementable advice\n‚Ä¢ Include specific numbers, timeframes, and metrics\n‚Ä¢ Provide 3-5 concrete action items\n‚Ä¢ Add relevant hashtags and captions when requested\n‚Ä¢ Include festival/seasonal marketing angles\n‚Ä¢ Suggest pricing strategies with reasoning\n\nRemember: Every response should help the artisan grow their business TODAY.`,\n\n  'hi': `‡§Ü‡§™ ArtisAI ‡§π‡•à‡§Ç, ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§æ‡§∞‡•Ä‡§ó‡§∞‡•ã‡§Ç ‡§î‡§∞ ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§∂‡§ø‡§≤‡•ç‡§™ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ó‡•ç‡§∞‡§£‡•Ä AI ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§∏‡§≤‡§æ‡§π‡§ï‡§æ‡§∞‡•§ ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û‡§§‡§æ ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à:\n\n‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ‡§è‡§Ç:\n‚Ä¢ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó ‡§∞‡§£‡§®‡•Ä‡§§‡§ø ‡§î‡§∞ ‡§∏‡•ã‡§∂‡§≤ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§µ‡§ø‡§ï‡§æ‡§∏\n‚Ä¢ ‡§∂‡§ø‡§≤‡•ç‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è Instagram/Facebook ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§®\n‚Ä¢ ‡§π‡§∏‡•ç‡§§‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£ ‡§Æ‡§®‡•ã‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®\n‚Ä¢ ‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§Æ‡•å‡§∏‡§Æ‡•Ä ‡§Ö‡§≠‡§ø‡§Ø‡§æ‡§®\n‚Ä¢ ‡§à-‡§ï‡•â‡§Æ‡§∞‡•ç‡§∏ ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§®\n‚Ä¢ ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä ‡§î‡§∞ ‡§¶‡•É‡§∂‡•ç‡§Ø ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡§π‡§®‡§æ\n‚Ä¢ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡§π‡§®‡§æ ‡§î‡§∞ ‡§µ‡§ø‡§∞‡§æ‡§∏‡§§ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó\n\n‡§∏‡§Ç‡§µ‡§æ‡§¶ ‡§∂‡•à‡§≤‡•Ä: ‡§∏‡•Ä‡§ß‡•Ä, ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§π‡§æ‡§∞‡§ø‡§ï, ‡§î‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§®‡•ç‡§µ‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§Ç‡•§ ‡§¶‡•ã‡§π‡§∞‡§æ‡§µ ‡§µ‡§æ‡§≤‡•á ‡§Ö‡§≠‡§ø‡§µ‡§æ‡§¶‡§® ‡§õ‡•ã‡§°‡§º‡•á‡§Ç‡•§\n\n‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç: ‡§π‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡§æ‡§∞‡•Ä‡§ó‡§∞ ‡§ï‡•ã ‡§Ü‡§ú ‡§π‡•Ä ‡§Ö‡§™‡§®‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§`,\n\n  'bn': `‡¶Ü‡¶™‡¶®‡¶ø ArtisAI, ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶∞‡¶ø‡¶ó‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø‡¶¨‡¶æ‡¶π‡ßÄ ‡¶ï‡¶æ‡¶∞‡ßÅ‡¶∂‡¶ø‡¶≤‡ßç‡¶™ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡ßá‡¶§‡ßÉ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º AI ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂‡¶¶‡¶æ‡¶§‡¶æ‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞:\n\n‡¶Æ‡ßÇ‡¶≤ ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ:\n‚Ä¢ ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶¨‡¶ø‡¶™‡¶£‡¶® ‡¶ï‡ßå‡¶∂‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßã‡¶∂‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø\n‚Ä¢ ‡¶ï‡¶æ‡¶∞‡ßÅ‡¶∂‡¶ø‡¶≤‡ßç‡¶™‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Instagram/Facebook ‡¶∏‡¶æ‡¶Æ‡¶ó‡ßç‡¶∞‡ßÄ ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®\n‚Ä¢ ‡¶π‡¶∏‡ßç‡¶§‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶ø‡¶§ ‡¶™‡¶£‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Æ‡¶®‡ßã‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®\n‚Ä¢ ‡¶â‡ßé‡¶∏‡¶¨ ‡¶¨‡¶ø‡¶™‡¶£‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ‡ßÄ ‡¶™‡ßç‡¶∞‡¶ö‡¶æ‡¶∞‡¶£‡¶æ\n‚Ä¢ ‡¶á-‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶∏ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®\n\n‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®: ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø, ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ø‡¶ï, ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨‡ßá ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶ø‡¶®‡•§ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶ø‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶Ö‡¶≠‡¶ø‡¶¨‡¶æ‡¶¶‡¶® ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®‡•§\n\n‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá‡¶®: ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶ø‡¶ó‡¶∞‡¶ï‡ßá ‡¶Ü‡¶ú‡¶á ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§`\n};\n\nexport const handleAIChat: RequestHandler = async (req, res) => {\n  try {\n    const { \n      message, \n      language = 'en', \n      context, \n      conversationHistory = [],\n      requestType = 'general' // 'marketing', 'pricing', 'images', 'general'\n    } = req.body;\n    \n    // Check if this is a location-based query\n    const locationKeywords = ['near me', 'nearby', 'local', 'find', 'suppliers', 'wholesalers', 'markets', 'stores', 'craft fairs', 'selling', 'my area'];\n    const isLocationQuery = locationKeywords.some(keyword => \n      message.toLowerCase().includes(keyword)\n    );\n    \n    // Also check if user mentioned a city name in their message\n    const cityKeywords = ['mumbai', 'delhi', 'bangalore', 'chennai', 'hyderabad', 'pune', 'kolkata', 'ahmedabad', 'jaipur', 'surat', 'dombivli', 'thane', 'navi mumbai'];\n    const mentionedCity = cityKeywords.find(city => \n      message.toLowerCase().includes(city.toLowerCase())\n    );\n    \n    console.log('Location query check:', { isLocationQuery, hasCoordinates: !!context?.coordinates, mentionedCity, message });\n    \n    // If it's a location query and user has location data OR mentioned a city, route to location search\n    if (isLocationQuery && (context?.coordinates || mentionedCity)) {\n      try {\n        console.log('Routing to location search with context:', context);\n        // Determine location data - use coordinates if available, otherwise use mentioned city\n        let locationData;\n        if (context?.coordinates) {\n          locationData = {\n            lat: parseFloat(context.coordinates.split(',')[0]),\n            lng: parseFloat(context.coordinates.split(',')[1]),\n            city: context.location\n          };\n        } else if (mentionedCity) {\n          // Use default coordinates for major cities when user mentions city name\n          const cityCoordinates: { [key: string]: { lat: number, lng: number } } = {\n            'mumbai': { lat: 19.0760, lng: 72.8777 },\n            'delhi': { lat: 28.7041, lng: 77.1025 },\n            'bangalore': { lat: 12.9716, lng: 77.5946 },\n            'chennai': { lat: 13.0827, lng: 80.2707 },\n            'hyderabad': { lat: 17.3850, lng: 78.4867 },\n            'pune': { lat: 18.5204, lng: 73.8567 },\n            'kolkata': { lat: 22.5726, lng: 88.3639 },\n            'ahmedabad': { lat: 23.0225, lng: 72.5714 },\n            'jaipur': { lat: 26.9124, lng: 75.7873 },\n            'surat': { lat: 21.1702, lng: 72.8311 },\n            'dombivli': { lat: 19.2167, lng: 73.0833 },\n            'thane': { lat: 19.2183, lng: 72.9781 },\n            'navi mumbai': { lat: 19.0330, lng: 73.0297 }\n          };\n          \n          const coords = cityCoordinates[mentionedCity.toLowerCase()];\n          if (coords) {\n            locationData = {\n              lat: coords.lat,\n              lng: coords.lng,\n              city: mentionedCity\n            };\n          }\n        }\n        \n        if (locationData) {\n          const locationResponse = await fetch('http://localhost:8080/api/location/search', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              query: message,\n              location: locationData\n            })\n          });\n        \n        if (locationResponse.ok) {\n          const locationSearchData = await locationResponse.json();\n          console.log('Location search successful:', locationSearchData);\n          // Clean markdown from location search response\n          if (locationSearchData.content) {\n            locationSearchData.content = cleanMarkdown(locationSearchData.content);\n          }\n          return res.json(locationSearchData);\n        } else {\n          console.error('Location search failed:', locationResponse.status);\n        }\n        }\n      } catch (error) {\n        console.error('Location search error:', error);\n        // Fall through to regular AI response\n      }\n    } else if (isLocationQuery && !context?.coordinates && !mentionedCity) {\n      // If it's a location query but no location data or mentioned city, ask for location\n      return res.json({\n        content: \"I'd love to help you find local markets and craft fairs! To give you the most accurate recommendations, I need to know your location. Please click the 'Enable Location' button in the top right corner, or tell me your city name.\",\n        needsMoreInfo: true,\n        followUpQuestions: [\n          \"What city are you located in?\",\n          \"Would you like to enable location access for better recommendations?\",\n          \"Are you looking for markets in a specific area?\"\n        ]\n      });\n    }\n\n    if (!message) {\n      return res.status(400).json({ \n        error: 'Message is required',\n        suggestions: ['Try asking about social media marketing', 'Need pricing advice?', 'Want to create product images?']\n      });\n    }\n\n    console.log(`üéØ Processing ${requestType} request:`, message.substring(0, 100));\n\n    // Build enhanced context-aware prompt\n    const enhancedPrompt = buildEnhancedPrompt(message, context, language, requestType, conversationHistory);\n    \n    // Generate AI response with improved model\n    const { model: aiModel } = await initializeVertexAI();\n    const result = await aiModel.generateContent(enhancedPrompt);\n    const response = await result.response;\n    \n    let content = extractTextFromResponse(response);\n    if (!content) {\n      throw new Error('No content received from AI model');\n    }\n\n    // Process and enhance the response based on request type\n    const processedResponse = await processAIResponse(content, message, context, language, requestType);\n    \n    console.log(`‚úÖ Response processed. Content: ${processedResponse.content.length} chars, Images: ${processedResponse.generatedImages?.length || 0}`);\n    \n    res.json(processedResponse);\n\n  } catch (error) {\n    console.error('‚ùå AI Chat error:', error);\n    \n    const fallbackResponse = generateFallbackResponse(req.body.language || 'en', req.body.message || '');\n    res.status(500).json({ \n      error: 'AI service temporarily unavailable',\n      fallback: fallbackResponse\n    });\n  }\n};\n\nfunction buildEnhancedPrompt(message: string, context: ArtisanContext | undefined, language: string, requestType: string, history: any[]): string {\n  const basePrompt = systemPrompts[language] || systemPrompts['en'];\n  \n  let enhancedPrompt = `${basePrompt}\\n\\nCONTEXT:\\n`;\n  \n  if (context) {\n    enhancedPrompt += `‚Ä¢ Craft: ${context.craft}\\n‚Ä¢ Location: ${context.location}\\n‚Ä¢ Business Size: ${context.businessSize}\\n`;\n    if (context.products?.length) enhancedPrompt += `‚Ä¢ Products: ${context.products.join(', ')}\\n`;\n    if (context.targetAudience) enhancedPrompt += `‚Ä¢ Target Audience: ${context.targetAudience}\\n`;\n  }\n\n  // Add current date and festival context\n  const currentDate = new Date();\n  const currentMonth = currentDate.getMonth() + 1;\n  const festivalContext = getFestivalContext(currentMonth, language);\n  enhancedPrompt += `‚Ä¢ Current Date: ${currentDate.toDateString()}\\n‚Ä¢ Festival Context: ${festivalContext}\\n`;\n\n  // Add request-specific instructions\n  switch (requestType) {\n    case 'marketing':\n      enhancedPrompt += `\\nSPECIAL FOCUS: Social Media Marketing\n‚Ä¢ Provide complete Instagram/Facebook strategy\n‚Ä¢ Include specific hashtags and captions\n‚Ä¢ Mention optimal posting times\n‚Ä¢ Include current festival marketing angles\\n`;\n      break;\n    case 'pricing':\n      enhancedPrompt += `\\nSPECIAL FOCUS: Pricing Strategy\n‚Ä¢ Analyze material costs and time investment\n‚Ä¢ Consider market positioning\n‚Ä¢ Include competitor analysis approach\n‚Ä¢ Provide specific price ranges with reasoning\\n`;\n      break;\n    case 'images':\n      enhancedPrompt += `\\nSPECIAL FOCUS: Visual Content Creation\n‚Ä¢ Provide detailed photography tips\n‚Ä¢ Include styling and composition advice\n‚Ä¢ Suggest multiple image styles for social media\n‚Ä¢ Include lighting and background recommendations\\n`;\n      break;\n    case 'story_enhancement':\n      enhancedPrompt += `\\nSPECIAL FOCUS: Story Enhancement for Video Generation\n‚Ä¢ Transform the story into a cinematic, visual narrative\n‚Ä¢ Add specific visual details, camera movements, and scene descriptions\n‚Ä¢ Include emotional beats and storytelling elements\n‚Ä¢ Make it suitable for AI video generation with Veo 3\n‚Ä¢ Focus on visual storytelling rather than text-heavy content\\n`;\n      break;\n    case 'business_insights':\n      enhancedPrompt += `\\nSPECIAL FOCUS: Business Insights and Recommendations\n‚Ä¢ Analyze the provided business data and metrics\n‚Ä¢ Provide specific, actionable business suggestions\n‚Ä¢ Focus on growth, risk management, and market opportunities\n‚Ä¢ Include data-driven insights and recommendations\n‚Ä¢ Format response as structured business advice\\n`;\n      break;\n  }\n\n  enhancedPrompt += `\\nUSER QUESTION: ${message}\\n\\nRESPONSE REQUIREMENTS:\n‚Ä¢ Be specific and immediately actionable\n‚Ä¢ Include relevant numbers, prices, or metrics\n‚Ä¢ Provide step-by-step guidance\n‚Ä¢ Include hashtags if marketing-related\n‚Ä¢ Consider seasonal/festival opportunities\n‚Ä¢ Skip pleasantries - get straight to valuable advice`;\n\n  return enhancedPrompt;\n}\n\nexport function extractTextFromResponse(response: any): string {\n  if (typeof response.text === 'function') {\n    return response.text();\n  } else if (typeof response.text === 'string') {\n    return response.text;\n  } else if (response.candidates?.[0]?.content?.parts?.[0]?.text) {\n    return response.candidates[0].content.parts[0].text;\n  }\n  return '';\n}\n\n// Function to clean markdown formatting from text\nfunction cleanMarkdown(text: string): string {\n  return text\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove bold markdown **text**\n    .replace(/\\*(.*?)\\*/g, '$1') // Remove italic markdown *text*\n    .replace(/`(.*?)`/g, '$1') // Remove code markdown `text`\n    .replace(/#{1,6}\\s/g, '') // Remove heading markdown # ## ### etc\n    .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1') // Remove link markdown [text](url)\n    .replace(/^\\s*[-*+]\\s/gm, '‚Ä¢ ') // Convert markdown lists to bullet points\n    .replace(/^\\s*\\d+\\.\\s/gm, (match) => match.replace('.', '.')) // Keep numbered lists\n    .trim();\n}\n\nasync function processAIResponse(content: string, message: string, context: ArtisanContext | undefined, language: string, requestType: string): Promise<AIResponse> {\n  console.log(`üîç processAIResponse called with requestType: \"${requestType}\", message: \"${message.substring(0, 100)}...\"`);\n  \n  const aiResponse: AIResponse = {\n    content: cleanMarkdown(content.trim()),\n    suggestions: extractActionableSuggestions(content),\n    actions: generateContextualActions(message, context, requestType),\n    language,\n    hashtags: extractHashtags(content)\n  };\n\n  // Special handling for story enhancement - don't redirect to Image Studio\n  if (requestType === 'story_enhancement') {\n    console.log('üìñ Processing story enhancement request - keeping in storytelling context');\n    // Don't redirect, let the AI process the story enhancement normally\n    return aiResponse; // Return early to avoid other processing\n  }\n\n  // Add specialized processing based on request type\n  if (isImageRequest(message) || requestType === 'images') {\n    console.log('üé® Image requests are routed to Image Studio. No generation inside chat.');\n    aiResponse.generatedImages = [];\n    aiResponse.needsMoreInfo = false;\n    aiResponse.followUpQuestions = undefined;\n    const item = extractSpecificItemFromMessage(message);\n    aiResponse.content = `For generating images${item ? ` of ${item}` : ''}, please use the Image Studio: Go to /images. I can help you craft the perfect prompt here, then you can generate on the Image Studio page.`;\n    return aiResponse;\n  }\n\n  if (isMarketingRequest(message) || requestType === 'marketing') {\n    aiResponse.marketingCalendar = generateMarketingCalendar(language);\n    aiResponse.content = enhanceMarketingContent(aiResponse.content, language);\n  }\n\n  if (isPricingRequest(message) || requestType === 'pricing') {\n    aiResponse.pricingAdvice = generatePricingRecommendation(context, language);\n  }\n\n\n\n  if (requestType === 'business_insights') {\n    // For business insights, extract structured suggestions from the AI response\n    aiResponse.needsMoreInfo = false;\n    aiResponse.followUpQuestions = undefined;\n    // Keep the suggestions and actions as they are for business insights\n  }\n\n  // Add follow-up questions only for very vague requests\n  const needsMoreInfo = shouldAskFollowUp(message, aiResponse.content);\n  if (needsMoreInfo) {\n    aiResponse.needsMoreInfo = true;\n    aiResponse.followUpQuestions = generateSmartFollowUpQuestions(message, context, language);\n  }\n\n  return aiResponse;\n}\n\nfunction extractActionableSuggestions(content: string): string[] {\n  const suggestions: string[] = [];\n  const lines = content.split('\\n').map(line => line.trim());\n  \n  // Look for numbered lists, bullet points, or clear action items\n  const actionPatterns = [\n    /^\\d+\\.\\s*(.+)/,\n    /^[-‚Ä¢*]\\s*(.+)/,\n    /^‚Üí\\s*(.+)/,\n    /^‚úì\\s*(.+)/,\n    /^Step \\d+:\\s*(.+)/i\n  ];\n\n  for (const line of lines) {\n    if (line.length > 15 && line.length < 120) {\n      for (const pattern of actionPatterns) {\n        const match = line.match(pattern);\n        if (match) {\n          const cleaned = match[1].trim();\n          if (cleaned && !cleaned.toLowerCase().includes('conclusion')) {\n            suggestions.push(cleaned);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  // If no structured suggestions, extract actionable sentences\n  if (suggestions.length === 0) {\n    const actionWords = ['should', 'can', 'try', 'consider', 'start', 'create', 'post', 'use', 'focus'];\n    const sentences = content.split(/[.!?]+/).map(s => s.trim());\n    \n    for (const sentence of sentences) {\n      if (sentence.length > 20 && sentence.length < 100) {\n        const hasActionWord = actionWords.some(word => \n          sentence.toLowerCase().includes(` ${word} `) || sentence.toLowerCase().startsWith(word)\n        );\n        if (hasActionWord) {\n          suggestions.push(sentence);\n        }\n      }\n    }\n  }\n\n  return suggestions.slice(0, 4);\n}\n\nfunction generateContextualActions(message: string, context: ArtisanContext | undefined, requestType: string): AIAction[] {\n  const actions: AIAction[] = [];\n  const lowerMessage = message.toLowerCase();\n\n  // High-priority actions based on request type\n  if (requestType === 'marketing' || isMarketingRequest(message)) {\n    actions.push({\n      type: 'create_post',\n      title: 'Create Social Media Post',\n      description: 'Generate ready-to-post content for Instagram/Facebook',\n      icon: 'üì±',\n      priority: 'high'\n    });\n    actions.push({\n      type: 'hashtag_strategy',\n      title: 'Hashtag Strategy',\n      description: 'Get targeted hashtag sets for maximum reach',\n      icon: '#Ô∏è‚É£',\n      priority: 'high'\n    });\n  }\n\n  if (requestType === 'pricing' || isPricingRequest(message)) {\n    actions.push({\n      type: 'suggest_price',\n      title: 'Smart Pricing Analysis',\n      description: 'Get data-driven pricing recommendations',\n      icon: 'üí∞',\n      priority: 'high'\n    });\n  }\n\n  if (requestType === 'images' || isImageRequest(message)) {\n    actions.push({\n      type: 'enhance_photo',\n      title: 'Professional Photography',\n      description: 'Learn pro techniques for product photography',\n      icon: 'üì∏',\n      priority: 'high'\n    });\n  }\n\n  // Add festival-specific actions during festival seasons\n  const currentMonth = new Date().getMonth() + 1;\n  if ([9, 10, 11].includes(currentMonth)) { // Festival season\n    actions.push({\n      type: 'festival_campaign',\n      title: 'Festival Marketing Campaign',\n      description: 'Create compelling festival-themed marketing',\n      icon: 'üéâ',\n      priority: 'high'\n    });\n  }\n\n  // General business growth actions\n  if (lowerMessage.includes('grow') || lowerMessage.includes('business')) {\n    actions.push({\n      type: 'business_advice',\n      title: 'Business Growth Strategy',\n      description: 'Comprehensive growth plan for your craft business',\n      icon: 'üöÄ',\n      priority: 'medium'\n    });\n  }\n\n  return actions.slice(0, 3);\n}\n\nfunction extractSpecificItemFromMessage(message: string): string {\n  const lowerMessage = message.toLowerCase();\n  \n  // Common craft items that users might request\n  const craftItems = [\n    'bracelet', 'necklace', 'earrings', 'ring', 'jewelry',\n    'pot', 'vase', 'bowl', 'plate', 'mug', 'cup',\n    'scarf', 'shawl', 'sari', 'dress', 'shirt', 'kurta',\n    'rug', 'carpet', 'tapestry', 'wall hanging',\n    'basket', 'box', 'container', 'storage',\n    'lamp', 'candle holder', 'decorative item',\n    'painting', 'drawing', 'artwork', 'sculpture',\n    'toy', 'doll', 'figurine', 'statue',\n    'bag', 'purse', 'wallet', 'pouch',\n    'bookmark', 'card', 'invitation', 'gift wrap'\n  ];\n  \n  // Look for specific craft items in the message\n  for (const item of craftItems) {\n    if (lowerMessage.includes(item)) {\n      console.log(`üé® Found craft item in message: ${item}`);\n      return item;\n    }\n  }\n  \n  // If no specific item found, try to extract from common patterns\n  const patterns = [\n    /(?:image|photo|picture|generate|create)\\s+(?:of|for)\\s+([a-zA-Z\\s]+)/i,\n    /(?:show|give|make)\\s+([a-zA-Z\\s]+)\\s+(?:image|photo)/i,\n    /([a-zA-Z\\s]+)\\s+(?:image|photo|picture)/i\n  ];\n  \n  for (const pattern of patterns) {\n    const match = message.match(pattern);\n    if (match && match[1]) {\n      const extracted = match[1].trim().toLowerCase();\n      if (extracted.length > 2 && extracted.length < 20) {\n        console.log(`üé® Extracted item using pattern: ${extracted}`);\n        return extracted;\n      }\n    }\n  }\n  \n  // Fallback to generic craft\n  console.log('üé® No specific item found, using generic craft');\n  return 'traditional craft';\n}\n\nfunction shouldAskImageClarification(message: string, craftItem: string): boolean {\n  const lowerMessage = message.toLowerCase();\n  \n  // If the message is very specific, no need for clarification\n  const specificKeywords = [\n    'traditional', 'modern', 'vintage', 'contemporary',\n    'rustic', 'elegant', 'minimalist', 'ornate',\n    'handmade', 'machine made', 'artisan', 'luxury',\n    'simple', 'complex', 'detailed', 'abstract',\n    'colorful', 'monochrome', 'bright', 'dark',\n    'day', 'night', 'indoor', 'outdoor',\n    'studio', 'natural', 'artificial', 'warm',\n    'cool', 'soft', 'hard', 'textured', 'smooth',\n    'tones', 'setting', 'mood', 'casual'\n  ];\n  \n  // Check if user already provided specific details\n  const hasSpecificDetails = specificKeywords.some(keyword => lowerMessage.includes(keyword));\n  \n  // Check if message is too vague - be more lenient\n  const isVague = message.length < 20 || \n                  (lowerMessage.includes('image') && message.length < 40) || \n                  (lowerMessage.includes('photo') && message.length < 40) || \n                  (lowerMessage.includes('picture') && message.length < 40);\n  \n  // Ask for clarification only if message is very vague and lacks specific details\n  // Be more generous - if they mention a specific item + any style/color/setting, proceed\n  const hasCraftItem = craftItem && craftItem.length > 0;\n  const shouldAsk = isVague && !hasSpecificDetails && !hasCraftItem;\n  \n  console.log(`üé® Image clarification check: Message length: ${message.length}, Has specific details: ${hasSpecificDetails}, Has craft item: ${hasCraftItem}, Should ask: ${shouldAsk}`);\n  \n  return shouldAsk;\n}\n\nfunction generateImageClarificationQuestions(craftItem: string, language: string): string[] {\n  const questions = {\n    'en': [\n      `üé® **Style Preference**: What style would you like for your ${craftItem}? (Traditional/Modern/Vintage/Contemporary)`,\n      `üé® **Color Scheme**: Any specific colors or color theme? (Warm tones/Cool tones/Bright/Neutral)`,\n      `üé® **Setting**: Where should the ${craftItem} be displayed? (Studio/Home/Outdoor/Workshop)`,\n      `üé® **Mood**: What feeling should the image convey? (Elegant/Casual/Luxurious/Simple)`,\n      `üé® **Details**: Any specific features to highlight? (Texture/Pattern/Size/Finish)`\n    ],\n    'hi': [\n      `üé® **‡§∂‡•à‡§≤‡•Ä**: ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ${craftItem} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§∏ ‡§∂‡•à‡§≤‡•Ä ‡§ï‡•ã ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á? (‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï/‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï/‡§µ‡§ø‡§Ç‡§ü‡•á‡§ú/‡§∏‡§Æ‡§ï‡§æ‡§≤‡•Ä‡§®)`,\n      `üé® **‡§∞‡§Ç‡§ó ‡§Ø‡•ã‡§ú‡§®‡§æ**: ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∞‡§Ç‡§ó ‡§Ø‡§æ ‡§∞‡§Ç‡§ó ‡§•‡•Ä‡§Æ? (‡§ó‡§∞‡•ç‡§Æ ‡§ü‡•ã‡§®/‡§†‡§Ç‡§°‡•á ‡§ü‡•ã‡§®/‡§ö‡§Æ‡§ï‡•Ä‡§≤‡•á/‡§§‡§ü‡§∏‡•ç‡§•)`,\n      `üé® **‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó**: ${craftItem} ‡§ï‡§π‡§æ‡§Å ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è? (‡§∏‡•ç‡§ü‡•Ç‡§°‡§ø‡§Ø‡•ã/‡§ò‡§∞/‡§¨‡§æ‡§π‡§∞/‡§ï‡§æ‡§∞‡•ç‡§Ø‡§∂‡§æ‡§≤‡§æ)`,\n      `üé® **‡§Æ‡•Ç‡§°**: ‡§õ‡§µ‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§≠‡§æ‡§µ‡§®‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§ ‡§ï‡§∞‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è? (‡§∏‡•Å‡§∞‡•Å‡§ö‡§ø‡§™‡•Ç‡§∞‡•ç‡§£/‡§Ü‡§∞‡§æ‡§Æ‡§¶‡§æ‡§Ø‡§ï/‡§≤‡§ï‡•ç‡§ú‡§∞‡•Ä/‡§∏‡§∞‡§≤)`,\n      `üé® **‡§µ‡§ø‡§µ‡§∞‡§£**: ‡§ï‡•ã‡§à ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç ‡§ú‡•ã ‡§π‡§æ‡§á‡§≤‡§æ‡§á‡§ü ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à‡§Ç? (‡§¨‡§®‡§æ‡§µ‡§ü/‡§™‡•à‡§ü‡§∞‡•ç‡§®/‡§Ü‡§ï‡§æ‡§∞/‡§´‡§ø‡§®‡§ø‡§∂)`\n    ],\n    'bn': [\n      `üé® **‡¶∂‡ßà‡¶≤‡ßÄ**: ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ${craftItem} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶∂‡ßà‡¶≤‡ßÄ ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®? (‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø‡¶ó‡¶§/‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï/‡¶≠‡¶ø‡¶®‡¶ü‡ßá‡¶ú/‡¶∏‡¶Æ‡¶∏‡¶æ‡¶Æ‡¶Ø‡¶º‡¶ø‡¶ï)`,\n      `üé® **‡¶∞‡¶ô‡ßá‡¶∞ ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ**: ‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶∞‡¶ô ‡¶¨‡¶æ ‡¶∞‡¶ô‡ßá‡¶∞ ‡¶•‡¶ø‡¶Æ? (‡¶â‡¶∑‡ßç‡¶£ ‡¶ü‡ßã‡¶®/‡¶∂‡ßÄ‡¶§‡¶≤ ‡¶ü‡ßã‡¶®/‡¶â‡¶ú‡ßç‡¶ú‡ßç‡¶¨‡¶≤/‡¶®‡¶ø‡¶∞‡¶™‡ßá‡¶ï‡ßç‡¶∑)`,\n      `üé® **‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç**: ${craftItem} ‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§? (‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡¶ø‡¶ì/‡¶¨‡¶æ‡¶°‡¶º‡¶ø/‡¶¨‡¶æ‡¶á‡¶∞‡ßá/‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï‡¶∂‡¶™)`,\n      `üé® **‡¶Æ‡ßÅ‡¶°**: ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶ï‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶≠‡ßÇ‡¶§‡¶ø ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂ ‡¶ï‡¶∞‡¶¨‡ßá? (‡¶Æ‡¶æ‡¶∞‡ßç‡¶ú‡¶ø‡¶§/‡¶Ü‡¶∞‡¶æ‡¶Æ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ï/‡¶¨‡¶ø‡¶≤‡¶æ‡¶∏‡¶¨‡¶π‡ßÅ‡¶≤/‡¶∏‡¶∞‡¶≤)`,\n      `üé® **‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§**: ‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø? (‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ö‡¶æ‡¶∞/‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∞‡ßç‡¶®/‡¶Ü‡¶ï‡¶æ‡¶∞/‡¶´‡¶ø‡¶®‡¶ø‡¶∂)`\n    ]\n  };\n  \n  return questions[language as keyof typeof questions] || questions['en'];\n}\n\nfunction hasImageClarificationDetails(message: string): boolean {\n  const lowerMessage = message.toLowerCase();\n  \n  // Check if user provided specific style preferences\n  const styleKeywords = [\n    'traditional', 'modern', 'vintage', 'contemporary', 'rustic', 'elegant',\n    'minimalist', 'ornate', 'handmade', 'luxury', 'simple', 'complex'\n  ];\n  \n  // Check if user provided color preferences\n  const colorKeywords = [\n    'red', 'blue', 'green', 'yellow', 'purple', 'orange', 'pink', 'brown',\n    'black', 'white', 'gray', 'gold', 'silver', 'warm', 'cool', 'bright',\n    'dark', 'neutral', 'colorful', 'monochrome', 'tones'\n  ];\n  \n  // Check if user provided setting preferences\n  const settingKeywords = [\n    'studio', 'home', 'outdoor', 'workshop', 'garden', 'kitchen', 'living room',\n    'bedroom', 'office', 'market', 'street', 'nature', 'urban', 'settings'\n  ];\n  \n  // Check if user provided mood preferences\n  const moodKeywords = [\n    'elegant', 'casual', 'luxurious', 'simple', 'romantic', 'professional',\n    'playful', 'serious', 'peaceful', 'energetic', 'calm', 'dramatic', 'mood'\n  ];\n  \n  // Count how many categories the user provided details for\n  const hasStyle = styleKeywords.some(keyword => lowerMessage.includes(keyword));\n  const hasColor = colorKeywords.some(keyword => lowerMessage.includes(keyword));\n  const hasSetting = settingKeywords.some(keyword => lowerMessage.includes(keyword));\n  const hasMood = moodKeywords.some(keyword => lowerMessage.includes(keyword));\n  \n  // Consider it has clarification if user provided details in at least 1 category (be more lenient)\n  const clarificationCount = [hasStyle, hasColor, hasSetting, hasMood].filter(Boolean).length;\n  \n  console.log(`üé® Clarification details found: Style: ${hasStyle}, Color: ${hasColor}, Setting: ${hasSetting}, Mood: ${hasMood} (Total: ${clarificationCount})`);\n  console.log(`üé® Message analyzed: \"${message}\"`);\n  \n  // Also check if the message seems like a response to questions (contains multiple preferences)\n  const hasMultiplePreferences = (lowerMessage.includes('style') || lowerMessage.includes('color') || \n                                lowerMessage.includes('setting') || lowerMessage.includes('mood') ||\n                                lowerMessage.includes('tones') || lowerMessage.includes('casua'));\n  \n  // If user mentions multiple preferences or seems to be answering questions, consider it clarification\n  if (hasMultiplePreferences && clarificationCount >= 1) {\n    console.log('üé® Detected as clarification based on multiple preferences mentioned');\n    return true;\n  }\n  \n  return clarificationCount >= 2;\n}\n\nasync function generateComprehensiveImages(craft: string, context: string, language: string): Promise<GeneratedImage[]> {\n  console.log('üé® Starting comprehensive image generation...');\n  console.log('üé® Craft item to generate:', craft);\n  console.log('üé® User context:', context);\n  \n  const imageStrategies = [\n    {\n      style: 'Product Hero Shot',\n      description: 'Professional product photography with clean background',\n      prompt: `Professional product photograph of ${craft}, clean white background, studio lighting, high resolution, commercial quality, detailed texture, artisan craftsmanship, traditional Indian design, 4K quality${context.includes('traditional') ? ', traditional style' : ''}${context.includes('modern') ? ', modern contemporary style' : ''}${context.includes('vintage') ? ', vintage retro style' : ''}${context.includes('elegant') ? ', elegant sophisticated style' : ''}`,\n      platform: 'instagram' as const,\n      tags: ['product', 'professional', 'hero', 'clean'],\n      dimensions: '1080x1080',\n      bestTime: '7-9 PM IST'\n    },\n    {\n      style: 'Lifestyle Context',\n      description: 'Craft being used in real-life setting',\n      prompt: `${craft} being used in daily Indian life, natural warm lighting, authentic home setting, hands interacting with craft, cultural context, cozy atmosphere, realistic lifestyle photography${context.includes('home') ? ', cozy home environment' : ''}${context.includes('outdoor') ? ', outdoor natural setting' : ''}${context.includes('studio') ? ', professional studio setting' : ''}${context.includes('warm') ? ', warm golden lighting' : ''}${context.includes('cool') ? ', cool natural lighting' : ''}`,\n      platform: 'facebook' as const,\n      tags: ['lifestyle', 'authentic', 'daily', 'cultural'],\n      dimensions: '1200x630',\n      bestTime: '8-10 AM IST'\n    },\n    {\n      style: 'Artisan at Work',\n      description: 'Behind-the-scenes crafting process',\n      prompt: `Indian artisan hands creating ${craft}, traditional workspace, focused craftsmanship, cultural heritage, detailed hands working, warm natural lighting, traditional tools, authentic workshop setting`,\n      platform: 'instagram' as const,\n      tags: ['behind-the-scenes', 'artisan', 'process', 'heritage'],\n      dimensions: '1080x1350',\n      bestTime: '6-8 PM IST'\n    }\n  ];\n\n  const generatedImages: GeneratedImage[] = [];\n\n  for (const [index, strategy] of imageStrategies.entries()) {\n    console.log(`üé® Processing ${strategy.style} (${index + 1}/${imageStrategies.length})`);\n    \n    try {\n      // Try to generate real image for first strategy only (quota management)\n      let imageUrl: string | null = null;\n      if (index === 0) {\n        console.log('üé® Attempting real image generation for hero shot...');\n        imageUrl = await generateImageWithGemini25(strategy.prompt);\n      }\n\n      const caption = generateEnhancedCaption(craft, strategy.style, strategy.platform, language);\n      const hashtags = generateRelevantHashtags(craft, strategy.style, language);\n      const creationTips = generateCreationTips(strategy, language);\n\n      generatedImages.push({\n        id: `${strategy.style.toLowerCase().replace(/\\s+/g, '-')}-${Date.now()}`,\n        description: strategy.description,\n        prompt: strategy.prompt,\n        style: strategy.style,\n        platform: strategy.platform,\n        tags: strategy.tags,\n        suggestedCaption: caption,\n        hashtags,\n        imageUrl,\n        isGenerated: !!imageUrl,\n        creationTips,\n        dimensions: strategy.dimensions,\n        bestTime: strategy.bestTime\n      });\n\n    } catch (error) {\n      console.error(`‚ùå Error processing ${strategy.style}:`, error);\n      \n      // Add fallback with creation guide\n      const caption = generateEnhancedCaption(craft, strategy.style, strategy.platform, language);\n      const hashtags = generateRelevantHashtags(craft, strategy.style, language);\n      const creationTips = generateCreationTips(strategy, language);\n\n      generatedImages.push({\n        id: `fallback-${strategy.style.toLowerCase().replace(/\\s+/g, '-')}-${Date.now()}`,\n        description: strategy.description,\n        prompt: strategy.prompt,\n        style: strategy.style,\n        platform: strategy.platform,\n        tags: strategy.tags,\n        suggestedCaption: caption,\n        hashtags,\n        isGenerated: false,\n        creationTips,\n        dimensions: strategy.dimensions,\n        bestTime: strategy.bestTime\n      });\n    }\n\n    // Rate limiting delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n  }\n\n  console.log(`üé® Image generation complete. Generated: ${generatedImages.filter(img => img.isGenerated).length}/${generatedImages.length}`);\n  return generatedImages;\n}\n\nexport async function generateImageWithGemini25(prompt: string, productImageData?: string): Promise<string | null> {\n  try {\n    console.log('üé® Using Gemini 2.5 Flash Image Preview to generate image...');\n    \n    const { GoogleGenAI } = await import('@google/genai');\n    \n    // We need a proper API key for @google/genai package\n    // For now, let's use a placeholder and show the user what's needed\n    const apiKey = process.env.GOOGLE_CLOUD_API_KEY;\n    \n    if (!apiKey) {\n      console.log('‚ö†Ô∏è GOOGLE_CLOUD_API_KEY not found. Please set up an API key for @google/genai package.');\n      console.log('üìù To get an API key:');\n      console.log('   1. Go to https://aistudio.google.com/app/apikey');\n      console.log('   2. Create a new API key');\n      console.log('   3. Add GOOGLE_CLOUD_API_KEY=your_api_key to your .env.local file');\n      return null;\n    }\n    \n    const ai = new GoogleGenAI({\n      apiKey: apiKey,\n    });\n    \n    const model = 'gemini-2.5-flash-image-preview';\n    \n    // Set up generation config\n    const generationConfig = {\n      maxOutputTokens: 32768,\n      temperature: 1,\n      topP: 0.95,\n      responseModalities: [\"TEXT\", \"IMAGE\"],\n      safetySettings: [\n        {\n          category: 'HARM_CATEGORY_HATE_SPEECH',\n          threshold: 'OFF',\n        },\n        {\n          category: 'HARM_CATEGORY_DANGEROUS_CONTENT',\n          threshold: 'OFF',\n        },\n        {\n          category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n          threshold: 'OFF',\n        },\n        {\n          category: 'HARM_CATEGORY_HARASSMENT',\n          threshold: 'OFF',\n        }\n      ],\n    };\n\n    // Prepare the request\n    const parts: any[] = [{ text: prompt }];\n    \n    // If product image is provided, add it to the request\n    if (productImageData) {\n      const base64Data = productImageData.replace(/^data:image\\/[a-z]+;base64,/, '');\n      const mimeType = productImageData.match(/^data:image\\/([a-z]+);base64,/)?.[1] || 'jpeg';\n      \n      const imagePart = {\n        inlineData: {\n          mimeType: `image/${mimeType}`,\n          data: base64Data\n        }\n      };\n      \n      parts.unshift(imagePart);\n    }\n\n    const req = {\n      model: model,\n      contents: [\n        {\n          role: 'user', \n          parts: parts\n        }\n      ],\n      config: generationConfig,\n    };\n\n    const streamingResp = await ai.models.generateContentStream(req);\n    \n    let generatedImage: string | null = null;\n    \n     for await (const chunk of streamingResp) {\n       if (chunk.text) {\n         console.log('üìù Generated text:', chunk.text);\n       }\n       \n       // Check for image data in various possible locations\n       if ((chunk as any).candidates) {\n         for (const candidate of (chunk as any).candidates) {\n           if (candidate.content && candidate.content.parts) {\n             for (const part of candidate.content.parts) {\n               if (part.inlineData && part.inlineData.data) {\n                 generatedImage = `data:image/png;base64,${part.inlineData.data}`;\n                 console.log('üñºÔ∏è Generated image received from candidate');\n                 break;\n               }\n             }\n           }\n         }\n       }\n       \n       // Also check direct image property\n       if ((chunk as any).image) {\n         if ((chunk as any).image.inlineData && (chunk as any).image.inlineData.data) {\n           generatedImage = `data:image/png;base64,${(chunk as any).image.inlineData.data}`;\n           console.log('üñºÔ∏è Generated image received from direct property');\n         }\n       }\n       \n       // Check for inlineData in the chunk itself\n       if ((chunk as any).inlineData && (chunk as any).inlineData.data) {\n         generatedImage = `data:image/png;base64,${(chunk as any).inlineData.data}`;\n         console.log('üñºÔ∏è Generated image received from inlineData');\n       }\n     }\n    \n    return generatedImage;\n  } catch (error) {\n    console.error('‚ùå Gemini 2.5 Flash Image Preview generation failed:', error);\n    return null;\n  }\n}\n\nfunction generateEnhancedCaption(craft: string, style: string, platform: string, language: string): string {\n  const templates = {\n    'en': {\n      'Product Hero Shot': `‚ú® Pure craftsmanship meets modern elegance in this ${craft}. Every detail tells a story of tradition and skill. Handmade with love, designed to last generations.`,\n      'Lifestyle Context': `üè° Beautiful ${craft} bringing warmth to everyday moments. This is how tradition lives in modern homes - functional, beautiful, meaningful.`,\n      'Artisan at Work': `üëê The magic happens here - skilled hands shaping ${craft} using techniques passed down through generations. This is the heart of authentic craftsmanship.`\n    },\n    'hi': {\n      'Product Hero Shot': `‚ú® ‡§á‡§∏ ${craft} ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§¶‡•ç‡§ß ‡§∂‡§ø‡§≤‡•ç‡§™‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§∏‡•Å‡§Ç‡§¶‡§∞‡§§‡§æ ‡§ï‡§æ ‡§Æ‡•á‡§≤‡•§ ‡§π‡§∞ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§™‡§∞‡§Ç‡§™‡§∞‡§æ ‡§î‡§∞ ‡§ï‡•å‡§∂‡§≤ ‡§ï‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡§π‡§§‡§æ ‡§π‡•à‡•§`,\n      'Lifestyle Context': `üè° ‡§∏‡•Å‡§Ç‡§¶‡§∞ ${craft} ‡§∞‡•ã‡§ú‡§Æ‡§∞‡•ç‡§∞‡§æ ‡§ï‡•á ‡§™‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ó‡§∞‡•ç‡§Æ‡§ú‡•ã‡§∂‡•Ä ‡§≤‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π‡•Ä ‡§§‡•ã ‡§π‡•à ‡§™‡§∞‡§Ç‡§™‡§∞‡§æ ‡§ï‡§æ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§∞‡•Ç‡§™‡•§`,\n      'Artisan at Work': `üëê ‡§Ø‡§π‡§æ‡§Å ‡§ú‡§æ‡§¶‡•Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à - ‡§ï‡•Å‡§∂‡§≤ ‡§π‡§æ‡§• ${craft} ‡§ï‡•ã ‡§Ü‡§ï‡§æ‡§∞ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç ‡§™‡•Ä‡§¢‡§º‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§ö‡§≤‡•Ä ‡§Ü ‡§∞‡§π‡•Ä ‡§§‡§ï‡§®‡•Ä‡§ï‡•ã‡§Ç ‡§∏‡•á‡•§`\n    },\n    'bn': {\n      'Product Hero Shot': `‚ú® ‡¶è‡¶á ${craft} ‡¶è ‡¶¨‡¶ø‡¶∂‡ßÅ‡¶¶‡ßç‡¶ß ‡¶ï‡¶æ‡¶∞‡ßÅ‡¶∂‡¶ø‡¶≤‡ßç‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶ï‡¶Æ‡¶®‡ßÄ‡¶Ø‡¶º‡¶§‡¶æ‡¶∞ ‡¶Æ‡¶ø‡¶≤‡¶®‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø ‡¶ì ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ‡¶∞ ‡¶ó‡¶≤‡ßç‡¶™ ‡¶¨‡¶≤‡ßá‡•§`,\n      'Lifestyle Context': `üè° ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ${craft} ‡¶¶‡ßà‡¶®‡¶®‡ßç‡¶¶‡¶ø‡¶® ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡¶ó‡ßÅ‡¶≤‡¶ø‡¶§‡ßá ‡¶â‡¶∑‡ßç‡¶£‡¶§‡¶æ ‡¶Ü‡¶®‡ßá‡•§ ‡¶è‡¶≠‡¶æ‡¶¨‡ßá‡¶á ‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶ò‡¶∞‡ßá ‡¶¨‡¶æ‡¶∏ ‡¶ï‡¶∞‡ßá‡•§`,\n      'Artisan at Work': `üëê ‡¶è‡¶ñ‡¶æ‡¶®‡ßá‡¶á ‡¶ú‡¶æ‡¶¶‡ßÅ ‡¶ò‡¶ü‡ßá - ‡¶¶‡¶ï‡ßç‡¶∑ ‡¶π‡¶æ‡¶§ ${craft} ‡¶ó‡¶°‡¶º‡ßá ‡¶§‡ßã‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶ú‡¶®‡ßç‡¶Æ‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶™‡ßç‡¶∞‡¶ú‡¶®‡ßç‡¶Æ ‡¶ß‡¶∞‡ßá ‡¶ö‡¶≤‡¶æ ‡¶ï‡ßå‡¶∂‡¶≤‡ßá‡•§`\n    }\n  };\n\n  const languageTemplates = templates[language as keyof typeof templates] || templates['en'];\n  return languageTemplates[style as keyof typeof languageTemplates] || languageTemplates['Product Hero Shot'];\n}\n\nfunction generateRelevantHashtags(craft: string, style: string, language: string): string[] {\n  const baseHashtags = [\n    '#HandmadeInIndia',\n    '#ArtisanCraft',\n    '#TraditionalCraft',\n    `#${craft.replace(/\\s+/g, '')}`,\n    '#IndianArtisan'\n  ];\n\n  const styleHashtags: { [key: string]: string[] } = {\n    'Product Hero Shot': ['#ProductPhotography', '#HandmadeDesign', '#CraftedWithLove'],\n    'Lifestyle Context': ['#LifestyleDesign', '#HomeD√©cor', '#AuthenticLiving'],\n    'Artisan at Work': ['#BehindTheScenes', '#ArtisanLife', '#TraditionalSkills']\n  };\n\n  const languageHashtags: { [key: string]: string[] } = {\n    'hi': ['#‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø‡§∂‡§ø‡§≤‡•ç‡§™', '#‡§π‡§∏‡•ç‡§§‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§', '#‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï'],\n    'bn': ['#‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º‡¶∂‡¶ø‡¶≤‡ßç‡¶™', '#‡¶π‡¶∏‡ßç‡¶§‡¶®‡¶ø‡¶∞‡ßç‡¶Æ‡¶ø‡¶§', '#‡¶ê‡¶§‡¶ø‡¶π‡ßç‡¶Ø‡¶ó‡¶§'],\n    'en': ['#MadeInIndia', '#SupportArtisans', '#CulturalHeritage']\n  };\n\n  return [\n    ...baseHashtags,\n    ...(styleHashtags[style] || []),\n    ...(languageHashtags[language] || languageHashtags['en'])\n  ].slice(0, 10);\n}\n\nfunction generateCreationTips(strategy: any, language: string): string {\n  const tips = {\n    'en': {\n      'Product Hero Shot': 'Use natural window light, white background, multiple angles, focus on texture details, shoot in square format for Instagram',\n      'Lifestyle Context': 'Include hands using the product, warm home lighting, show scale with everyday objects, capture candid moments',\n      'Artisan at Work': 'Focus on hands and tools, show process steps, use close-up details, natural workshop lighting, tell the story'\n    },\n    'hi': {\n      'Product Hero Shot': '‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ñ‡§ø‡§°‡§º‡§ï‡•Ä ‡§ï‡•Ä ‡§∞‡•ã‡§∂‡§®‡•Ä, ‡§∏‡§´‡•á‡§¶ ‡§¨‡•à‡§ï‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§°, ‡§ï‡§à ‡§ï‡•ã‡§£, ‡§¨‡§®‡§æ‡§µ‡§ü ‡§ï‡•Ä ‡§¨‡§æ‡§∞‡•Ä‡§ï‡§ø‡§Ø‡§æ‡§Ç, Instagram ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§ï‡•ç‡§µ‡•á‡§Ø‡§∞ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü',\n      'Lifestyle Context': '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡•á ‡§π‡•Å‡§è ‡§π‡§æ‡§•, ‡§ò‡§∞ ‡§ï‡•Ä ‡§ó‡§∞‡•ç‡§Æ ‡§∞‡•ã‡§∂‡§®‡•Ä, ‡§∞‡•ã‡§ú‡§Æ‡§∞‡•ç‡§∞‡§æ ‡§ï‡•Ä ‡§µ‡§∏‡•ç‡§§‡•Å‡§ì‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§ï‡§æ‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç',\n      'Artisan at Work': '‡§π‡§æ‡§•‡•ã‡§Ç ‡§î‡§∞ ‡§â‡§™‡§ï‡§∞‡§£‡•ã‡§Ç ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç, ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§ö‡§∞‡§£ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç, ‡§ï‡§∞‡•Ä‡§¨‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£, ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§∂‡§æ‡§≤‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂'\n    },\n    'bn': {\n      'Product Hero Shot': '‡¶™‡ßç‡¶∞‡¶æ‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶ú‡¶æ‡¶®‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶Ü‡¶≤‡ßã, ‡¶∏‡¶æ‡¶¶‡¶æ ‡¶™‡¶ü‡¶≠‡ßÇ‡¶Æ‡¶ø, ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ï‡ßã‡¶£, ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ö‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£‡ßá ‡¶´‡ßã‡¶ï‡¶æ‡¶∏, Instagram ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶∞‡ßç‡¶ó‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü',\n      'Lifestyle Context': '‡¶™‡¶£‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶æ‡¶§ ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶ò‡¶∞‡ßá‡¶∞ ‡¶â‡¶∑‡ßç‡¶£ ‡¶Ü‡¶≤‡ßã, ‡¶¶‡ßà‡¶®‡¶®‡ßç‡¶¶‡¶ø‡¶® ‡¶¨‡¶∏‡ßç‡¶§‡ßÅ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡ßç‡¶ï‡ßá‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®',\n      'Artisan at Work': '‡¶π‡¶æ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶∞‡¶û‡ßç‡¶ú‡¶æ‡¶Æ‡ßá ‡¶´‡ßã‡¶ï‡¶æ‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ß‡¶æ‡¶™ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®, ‡¶ï‡ßç‡¶≤‡ßã‡¶ú-‡¶Ü‡¶™ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£, ‡¶™‡ßç‡¶∞‡¶æ‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶ï‡¶∞‡ßç‡¶Æ‡¶∂‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶Ü‡¶≤‡ßã'\n    }\n  };\n\n  const languageTips = tips[language as keyof typeof tips] || tips['en'];\n  return languageTips[strategy.style as keyof typeof languageTips] || languageTips['Product Hero Shot'];\n}\n\nfunction generateMarketingCalendar(language: string): MarketingEvent[] {\n  const currentDate = new Date();\n  const currentMonth = currentDate.getMonth();\n  \n  const events: MarketingEvent[] = [];\n  \n  // Generate next 30 days of marketing opportunities\n  for (let i = 0; i < 30; i++) {\n    const date = new Date(currentDate);\n    date.setDate(date.getDate() + i);\n    \n    const monthEvents = getMonthlyEvents(date.getMonth() + 1, language);\n    if (monthEvents.length > 0) {\n      const randomEvent = monthEvents[Math.floor(Math.random() * monthEvents.length)];\n      if (Math.random() > 0.7) { // 30% chance to include each event\n        events.push({\n          date: date.toISOString().split('T')[0],\n          ...randomEvent\n        });\n      }\n    }\n  }\n  \n  return events.slice(0, 5); // Return top 5 upcoming opportunities\n}\n\nfunction getMonthlyEvents(month: number, language: string): Omit<MarketingEvent, 'date'>[] {\n  const eventsByMonth: { [key: number]: { [lang: string]: Omit<MarketingEvent, 'date'>[] } } = {\n    1: {\n      'en': [\n        {\n          event: 'Makar Sankranti',\n          opportunity: 'Traditional kite themes and winter crafts',\n          contentIdeas: ['Kite-making process', 'Winter festival crafts', 'Traditional sweets presentation'],\n          hashtags: ['#MakarSankranti', '#KiteFestival', '#WinterCrafts']\n        }\n      ]\n    },\n    10: {\n      'en': [\n        {\n          event: 'Diwali Preparation Week',\n          opportunity: 'Festival decorations and gift items peak demand',\n          contentIdeas: ['Diwali decor DIY', 'Traditional diyas', 'Festival gift sets', 'Rangoli patterns'],\n          hashtags: ['#DiwaliDecor', '#FestivalCrafts', '#TraditionalGifts', '#DiwaliPrep']\n        },\n        {\n          event: 'Navratri',\n          opportunity: 'Colorful traditional wear and accessories',\n          contentIdeas: ['Garba night accessories', 'Traditional jewelry', 'Colorful textiles'],\n          hashtags: ['#Navratri', '#GarbaNight', '#TraditionalWear']\n        }\n      ]\n    }\n  };\n  \n  return eventsByMonth[month]?.[language] || eventsByMonth[month]?.['en'] || [];\n}\n\nfunction generatePricingRecommendation(context: ArtisanContext | undefined, language: string): PricingRecommendation {\n  // Base pricing calculation (this would ideally use real market data)\n  const baseMaterialCost = 100; // Example base cost\n  const timeMultiplier = 50; // Per hour\n  const skillPremium = 1.5;\n  const marketPosition = 2.0; // Premium positioning\n  \n  const suggestedPrice = baseMaterialCost * skillPremium * marketPosition;\n  \n  return {\n    suggestedPrice: Math.round(suggestedPrice),\n    priceRange: {\n      min: Math.round(suggestedPrice * 0.8),\n      max: Math.round(suggestedPrice * 1.4)\n    },\n    factors: [\n      'Material quality and sourcing',\n      'Time investment and skill level',\n      'Market positioning and brand value',\n      'Seasonal demand fluctuations',\n      'Competitor pricing analysis'\n    ],\n    competitorAnalysis: 'Position 15-20% above mass market, focus on craftsmanship story',\n    valueProposition: [\n      'Handmade authenticity',\n      'Cultural heritage value',\n      'Sustainable craftsmanship',\n      'Unique design elements',\n      'Artisan story and connection'\n    ]\n  };\n}\n\nfunction getFestivalContext(month: number, language: string): string {\n  const contexts = {\n    'en': {\n      1: 'New Year resolutions, Makar Sankranti, Republic Day themes',\n      2: 'Valentine\\'s Day gifts, Basant Panchami spring themes',\n      3: 'Holi colors, Women\\'s Day empowerment',\n      9: 'Ganesh Chaturthi, festive season beginning',\n      10: 'Navratri, Dussehra, Diwali preparation peak',\n      11: 'Diwali peak, post-festival, wedding season',\n      12: 'Christmas, New Year preparation, winter themes'\n    },\n    'hi': {\n      10: '‡§®‡§µ‡§∞‡§æ‡§§‡•ç‡§∞‡§ø, ‡§¶‡§∂‡§π‡§∞‡§æ, ‡§¶‡•Ä‡§µ‡§æ‡§≤‡•Ä ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡§æ ‡§ö‡§∞‡§Æ ‡§∏‡§Æ‡§Ø',\n      11: '‡§¶‡•Ä‡§µ‡§æ‡§≤‡•Ä ‡§ï‡§æ ‡§ö‡§∞‡§Æ, ‡§§‡•ç‡§Ø‡•ã‡§π‡§æ‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§¶, ‡§∂‡§æ‡§¶‡•Ä ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ'\n    }\n  };\n  \n  const langContexts = contexts[language as keyof typeof contexts] || contexts['en'];\n  return langContexts[month as keyof typeof langContexts] || 'Regular season - focus on quality and consistency';\n}\n\nfunction shouldAskFollowUp(message: string, content: string): boolean {\n  const veryVaguePatterns = [\n    /^help$/i,\n    /^hi$/i,\n    /^hello$/i,\n    /^start.*business$/i,\n    /^i need help$/i\n  ];\n  \n  return veryVaguePatterns.some(pattern => pattern.test(message.trim())) && \n         message.length < 15;\n}\n\nfunction generateSmartFollowUpQuestions(message: string, context: ArtisanContext | undefined, language: string): string[] {\n  const questions = {\n    'en': [\n      'What specific craft or art form do you work with?',\n      'What\\'s your main challenge right now - marketing, pricing, or something else?'\n    ],\n    'hi': [\n      '‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∂‡§ø‡§≤‡•ç‡§™ ‡§Ø‡§æ ‡§ï‡§≤‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?',\n      '‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ö‡•Å‡§®‡•å‡§§‡•Ä ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à - ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó, ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£, ‡§Ø‡§æ ‡§ï‡•Å‡§õ ‡§î‡§∞?'\n    ],\n    'bn': [\n      '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ï‡¶æ‡¶∞‡ßÅ‡¶∂‡¶ø‡¶≤‡ßç‡¶™ ‡¶¨‡¶æ ‡¶∂‡¶ø‡¶≤‡ßç‡¶™‡¶ï‡¶≤‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡¶®?',\n      '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶û‡ßç‡¶ú ‡¶ï‡ßÄ - ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶ø‡¶Ç, ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£, ‡¶®‡¶æ‡¶ï‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ?'\n    ]\n  };\n  \n  return questions[language as keyof typeof questions] || questions['en'];\n}\n\nfunction isMarketingRequest(message: string): boolean {\n  const marketingKeywords = [\n    'instagram', 'facebook', 'social media', 'marketing', 'post', 'caption',\n    'hashtag', 'content', 'promote', 'advertise', 'campaign', 'audience',\n    'engagement', 'followers', 'viral', 'reach'\n  ];\n  \n  return marketingKeywords.some(keyword => message.toLowerCase().includes(keyword));\n}\n\nfunction isPricingRequest(message: string): boolean {\n  const pricingKeywords = [\n    'price', 'cost', 'pricing', 'charge', 'sell', 'value', 'worth', 'rate', 'fee'\n  ];\n  \n  return pricingKeywords.some(keyword => message.toLowerCase().includes(keyword));\n}\n\nfunction isImageRequest(message: string): boolean {\n  const imageKeywords = [\n    'image', 'photo', 'picture', 'visual', 'camera', 'shoot', 'photography', 'pic'\n  ];\n  \n  // Don't trigger on story-related content that might contain image-like words\n  const storyContext = message.toLowerCase().includes('story') || \n                      message.toLowerCase().includes('narrative') || \n                      message.toLowerCase().includes('video') ||\n                      message.toLowerCase().includes('cinematic');\n  \n  // Only trigger if it's clearly an image request and not a story request\n  if (storyContext) {\n    return false;\n  }\n  \n  return imageKeywords.some(keyword => message.toLowerCase().includes(keyword));\n}\n\nfunction extractHashtags(content: string): string[] {\n  const hashtagRegex = /#[\\w\\u0900-\\u097F]+/g;\n  const matches = content.match(hashtagRegex);\n  return matches ? [...new Set(matches)].slice(0, 10) : [];\n}\n\nexport async function generateImageWithGemini(prompt: string, productImageData: string): Promise<string | null> {\n  try {\n    console.log('üîå Using Vertex AI Gemini to analyze product image...');\n    \n    // Use Vertex AI to analyze the uploaded image and enhance the prompt\n    const { model } = await initializeVertexAI();\n\n    // Convert base64 data to proper format\n    const base64Data = productImageData.replace(/^data:image\\/[a-z]+;base64,/, '');\n    const mimeType = productImageData.match(/^data:image\\/([a-z]+);base64,/)?.[1] || 'jpeg';\n    \n    const imagePart = {\n      inlineData: {\n        mimeType: `image/${mimeType}`,\n        data: base64Data\n      }\n    };\n    \n    const analysisPrompt = `Analyze this product image and describe its key visual characteristics that should be preserved in professional product photography. Focus on:\n    - Product design, shape, and form\n    - Colors, patterns, and textures\n    - Materials and craftsmanship details\n    - Unique selling points and visual appeal\n    \n    Provide a detailed description that can be used to create professional product photography while preserving these exact characteristics.`;\n    \n    const result = await model.generateContent({\n      contents: [{\n        role: 'user',\n        parts: [imagePart, { text: analysisPrompt }]\n      }]\n    });\n    const response = await result.response;\n    const analysis = extractTextFromResponse(response);\n    \n    console.log('üìù Product analysis:', analysis);\n    console.log('‚ÑπÔ∏è Using enhanced prompt with Imagen for generation');\n    \n    // Return null to use Imagen fallback, but the analysis helps with better prompts\n    return null;\n\n  } catch (error) {\n    console.error('‚ùå Gemini image analysis failed:', error);\n    return null;\n  }\n}\n\nfunction enhanceMarketingContent(content: string, language: string): string {\n  const currentTime = new Date().getHours();\n  const bestPostingTime = currentTime < 19 ? '7-9 PM IST today' : '7-9 PM IST tomorrow';\n  \n  const enhancements = {\n    'en': `\\n\\nüìà **Quick Action Plan:**\\n‚Ä¢ Post at optimal time: ${bestPostingTime}\\n‚Ä¢ Use 8-12 relevant hashtags\\n‚Ä¢ Engage with comments within 2 hours\\n‚Ä¢ Cross-post to Facebook and Instagram\\n‚Ä¢ Track engagement and adjust strategy`,\n    'hi': `\\n\\nüìà **‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ:**\\n‚Ä¢ ‡§á‡§∑‡•ç‡§ü‡§§‡§Æ ‡§∏‡§Æ‡§Ø ‡§™‡§∞ ‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç: ${bestPostingTime}\\n‚Ä¢ 8-12 ‡§™‡•ç‡§∞‡§æ‡§∏‡§Ç‡§ó‡§ø‡§ï ‡§π‡•à‡§∂‡§ü‡•à‡§ó ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\\n‚Ä¢ 2 ‡§ò‡§Ç‡§ü‡•á ‡§ï‡•á ‡§≠‡•Ä‡§§‡§∞ ‡§ü‡§ø‡§™‡•ç‡§™‡§£‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡•Å‡§°‡§º‡•á‡§Ç\\n‚Ä¢ Facebook ‡§î‡§∞ Instagram ‡§™‡§∞ ‡§ï‡•ç‡§∞‡•â‡§∏-‡§™‡•ã‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç`,\n    'bn': `\\n\\nüìà **‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ï‡¶∞‡ßç‡¶Æ ‡¶™‡¶∞‡¶ø‡¶ï‡¶≤‡ßç‡¶™‡¶®‡¶æ:**\\n‚Ä¢ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶§‡ßç‡¶§‡¶Æ ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®: ${bestPostingTime}\\n‚Ä¢ 8-12‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶∏‡¶ô‡ßç‡¶ó‡¶ø‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®\\n‚Ä¢ 2 ‡¶ò‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Æ‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶®`\n  };\n  \n  return content + (enhancements[language as keyof typeof enhancements] || enhancements['en']);\n}\n\nfunction generateFallbackResponse(language: string, message: string): AIResponse {\n  const fallbacks = {\n    'en': {\n      content: cleanMarkdown(\"I'm experiencing technical difficulties. I can still help with digital marketing, pricing strategies, or social media tips for your craft business. Try asking about Instagram marketing or pricing advice.\"),\n      suggestions: [\n        \"Ask about Instagram marketing strategies\",\n        \"Need help with pricing your products?\",\n        \"Want tips for better product photography?\",\n        \"How to create engaging social media content?\"\n      ]\n    },\n    'hi': {\n      content: cleanMarkdown(\"‡§Æ‡•Å‡§ù‡•á ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó, ‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£ ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•á ‡§∂‡§ø‡§≤‡•ç‡§™ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ã‡§∂‡§≤ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§ü‡§ø‡§™‡•ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§\"),\n      suggestions: [\n        \"Instagram ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç\",\n        \"‡§Ö‡§™‡§®‡•á ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§ ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è?\",\n        \"‡§¨‡•á‡§π‡§§‡§∞ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§´‡•ã‡§ü‡•ã‡§ó‡•ç‡§∞‡§æ‡§´‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ü‡§ø‡§™‡•ç‡§∏ ‡§ö‡§æ‡§π‡§ø‡§è?\",\n        \"‡§Ü‡§ï‡§∞‡•ç‡§∑‡§ï ‡§∏‡•ã‡§∂‡§≤ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§ï‡•à‡§∏‡•á ‡§¨‡§®‡§æ‡§è‡§Ç?\"\n      ]\n    }\n  };\n  \n  const fallback = fallbacks[language as keyof typeof fallbacks] || fallbacks['en'];\n  \n  return {\n    content: fallback.content,\n    suggestions: fallback.suggestions,\n    actions: [\n      {\n        type: 'marketing_tips',\n        title: 'Marketing Help',\n        description: 'Get marketing advice despite technical issues',\n        icon: 'üì±',\n        priority: 'high'\n      }\n    ],\n    language\n  };\n}\n\n// Health check with enhanced diagnostics\nexport const handleAIHealth: RequestHandler = async (req, res) => {\n  try {\n    const healthCheck = {\n      vertexAI: false,\n      vision: false,\n      imagen: false,\n      timestamp: new Date().toISOString()\n    };\n\n    // Test Vertex AI\n    try {\n      const { model: aiModel } = await initializeVertexAI();\n      const testResult = await aiModel.generateContent('Test connection');\n      const response = await testResult.response;\n      healthCheck.vertexAI = !!extractTextFromResponse(response);\n    } catch (error) {\n      console.error('Vertex AI health check failed:', error);\n    }\n\n    // Test Vision AI\n    try {\n      await initializeVisionAI();\n      healthCheck.vision = true;\n    } catch (error) {\n      console.error('Vision AI health check failed:', error);\n    }\n\n    // Test Imagen\n    try {\n      await initializeImagenAI();\n      healthCheck.imagen = true;\n    } catch (error) {\n      console.error('Imagen AI health check failed:', error);\n    }\n\n    const overallHealth = healthCheck.vertexAI; // Core service must work\n    \n    res.status(overallHealth ? 200 : 503).json({\n      status: overallHealth ? 'healthy' : 'degraded',\n      services: healthCheck,\n      model: 'gemini-2.0-flash-exp',\n      features: {\n        chat: healthCheck.vertexAI,\n        imageAnalysis: healthCheck.vision,\n        imageGeneration: healthCheck.imagen\n      }\n    });\n\n  } catch (error) {\n    res.status(503).json({\n      status: 'unhealthy',\n      error: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    });\n  }\n};","import type { RequestHandler } from \"express\";\n\n// Generate an image using Google Imagen (data URL response)\nasync function generateWithImagen(prompt: string): Promise<string | null> {\n  try {\n    const projectId = process.env.GOOGLE_CLOUD_PROJECT_ID;\n    const location = process.env.GOOGLE_CLOUD_LOCATION || 'us-central1';\n    if (!projectId) throw new Error('GOOGLE_CLOUD_PROJECT_ID not configured');\n\n    const { exec } = await import('child_process');\n    const { promisify } = await import('util');\n    const execAsync = promisify(exec);\n    const { stdout: token } = await execAsync('gcloud auth print-access-token');\n    const accessToken = token.trim();\n\n    const requestBody = {\n      instances: [{ prompt }],\n      parameters: {\n        aspectRatio: \"1:1\",\n        sampleCount: 1,\n        enhancePrompt: true,\n        addWatermark: false,\n        safetySetting: \"block_few\"\n      }\n    };\n\n    const apiUrl = `https://${location}-aiplatform.googleapis.com/v1/projects/${projectId}/locations/${location}/publishers/google/models/imagen-3.0-generate-001:predict`;\n\n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${accessToken}`\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Imagen API error:', errorText);\n      return null;\n    }\n\n    const result = await response.json();\n    const b64 = result?.predictions?.[0]?.bytesBase64Encoded;\n    return b64 ? `data:image/png;base64,${b64}` : null;\n  } catch (err) {\n    console.error('Imagen generation failed:', err);\n    return null;\n  }\n}\n\nexport const handleImageGenerate: RequestHandler = async (req, res) => {\n  try {\n    const { prompt } = req.body as { prompt?: string };\n    if (!prompt || prompt.trim().length < 3) return res.status(400).json({ error: 'Prompt is required' });\n\n    const imageDataUrl = await generateWithImagen(prompt.trim());\n    if (!imageDataUrl) return res.status(503).json({ error: 'Image generation failed' });\n\n    res.json({ imageUrl: imageDataUrl });\n  } catch (err) {\n    res.status(500).json({ error: 'Internal error' });\n  }\n};\n\n// Very basic enhancement stub: echoes back the uploaded image (future: call GCP editor/enhancer)\nexport const handleImageEnhance: RequestHandler = async (req, res) => {\n  try {\n    // Expect base64 data URL and enhancement settings\n    const { imageDataUrl, settings } = req.body as {\n      imageDataUrl?: string;\n      settings?: {\n        brightness?: number; // 0.0 - 2.0 (1 = no change)\n        saturation?: number; // 0.0 - 2.0 (1 = no change)\n        hue?: number;        // -180 - 180 degrees\n        blur?: number;       // 0 - 10 sigma\n        sharpen?: number;    // 0 - 3 intensity\n      };\n    };\n\n    if (!imageDataUrl?.startsWith('data:image')) {\n      return res.status(400).json({ error: 'imageDataUrl (data URL) required' });\n    }\n\n    const defaultSettings = { brightness: 1, saturation: 1, hue: 0, blur: 0, sharpen: 0 };\n    const s = { ...defaultSettings, ...(settings || {}) };\n\n    // Convert data URL to Buffer\n    const commaIdx = imageDataUrl.indexOf(',');\n    const b64 = imageDataUrl.slice(commaIdx + 1);\n    const inputBuffer = Buffer.from(b64, 'base64');\n\n    const sharp = (await import('sharp')).default;\n    let pipeline = sharp(inputBuffer);\n\n    // Apply modulate for brightness, saturation, hue\n    if (s.brightness !== 1 || s.saturation !== 1 || s.hue !== 0) {\n      pipeline = pipeline.modulate({\n        brightness: Math.max(0, s.brightness ?? 1),\n        saturation: Math.max(0, s.saturation ?? 1),\n        hue: Math.max(-180, Math.min(180, s.hue ?? 0))\n      });\n    }\n\n    // Blur\n    if ((s.blur ?? 0) > 0) {\n      pipeline = pipeline.blur(Math.min(10, Math.max(0.3, s.blur!)));\n    }\n\n    // Sharpen\n    if ((s.sharpen ?? 0) > 0) {\n      // Sharp sharpen accepts sigma; use value mapping 0-3 -> 0.1-2\n      const sigma = Math.min(2, Math.max(0.1, (s.sharpen! / 3) * 2));\n      pipeline = pipeline.sharpen(sigma);\n    }\n\n    const output = await pipeline.png().toBuffer();\n    const outDataUrl = `data:image/png;base64,${output.toString('base64')}`;\n    res.json({ imageUrl: outDataUrl });\n  } catch (e) {\n    console.error('Enhance error:', e);\n    res.status(500).json({ error: 'Internal error' });\n  }\n};\n\n// Background swap using Imagen capability model with automatic background mask\nasync function bgSwapWithImagen(base64PngOrJpg: string, prompt: string, dilation = 0.03, sampleCount = 1): Promise<string[]> {\n  const projectId = process.env.GOOGLE_CLOUD_PROJECT_ID;\n  const location = process.env.GOOGLE_CLOUD_LOCATION || 'us-central1';\n  if (!projectId) throw new Error('GOOGLE_CLOUD_PROJECT_ID not configured');\n\n  const { exec } = await import('child_process');\n  const { promisify } = await import('util');\n  const execAsync = promisify(exec);\n  const { stdout: token } = await execAsync('gcloud auth print-access-token');\n  const accessToken = token.trim();\n\n  const instances = [\n    {\n      prompt,\n      referenceImages: [\n        {\n          referenceType: 'REFERENCE_TYPE_RAW',\n          referenceId: 1,\n          referenceImage: { bytesBase64Encoded: base64PngOrJpg }\n        },\n        {\n          referenceType: 'REFERENCE_TYPE_MASK',\n          referenceId: 2,\n          maskImageConfig: { maskMode: 'MASK_MODE_BACKGROUND', dilation }\n        }\n      ]\n    }\n  ];\n\n  const parameters = {\n    editConfig: { baseSteps: 75 },\n    editMode: 'EDIT_MODE_BGSWAP',\n    sampleCount\n  };\n\n  const apiUrl = `https://${location}-aiplatform.googleapis.com/v1/projects/${projectId}/locations/${location}/publishers/google/models/imagen-3.0-capability-001:predict`;\n  const response = await fetch(apiUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${accessToken}`\n    },\n    body: JSON.stringify({ instances, parameters })\n  });\n\n  if (!response.ok) {\n    const err = await response.text();\n    throw new Error(`Imagen capability error: ${err}`);\n  }\n\n  const json = await response.json();\n  const preds = json?.predictions || [];\n  const images: string[] = [];\n  for (const p of preds) {\n    const b64 = p?.bytesBase64Encoded;\n    if (b64) images.push(`data:image/png;base64,${b64}`);\n  }\n  return images;\n}\n\nexport const handleImageBgSwap: RequestHandler = async (req, res) => {\n  try {\n    const { imageDataUrl, variant, customPrompt } = req.body as { imageDataUrl?: string; variant?: string; customPrompt?: string };\n    if (!imageDataUrl?.startsWith('data:image')) return res.status(400).json({ error: 'imageDataUrl (data URL) required' });\n\n    // Extract base64\n    const commaIdx = imageDataUrl.indexOf(',');\n    const b64 = imageDataUrl.slice(commaIdx + 1);\n\n    // Preset prompts (extendable)\n    const presets: Record<string, string> = {\n      standard: 'Place the product on a clean white studio background with soft ambient lighting and natural shadows, professional e-commerce style',\n      premium: 'Place the product on a light wooden shelf with soft diffused studio lighting, gentle vignette, natural shadows, premium catalog look',\n      festive: 'Place the product on a tasteful festive background with warm tones and subtle celebratory bokeh lights, still life studio lighting, minimal distractions',\n      'festive-diwali': 'Place the product on a tasteful Diwali themed background with warm golden tones, subtle diyas/bokeh lights, traditional festive ambiance, clean composition, studio lighting, minimal distractions',\n      'festive-holi': 'Place the product on a colorful Holi themed background with soft pastel color powder bokeh, playful yet elegant, bright natural lighting, minimal distractions, keep product clean and uncolored',\n      'festive-christmas': 'Place the product on a cozy Christmas themed background with soft fairy lights bokeh, pine/wood accents, gentle snow-like texture, warm ambient lighting, minimal distractions'\n    };\n    const prompt = (customPrompt && customPrompt.trim().length > 5)\n      ? customPrompt.trim()\n      : (presets[variant || 'standard'] || presets.standard);\n\n    const images = await bgSwapWithImagen(b64, prompt, 0.03, 1);\n    if (!images.length) return res.status(503).json({ error: 'No images returned' });\n    res.json({ images });\n  } catch (e) {\n    console.error('BG swap error:', e);\n    res.status(500).json({ error: 'Internal error' });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { VertexAI } from \"@google-cloud/vertexai\";\nimport path from 'path';\nimport fs from 'fs';\nimport { promisify } from 'util';\n\nconst writeFile = promisify(fs.writeFile);\nconst unlink = promisify(fs.unlink);\n\n// Lazy initialization of VertexAI client\nlet vertexAI: VertexAI | null = null;\n\nconst initializeVertexAI = async () => {\n  if (!vertexAI) {\n    const { VertexAI } = await import(\"@google-cloud/vertexai\");\n    vertexAI = new VertexAI({\n      project: process.env.GOOGLE_CLOUD_PROJECT_ID,\n      location: process.env.GOOGLE_CLOUD_LOCATION || \"us-central1\",\n    });\n  }\n  return vertexAI;\n};\n\n// Function to create real video using Veo 3 API\nasync function createRealVideoWithVeo3(prompt: string, settings: any): Promise<{ videoPath: string, thumbnailPath: string, operationId: string }> {\n  try {\n    console.log('üé¨ Starting Veo 3 video generation...');\n    \n    // Create temporary directory for video generation\n    const tempDir = path.join(process.cwd(), 'temp');\n    if (!fs.existsSync(tempDir)) {\n      fs.mkdirSync(tempDir, { recursive: true });\n    }\n    \n    const videoId = Date.now().toString();\n    const videoPath = path.join(tempDir, `video-${videoId}.mp4`);\n    const thumbnailPath = path.join(tempDir, `thumb-${videoId}.png`);\n    \n    // Initialize VertexAI for prompt enhancement\n    const ai = await initializeVertexAI();\n    \n    // Enhanced prompt for Veo 3\n    const enhancedPrompt = await enhancePromptForVeo3(prompt, ai);\n    console.log('üé¨ Enhanced prompt:', enhancedPrompt);\n    \n    // Call Veo 3 API to generate video\n    const veo3Response = await callVeo3API(enhancedPrompt, settings);\n    \n    if (veo3Response && veo3Response.operationId) {\n      console.log('‚úÖ Veo 3 operation started:', veo3Response.operationId);\n      \n      // Wait for the operation to complete and get the video\n      const videoData = await waitForCompletion(veo3Response.operationId);\n      \n      if (videoData) {\n        // Save the video file\n        await writeFile(videoPath, videoData);\n        \n        // Generate thumbnail\n        const thumbnailData = await generateThumbnail();\n        await writeFile(thumbnailPath, thumbnailData);\n        \n        console.log('‚úÖ Video generated successfully');\n        return { videoPath, thumbnailPath, operationId: veo3Response.operationId };\n      } else {\n        throw new Error('No video data received');\n      }\n    } else {\n      throw new Error('No operation ID received');\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Error creating video:', error);\n    throw error;\n  }\n}\n\n// Function to enhance prompt for Veo 3\nasync function enhancePromptForVeo3(prompt: string, ai: VertexAI): Promise<string> {\n  try {\n    const model = ai.preview.getGenerativeModel({ model: \"gemini-2.0-flash-exp\" });\n    \n    const enhancementPrompt = `\n      You are a professional video script writer for Veo 3 video generation.\n      \n      Original story: \"${prompt}\"\n      \n      Please enhance this into a detailed, cinematic video prompt for Veo 3 that will create a beautiful, engaging video.\n      \n      Requirements:\n      - Make it descriptive and visual\n      - Include camera movements, lighting, and atmosphere\n      - Focus on the craft/artisan aspect\n      - Keep it under 100 words\n      - Make it suitable for video generation\n      - Use cinematic language like \"Open on\", \"The camera slowly pans\", \"Scene transitions to\", \"A montage follows\", \"The video culminates in\", \"Final shot\"\n      \n      Return only the enhanced prompt, nothing else.\n    `;\n    \n    const result = await model.generateContent(enhancementPrompt);\n    const response = await result.response;\n    const enhancedPrompt = response.candidates?.[0]?.content?.parts?.[0]?.text || 'Enhanced prompt for video generation';\n    \n    return enhancedPrompt;\n    \n  } catch (error) {\n    console.warn('‚ö†Ô∏è Could not enhance prompt, using original:', error);\n    return prompt;\n  }\n}\n\n// Function to call Veo 3 API\nasync function callVeo3API(prompt: string, settings: any): Promise<any> {\n  try {\n    console.log('üé¨ Calling Veo 3 API...');\n    \n    const projectId = process.env.GOOGLE_CLOUD_PROJECT_ID;\n    const location = \"us-central1\"; // Just use us-central1 as requested\n    const modelId = \"veo-3.0-generate-001\";\n    \n    if (!projectId) {\n      throw new Error('GOOGLE_CLOUD_PROJECT_ID not set');\n    }\n    \n    // Prepare the request payload\n    const requestPayload = {\n      instances: [{ prompt: prompt }],\n      parameters: {\n        aspectRatio: \"16:9\",\n        sampleCount: 1,\n        durationSeconds: (settings?.duration || 8).toString(),\n        personGeneration: \"allow_all\",\n        addWatermark: true,\n        includeRaiReason: true,\n        generateAudio: true,\n        resolution: \"720p\"\n      }\n    };\n    \n    // Get access token\n    const { exec } = await import('child_process');\n    const { promisify } = await import('util');\n    const execAsync = promisify(exec);\n    \n    const { stdout: accessToken } = await execAsync('gcloud auth print-access-token');\n    const token = accessToken.trim();\n    \n    // Make the API call\n    const apiUrl = `https://us-central1-aiplatform.googleapis.com/v1/projects/${projectId}/locations/${location}/publishers/google/models/${modelId}:predictLongRunning`;\n    \n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(requestPayload)\n    });\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Veo 3 API failed: ${response.status} - ${errorText}`);\n    }\n    \n    const responseData = await response.json();\n    \n    if (responseData.name) {\n      return {\n        operationId: responseData.name,\n        status: 'started'\n      };\n    } else {\n      throw new Error('No operation ID received');\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Veo 3 API call failed:', error);\n    throw error;\n  }\n}\n\n// Function to wait for operation completion\nasync function waitForCompletion(operationId: string): Promise<Buffer | null> {\n  try {\n    console.log('üé¨ Waiting for completion...');\n    \n    const projectId = process.env.GOOGLE_CLOUD_PROJECT_ID;\n    const location = \"us-central1\";\n    const modelId = \"veo-3.0-generate-001\";\n    const apiEndpoint = `${location}-aiplatform.googleapis.com`;\n    \n    // Get access token\n    const { exec } = await import('child_process');\n    const { promisify } = await import('util');\n    const execAsync = promisify(exec);\n    \n    const { stdout: accessToken } = await execAsync('gcloud auth print-access-token');\n    const token = accessToken.trim();\n    \n    // Since Google doesn't provide a standard operations endpoint for Veo 3,\n    // we'll wait a reasonable time and then try fetchPredictOperation directly\n    console.log('‚è≥ Waiting 2 minutes for Veo 3 to process...');\n    await new Promise(resolve => setTimeout(resolve, 120000)); // Wait 2 minutes\n    \n    let attempts = 0;\n    const maxAttempts = 30; // Try up to 30 times (5 minutes total)\n    \n    while (attempts < maxAttempts) {\n      attempts++;\n      console.log(`üé¨ Attempt ${attempts}/${maxAttempts}: Trying fetchPredictOperation...`);\n      \n      try {\n        // Use the EXACT endpoint from your curl example\n        const fetchUrl = `https://${apiEndpoint}/v1/projects/${projectId}/locations/${location}/publishers/google/models/${modelId}:fetchPredictOperation`;\n        console.log('üé¨ Calling fetchPredictOperation at:', fetchUrl);\n        \n        // Use the EXACT payload structure from your curl example\n        const fetchPayload = {\n          operationName: operationId\n        };\n        console.log('üé¨ Fetch payload:', JSON.stringify(fetchPayload, null, 2));\n        \n        const fetchResponse = await fetch(fetchUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify(fetchPayload)\n        });\n        \n        if (fetchResponse.ok) {\n          const fetchData = await fetchResponse.json();\n          console.log('üé¨ fetchPredictOperation response:', JSON.stringify(fetchData, null, 2));\n          \n          // Check if we have video data\n          const videoData = await extractVideo(fetchData, token);\n          if (videoData) {\n            console.log('‚úÖ Video data retrieved successfully!');\n            return videoData;\n          } else {\n            console.log('‚è≥ No video data yet, operation might still be running...');\n          }\n        } else {\n          const errorText = await fetchResponse.text();\n          console.log(`‚ùå fetchPredictOperation failed (attempt ${attempts}):`, fetchResponse.status, errorText);\n          \n          // If it's a 400 error, the operation might still be running\n          if (fetchResponse.status === 400) {\n            console.log('‚è≥ Operation still running, waiting...');\n          }\n        }\n      } catch (error) {\n        console.log(`‚ùå fetchPredictOperation error (attempt ${attempts}):`, error);\n      }\n      \n      // Wait 10 seconds before next attempt\n      await new Promise(resolve => setTimeout(resolve, 10000));\n    }\n    \n    throw new Error('Video generation timed out after 7 minutes total');\n    \n  } catch (error) {\n    console.error('‚ùå Error waiting for completion:', error);\n    throw error;\n  }\n}\n\n// Function to extract video from response\nasync function extractVideo(response: any, token: string): Promise<Buffer | null> {\n  try {\n    console.log('üé¨ Extracting video from response...');\n    console.log('üé¨ Response structure:', Object.keys(response));\n    \n    // Check for video data in various possible formats\n    let videoData = null;\n    \n    // Format 1: Direct video data in response\n    if (response.video) {\n      videoData = response.video;\n      console.log('üé¨ Found video data directly in response');\n    }\n    // Format 2: Video data in predictions (Veo 3 format)\n    else if (response.predictions && response.predictions[0]) {\n      const prediction = response.predictions[0];\n      console.log('üé¨ Prediction structure:', Object.keys(prediction));\n      \n      // Veo 3 specific: look for video content in various fields\n      if (prediction.video) {\n        videoData = prediction.video;\n        console.log('üé¨ Found video in predictions.video');\n      } else if (prediction.videoData) {\n        videoData = prediction.videoData;\n        console.log('üé¨ Found video in predictions.videoData');\n      } else if (prediction.content && prediction.content.video) {\n        videoData = prediction.content.video;\n        console.log('üé¨ Found video in predictions.content.video');\n      } else if (prediction.bytes) {\n        // Veo 3 might return video as bytes\n        videoData = prediction.bytes;\n        console.log('üé¨ Found video in predictions.bytes');\n      } else if (prediction.data) {\n        // Veo 3 might return video as data\n        videoData = prediction.data;\n        console.log('üé¨ Found video in predictions.data');\n      } else if (prediction.mimeType === 'video/mp4') {\n        // If we have mimeType but no video data, the video might be in a different field\n        console.log('üé¨ Found video/mp4 mimeType, searching for video content...');\n        \n        // Look for any field that might contain video data\n        for (const [key, value] of Object.entries(prediction)) {\n          if (key !== 'mimeType' && typeof value === 'string' && value.length > 100) {\n            console.log(`üé¨ Found potential video data in field '${key}', length: ${value.length}`);\n            videoData = value;\n            break;\n          }\n        }\n      }\n    }\n    // Format 3: Check if response itself contains base64 data\n    else if (typeof response === 'string' && response.length > 100) {\n      // This might be base64 video data directly\n      console.log('üé¨ Response appears to be base64 data, length:', response.length);\n      try {\n        // Try to decode as base64\n        const buffer = Buffer.from(response, 'base64');\n        if (buffer.length > 1000) { // Reasonable video size\n          console.log('‚úÖ Successfully decoded base64 video data, size:', buffer.length);\n          return buffer;\n        }\n      } catch (decodeError) {\n        console.log('‚ö†Ô∏è Failed to decode as base64:', decodeError);\n      }\n    }\n    \n    if (videoData) {\n      console.log('üé¨ Video data found, type:', typeof videoData);\n      \n      // If it's a URL, download it\n      if (typeof videoData === 'string' && videoData.startsWith('http')) {\n        console.log('üé¨ Downloading video from URL:', videoData);\n        \n        const videoResponse = await fetch(videoData, {\n          headers: { 'Authorization': `Bearer ${token}` }\n        });\n        \n        if (!videoResponse.ok) {\n          throw new Error(`Failed to download video: ${videoResponse.status}`);\n        }\n        \n        const videoBuffer = Buffer.from(await videoResponse.arrayBuffer());\n        console.log('‚úÖ Video downloaded successfully, size:', videoBuffer.length);\n        return videoBuffer;\n      }\n      // If it's base64 data, decode it\n      else if (typeof videoData === 'string' && videoData.length > 100) {\n        console.log('üé¨ Decoding base64 video data...');\n        \n        try {\n          const buffer = Buffer.from(videoData, 'base64');\n          console.log('‚úÖ Base64 video decoded successfully, size:', buffer.length);\n          return buffer;\n        } catch (decodeError) {\n          console.error('‚ùå Failed to decode base64 video:', decodeError);\n          return null;\n        }\n      }\n      // If it's already a buffer\n      else if (Buffer.isBuffer(videoData)) {\n        console.log('‚úÖ Video data is already a buffer, size:', videoData.length);\n        return videoData;\n      }\n    }\n    \n    // If we get here, try to extract any base64-looking data from the response\n    console.log('üé¨ No direct video data found, searching for base64 content...');\n    \n    const responseStr = JSON.stringify(response);\n    const base64Pattern = /[A-Za-z0-9+/]{100,}={0,2}/g;\n    const potentialBase64 = responseStr.match(base64Pattern);\n    \n    if (potentialBase64 && potentialBase64.length > 0) {\n      console.log('üé¨ Found potential base64 data, length:', potentialBase64[0].length);\n      \n      try {\n        const buffer = Buffer.from(potentialBase64[0], 'base64');\n        if (buffer.length > 1000) { // Reasonable video size\n          console.log('‚úÖ Successfully decoded potential base64 video, size:', buffer.length);\n          return buffer;\n        }\n      } catch (decodeError) {\n        console.log('‚ö†Ô∏è Failed to decode potential base64:', decodeError);\n      }\n    }\n    \n    console.warn('‚ö†Ô∏è No video data found in response');\n    console.log('üé¨ Full response for debugging:', JSON.stringify(response, null, 2));\n    \n    // Special case: if we have mimeType but no video, the video might be in a different response format\n    if (response.predictions && response.predictions[0] && response.predictions[0].mimeType === 'video/mp4') {\n      console.log('üé¨ Detected video/mp4 mimeType but no video data - this suggests the video is ready but in a different format');\n      console.log('üé¨ Trying to find video in alternative response fields...');\n      \n      // Look for video in the entire response structure\n      const searchForVideo = (obj: any, path: string = ''): any => {\n        for (const [key, value] of Object.entries(obj)) {\n          const currentPath = path ? `${path}.${key}` : key;\n          \n          if (typeof value === 'string' && value.length > 1000 && !value.includes('{') && !value.includes('[')) {\n            console.log(`üé¨ Found potential video data at ${currentPath}, length: ${value.length}`);\n            return value;\n          } else if (typeof value === 'object' && value !== null) {\n            const result = searchForVideo(value, currentPath);\n            if (result) return result;\n          }\n        }\n        return null;\n      };\n      \n      const foundVideo = searchForVideo(response);\n      if (foundVideo) {\n        console.log('üé¨ Found video data in alternative location, attempting to decode...');\n        try {\n          const buffer = Buffer.from(foundVideo, 'base64');\n          if (buffer.length > 1000) {\n            console.log('‚úÖ Successfully decoded alternative video data, size:', buffer.length);\n            return buffer;\n          }\n        } catch (decodeError) {\n          console.log('‚ö†Ô∏è Failed to decode alternative video data:', decodeError);\n        }\n      }\n    }\n    \n    return null;\n    \n  } catch (error) {\n    console.error('‚ùå Error extracting video:', error);\n    return null;\n  }\n}\n\n// Function to generate thumbnail\nasync function generateThumbnail(): Promise<Buffer> {\n  const thumbnailContent = `\n    <svg width=\"320\" height=\"240\" xmlns=\"http://www.w3.org/2000/svg\">\n      <rect width=\"320\" height=\"240\" fill=\"#667eea\"/>\n      <text x=\"160\" y=\"120\" font-family=\"Arial\" font-size=\"16\" text-anchor=\"middle\" fill=\"white\">Veo 3 Video</text>\n    </svg>\n  `;\n  \n  return Buffer.from(thumbnailContent, 'utf8');\n}\n\nexport const handleGenerateVideo: RequestHandler = async (req, res) => {\n  try {\n    const { prompt, language, settings } = req.body;\n\n    if (!prompt) {\n      return res.status(400).json({ error: \"Prompt is required\" });\n    }\n\n    console.log(\"üé¨ Veo 3 video generation request:\", { prompt, language, settings });\n\n    try {\n      // Create video using Veo 3\n      const { videoPath, thumbnailPath, operationId } = await createRealVideoWithVeo3(prompt, settings);\n      \n      // Read files\n      const videoBuffer = fs.readFileSync(videoPath);\n      const thumbnailBuffer = fs.readFileSync(thumbnailPath);\n      \n      const videoResponse = {\n        videoUrl: `data:video/mp4;base64,${videoBuffer.toString(\"base64\")}`,\n        thumbnailUrl: `data:image/svg+xml;base64,${thumbnailBuffer.toString(\"base64\")}`,\n        duration: settings?.duration || 15,\n        status: \"completed\",\n        message: \"Veo 3 video generated successfully!\",\n        operationId: operationId\n      };\n\n      console.log(\"‚úÖ Video generated successfully\");\n      \n      // Clean up\n      try {\n        await unlink(videoPath);\n        await unlink(thumbnailPath);\n      } catch (cleanupError) {\n        console.warn(\"‚ö†Ô∏è Could not clean up files:\", cleanupError);\n      }\n      \n      res.json(videoResponse);\n      \n    } catch (videoError) {\n      console.error(\"‚ùå Error creating video:\", videoError);\n      \n      // Simple fallback\n      const fallbackResponse = {\n        videoUrl: `data:text/html;base64,${Buffer.from('<html><body><h1>Video generation failed</h1></body></html>').toString(\"base64\")}`,\n        thumbnailUrl: `data:text/html;base64,${Buffer.from('<html><body><h1>Video generation failed</h1></body></html>').toString(\"base64\")}`,\n        duration: settings?.duration || 15,\n        status: \"failed\",\n        message: \"Video generation failed, showing fallback\"\n      };\n      \n      res.json(fallbackResponse);\n    }\n\n  } catch (error) {\n    console.error(\"‚ùå Video generation error:\", error);\n    res.status(500).json({ \n      error: \"Failed to generate video\",\n      details: error instanceof Error ? error.message : \"Unknown error\"\n    });\n  }\n};\n\nexport const handleVideoStatus: RequestHandler = async (req, res) => {\n  try {\n    const { videoId } = req.params;\n    \n    res.json({\n      videoId,\n      status: \"processing\",\n      progress: 75,\n      estimatedTimeRemaining: 120,\n      api: \"Veo 3\",\n      message: \"Video is being generated by Veo 3 AI\"\n    });\n\n  } catch (error) {\n    console.error(\"‚ùå Video status check error:\", error);\n    res.status(500).json({ \n      error: \"Failed to check video status\",\n      details: error instanceof Error ? error.message : \"Unknown error\"\n    });\n  }\n};\n\nexport const handleVideoDownload: RequestHandler = async (req, res) => {\n  try {\n    const { videoId } = req.params;\n    \n    res.json({\n      videoId,\n      downloadUrl: `/api/videos/${videoId}/stream`,\n      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000),\n      api: \"Veo 3\",\n      message: \"Video download ready when generation completes\"\n    });\n\n  } catch (error) {\n    console.error(\"‚ùå Video download error:\", error);\n    res.status(500).json({ \n      error: \"Failed to prepare video download\",\n      details: error instanceof Error ? error.message : \"Unknown error\"\n    });\n  }\n};\n\n// Debug endpoint to test Veo 3 API response structure\nexport const handleDebugVeo3: RequestHandler = async (req, res) => {\n  try {\n    console.log('üîç Debug: Testing Veo 3 API response structure...');\n    \n    const projectId = process.env.GOOGLE_CLOUD_PROJECT_ID;\n    const location = \"us-central1\";\n    const modelId = \"veo-3.0-generate-001\";\n    const apiEndpoint = `${location}-aiplatform.googleapis.com`;\n    \n    if (!projectId) {\n      return res.status(400).json({ error: \"GOOGLE_CLOUD_PROJECT_ID not set\" });\n    }\n    \n    // Get access token\n    const { exec } = await import('child_process');\n    const { promisify } = await import('util');\n    const execAsync = promisify(exec);\n    \n    const { stdout: accessToken } = await execAsync('gcloud auth print-access-token');\n    const token = accessToken.trim();\n    \n    // Test with a simple prompt\n    const testPayload = {\n      instances: [{ prompt: \"A simple test video\" }],\n      parameters: {\n        aspectRatio: \"16:9\",\n        sampleCount: 1,\n        durationSeconds: \"5\",\n        personGeneration: \"allow_all\",\n        addWatermark: true,\n        includeRaiReason: true,\n        generateAudio: true,\n        resolution: \"720p\"\n      }\n    };\n    \n    console.log('üîç Debug: Calling Veo 3 API...');\n    \n    // Make the API call\n    const apiUrl = `https://${apiEndpoint}/v1/projects/${projectId}/locations/${location}/publishers/google/models/${modelId}:predictLongRunning`;\n    \n    const response = await fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify(testPayload)\n    });\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      return res.status(500).json({ \n        error: `Veo 3 API failed: ${response.status} - ${errorText}` \n      });\n    }\n    \n    const responseData = await response.json();\n    console.log('üîç Debug: Veo 3 API response:', JSON.stringify(responseData, null, 2));\n    \n    if (responseData.name) {\n      const operationId = responseData.name;\n      console.log('üîç Debug: Operation ID:', operationId);\n      \n      // Wait a bit and then try fetchPredictOperation\n      console.log('üîç Debug: Waiting 30 seconds before testing fetchPredictOperation...');\n      await new Promise(resolve => setTimeout(resolve, 30000));\n      \n      const fetchUrl = `https://${apiEndpoint}/v1/projects/${projectId}/locations/${location}/publishers/google/models/${modelId}:fetchPredictOperation`;\n      const fetchPayload = { operationName: operationId };\n      \n      console.log('üîç Debug: Testing fetchPredictOperation...');\n      \n      const fetchResponse = await fetch(fetchUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(fetchPayload)\n      });\n      \n      if (fetchResponse.ok) {\n        const fetchData = await fetchResponse.json();\n        console.log('üîç Debug: fetchPredictOperation response:', JSON.stringify(fetchData, null, 2));\n        \n        // Test our video extraction\n        const videoData = await extractVideo(fetchData, token);\n        console.log('üîç Debug: Video extraction result:', videoData ? `Success! Size: ${videoData.length}` : 'Failed');\n        \n        res.json({\n          success: true,\n          operationId,\n          fetchResponse: fetchData,\n          videoExtracted: !!videoData,\n          videoSize: videoData ? videoData.length : 0\n        });\n      } else {\n        const errorText = await fetchResponse.text();\n        res.json({\n          success: false,\n          operationId,\n          fetchError: `${fetchResponse.status} - ${errorText}`\n        });\n      }\n    } else {\n      res.status(500).json({ error: \"No operation ID received\" });\n    }\n    \n  } catch (error) {\n    console.error(\"‚ùå Debug error:\", error);\n    res.status(500).json({ \n      error: \"Debug failed\",\n      details: error instanceof Error ? error.message : \"Unknown error\"\n    });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { Client } from \"@googlemaps/google-maps-services-js\";\n\ninterface LocationSearchRequest {\n  query: string;\n  location: {\n    lat: number;\n    lng: number;\n    city: string;\n  };\n  radius?: number; // in meters, default 50000 (50km)\n  type?: string; // e.g., 'wholesaler', 'supplier', 'market'\n}\n\ninterface PlaceResult {\n  name: string;\n  address: string;\n  distance: number; // in km\n  rating?: number;\n  phone?: string;\n  website?: string;\n  types: string[];\n  place_id: string;\n  opening_hours?: {\n    open_now: boolean;\n    weekday_text: string[];\n  };\n  photos?: string[];\n}\n\n// Initialize Google Maps client\nconst mapsClient = new Client({});\n\nexport const handleLocationSearch: RequestHandler = async (req, res) => {\n  try {\n    const { query, location, radius = 50000, type }: LocationSearchRequest = req.body;\n\n    if (!query || !location || !location.lat || !location.lng) {\n      return res.status(400).json({\n        error: 'Missing required fields: query, location (lat, lng)',\n        fallback: {\n          content: \"I need your location to find nearby businesses. Please enable location access or tell me your city name.\"\n        }\n      });\n    }\n\n    const apiKey = process.env.GOOGLE_MAPS_API_KEY;\n    if (!apiKey) {\n      console.error('Google Maps API key not found');\n      return res.status(500).json({\n        error: 'Google Maps API not configured',\n        fallback: {\n          content: \"Location services are temporarily unavailable. Please try again later or contact support.\"\n        }\n      });\n    }\n\n    // Search for places using Google Places API\n    const placesResults = await searchPlaces(query, location, radius, apiKey);\n    \n    // Get detailed information for each place\n    const detailedResults = await getPlaceDetails(placesResults, apiKey, location);\n    \n    // Use Gemini to generate intelligent response\n    const aiResponse = await generateAIResponse(query, location, detailedResults);\n\n    res.json({\n      content: aiResponse,\n      locationData: {\n        userLocation: location,\n        searchQuery: query,\n        resultsCount: detailedResults.length,\n        searchRadius: radius\n      },\n      rawResults: detailedResults\n    });\n\n  } catch (error) {\n    console.error('Location search error:', error);\n    \n    // Fallback response\n    const fallbackContent = `I'm having trouble searching for \"${req.body.query}\" in your area. Here are some general suggestions:\n\nüîç How to find local suppliers:\n- Check local business directories\n- Visit wholesale markets in your city\n- Join artisan groups on social media\n- Contact local trade associations\n- Ask other artisans for recommendations\n\nüìç Popular wholesale areas in India:\n- Delhi: Chandni Chowk, Karol Bagh\n- Mumbai: Crawford Market, Zaveri Bazaar\n- Bangalore: Commercial Street, Chickpet\n- Chennai: T. Nagar, Parry's Corner\n\nWould you like me to help you with specific search strategies for your craft?`;\n\n    res.json({\n      content: fallbackContent,\n      error: 'Location search temporarily unavailable'\n    });\n  }\n};\n\n// Search for places using Google Places API\nasync function searchPlaces(\n  query: string, \n  location: {lat: number, lng: number, city: string}, \n  radius: number,\n  apiKey: string\n): Promise<any[]> {\n  try {\n    // Determine search type based on query\n    const searchType = determineSearchType(query);\n    \n    const response = await mapsClient.placesNearby({\n      params: {\n        location: { lat: location.lat, lng: location.lng },\n        radius: radius,\n        keyword: query,\n        type: searchType,\n        key: apiKey,\n      },\n    });\n\n    return response.data.results || [];\n  } catch (error) {\n    console.error('Places API error:', error);\n    throw error;\n  }\n}\n\n// Get detailed information for each place\nasync function getPlaceDetails(places: any[], apiKey: string, userLocation: {lat: number, lng: number}): Promise<PlaceResult[]> {\n  const detailedResults: PlaceResult[] = [];\n  \n  for (const place of places.slice(0, 10)) { // Limit to 10 results\n    try {\n      const detailsResponse = await mapsClient.placeDetails({\n        params: {\n          place_id: place.place_id,\n          fields: ['name', 'formatted_address', 'rating', 'formatted_phone_number', 'website', 'types', 'opening_hours', 'photos'],\n          key: apiKey,\n        },\n      });\n\n      const details = detailsResponse.data.result;\n      \n      // Calculate distance using user's actual location\n      const distance = calculateDistance(\n        { lat: place.geometry.location.lat, lng: place.geometry.location.lng },\n        userLocation\n      );\n\n      detailedResults.push({\n        name: details.name || 'Unknown',\n        address: details.formatted_address || 'Address not available',\n        distance: distance,\n        rating: details.rating,\n        phone: details.formatted_phone_number,\n        website: details.website,\n        types: details.types || [],\n        place_id: place.place_id,\n        opening_hours: details.opening_hours,\n        photos: details.photos?.map((photo: any) => photo.photo_reference) || []\n      });\n    } catch (error) {\n      console.error(`Error getting details for place ${place.place_id}:`, error);\n      // Continue with other places\n    }\n  }\n\n  return detailedResults.sort((a, b) => a.distance - b.distance);\n}\n\n// Determine search type based on query keywords\nfunction determineSearchType(query: string): string {\n  const queryLower = query.toLowerCase();\n  \n  if (queryLower.includes('market') || queryLower.includes('fair') || queryLower.includes('bazaar')) {\n    return 'shopping_mall';\n  } else if (queryLower.includes('supplier') || queryLower.includes('wholesaler')) {\n    return 'store';\n  } else if (queryLower.includes('exhibition') || queryLower.includes('center')) {\n    return 'establishment';\n  } else {\n    return 'establishment';\n  }\n}\n\n// Calculate distance between two points using Haversine formula\nfunction calculateDistance(point1: {lat: number, lng: number}, point2: {lat: number, lng: number}): number {\n  const R = 6371; // Earth's radius in km\n  const dLat = (point2.lat - point1.lat) * Math.PI / 180;\n  const dLng = (point2.lng - point1.lng) * Math.PI / 180;\n  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(point1.lat * Math.PI / 180) * Math.cos(point2.lat * Math.PI / 180) *\n    Math.sin(dLng/2) * Math.sin(dLng/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  return R * c;\n}\n\n// Generate AI response using Gemini\nasync function generateAIResponse(\n  query: string, \n  location: {lat: number, lng: number, city: string}, \n  results: PlaceResult[]\n): Promise<string> {\n  try {\n    // Import Vertex AI\n    const { VertexAI } = await import('@google-cloud/vertexai');\n    \n    const vertexAI = new VertexAI({\n      project: process.env.GOOGLE_CLOUD_PROJECT_ID,\n      location: 'us-central1',\n    });\n\n    const model = vertexAI.getGenerativeModel({\n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 1000,\n        temperature: 0.7,\n        topP: 0.9,\n      },\n    });\n\n    // Prepare context for Gemini\n    const context = {\n      query,\n      city: location.city,\n      resultsCount: results.length,\n      places: results.map(place => ({\n        name: place.name,\n        address: place.address,\n        distance: place.distance,\n        rating: place.rating,\n        phone: place.phone,\n        types: place.types\n      }))\n    };\n\n    const prompt = `You are ArtisAI, an AI-powered marketplace assistant for Indian artisans. \n\nThe user searched for: \"${query}\" in ${location.city}\n\nFound ${results.length} places:\n${JSON.stringify(context.places, null, 2)}\n\nGenerate a helpful, conversational response that:\n1. Acknowledges the search and location\n2. Lists the top 5 most relevant places with key details\n3. Provides specific tips based on the query type (markets vs suppliers)\n4. Suggests next steps for the artisan\n5. Uses an encouraging, supportive tone\n6. Keeps response under 300 words\n7. Uses bullet points for easy reading\n\nRemember: You're helping artisans grow their business, so be practical and actionable.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n\n    return text;\n  } catch (error) {\n    console.error('Error generating AI response:', error);\n    \n    // Fallback to basic formatting\n    return formatBasicResponse(query, location, results);\n  }\n}\n\n// Basic response formatting as fallback\nfunction formatBasicResponse(\n  query: string, \n  location: {lat: number, lng: number, city: string}, \n  results: PlaceResult[]\n): string {\n  if (results.length === 0) {\n    return `I couldn't find any ${query} in ${location.city}. Here are some alternative suggestions:\n\nüîç Try these search strategies:\n- Expand your search radius\n- Use different keywords (e.g., \"suppliers\" instead of \"wholesalers\")\n- Check online directories and marketplaces\n- Join local artisan groups for recommendations\n\nWould you like me to help you with a different search or provide general guidance?`;\n  }\n\n  let response = `üìç Found ${results.length} ${query} near ${location.city}:\\n\\n`;\n\n  results.slice(0, 5).forEach((result, index) => {\n    response += `${index + 1}. ${result.name} (${result.distance.toFixed(1)} km away)\\n`;\n    response += `üìç ${result.address}\\n`;\n    if (result.rating) {\n      response += `‚≠ê ${result.rating}/5 rating\\n`;\n    }\n    if (result.phone) {\n      response += `üìû ${result.phone}\\n`;\n    }\n    response += `üè∑Ô∏è ${result.types.slice(0, 3).join(', ')}\\n\\n`;\n  });\n\n  // Add specific tips based on query type\n  const queryLower = query.toLowerCase();\n  if (queryLower.includes('market') || queryLower.includes('fair') || queryLower.includes('selling')) {\n    response += `üí° Tips for selling at these markets:\n- Contact organizers to check availability and booth fees\n- Ask about foot traffic and target audience\n- Inquire about setup requirements and timing\n- Check payment processing options (cash, card, UPI)\n\nWould you like me to help you prepare a vendor application or pricing strategy?`;\n  } else {\n    response += `üí° Tips for contacting suppliers:\n- Call during business hours (10 AM - 6 PM)\n- Ask about minimum order quantities\n- Inquire about bulk pricing and delivery\n- Check payment terms and credit options\n\nWould you like me to help you prepare questions to ask these suppliers?`;\n  }\n\n  return response;\n}\n\n// Generate location-specific insights for business nodes\nexport const generateLocationInsights: RequestHandler = async (req, res) => {\n  try {\n    const { location, coordinates, craftType, nodeTitle, nodeType } = req.body;\n\n    if (!location) {\n      return res.status(400).json({ error: 'Location is required' });\n    }\n\n    // Import Vertex AI for insights generation\n    const { VertexAI } = await import('@google-cloud/vertexai');\n    \n    const vertexAI = new VertexAI({\n      project: process.env.GOOGLE_CLOUD_PROJECT_ID,\n      location: 'us-central1',\n    });\n\n    const model = vertexAI.getGenerativeModel({\n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 1000,\n        temperature: 0.7,\n        topP: 0.9,\n      },\n    });\n\n    const prompt = `You are ArtisAI, an AI assistant for Indian artisans. Generate location-specific business insights and suggest relevant ArtisAI services.\n\nContext:\n- Location: ${location}\n- Coordinates: ${coordinates ? `${coordinates.lat}, ${coordinates.lng}` : 'Not available'}\n- Craft Type: ${craftType || 'handicrafts'}\n- Node Title: ${nodeTitle}\n- Node Type: ${nodeType}\n\nGenerate location-specific insights as bullet points:\n- Local market opportunities in ${location}\n- Regional suppliers and wholesalers\n- Local festivals and events for sales\n- Cultural context and traditions\n- Regional pricing strategies\n- Local government schemes and support\n- Location-specific marketing channels\n- Seasonal opportunities\n- Local competition insights\n- Transportation and logistics tips\n- Nearby business districts and commercial areas\n- Local customer preferences and buying patterns\n\nIMPORTANT: Include suggestions for ArtisAI services where relevant:\n- \"Use our AI Image Generator to create product photos for local market listings\"\n- \"Try our AI Marketing Assistant to create social media content for local festivals\"\n- \"Use our Business Plan Builder to create a detailed strategy for this location\"\n- \"Generate product descriptions with our AI to attract local customers\"\n- \"Create promotional videos with our AI Video Generator for local events\"\n- \"Use our Pricing Calculator to set competitive prices for this market\"\n\nCRITICAL FORMATTING RULES:\n- Use ONLY dash (-) for bullet points, NO asterisks (*) anywhere\n- NO markdown formatting like **bold** or *italic*\n- NO special characters except dashes for bullets\n- Each line should start with a dash and space: \"- Your content here\"\n- Do not use any other formatting symbols\n\nFormat as bullet points (-) with 6-8 specific, actionable insights for ${location}, including 2-3 ArtisAI service suggestions where relevant.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    \n    let text: string;\n    if (typeof response.text === 'function') {\n      text = response.text().trim();\n    } else if (response.candidates && response.candidates[0] && response.candidates[0].content) {\n      text = response.candidates[0].content.parts[0].text.trim();\n    } else {\n      throw new Error('Unexpected response structure from Gemini');\n    }\n\n    // Clean up any remaining markdown formatting\n    text = text\n      .replace(/\\*\\*([^*]+)\\*\\*/g, '$1') // Remove **bold**\n      .replace(/\\*([^*]+)\\*/g, '$1') // Remove *italic*\n      .replace(/^\\s*\\*\\s+/gm, '- ') // Replace * with - at start of lines\n      .replace(/^\\s*‚Ä¢\\s+/gm, '- ') // Replace ‚Ä¢ with - at start of lines\n      .replace(/\\n\\s*\\n/g, '\\n') // Remove extra blank lines\n      .trim();\n\n    res.json({ insights: text });\n  } catch (error) {\n    console.error('Error generating location insights:', error);\n    res.status(500).json({ error: 'Failed to generate location insights' });\n  }\n};\n\n// Reverse geocoding to get city name from coordinates\nexport const reverseGeocode: RequestHandler = async (req, res) => {\n  try {\n    const { lat, lng } = req.query;\n\n    if (!lat || !lng) {\n      return res.status(400).json({ error: 'Latitude and longitude are required' });\n    }\n\n    const client = new Client({});\n\n    const response = await client.reverseGeocode({\n      params: {\n        latlng: { lat: parseFloat(lat as string), lng: parseFloat(lng as string) },\n        key: process.env.GOOGLE_MAPS_API_KEY!,\n      },\n    });\n\n    const results = response.data.results;\n    if (results.length === 0) {\n      return res.json({ city: 'Unknown Location' });\n    }\n\n    // Find the most specific location (city level)\n    let city = 'Unknown Location';\n    for (const result of results) {\n      const addressComponents = result.address_components;\n      for (const component of addressComponents) {\n        if (component.types.includes('locality') || component.types.includes('administrative_area_level_2')) {\n          city = component.long_name;\n          break;\n        }\n      }\n      if (city !== 'Unknown Location') break;\n    }\n\n    res.json({ city });\n  } catch (error) {\n    console.error('Error in reverse geocoding:', error);\n    res.status(500).json({ error: 'Failed to get location information' });\n  }\n};","import { RequestHandler } from \"express\";\nimport { \n  Chart, \n  Node, \n  Edge, \n  AIExpansionRequest, \n  AIExpansionResponse,\n  ChartHistory \n} from \"@shared/business-flow\";\n\n// Interface for authenticated requests\ninterface AuthenticatedRequest extends Request {\n  params: {\n    userId: string;\n    [key: string]: string;\n  };\n}\n\n// Get all charts for a user\nexport const getCharts: RequestHandler = async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const userCharts = charts.filter(chart => chart.ownerId === userId);\n    res.json(userCharts);\n  } catch (error) {\n    console.error('Error fetching charts:', error);\n    res.status(500).json({ error: 'Failed to fetch charts' });\n  }\n};\n\n// Get a specific chart with nodes and edges\nexport const getChart: RequestHandler = async (req, res) => {\n  try {\n    const { chartId } = req.params;\n    const chart = charts.find(c => c.chartId === chartId);\n    \n    if (!chart) {\n      return res.status(404).json({ error: 'Chart not found' });\n    }\n\n    const chartNodes = nodes.filter(node => chart.nodes.includes(node.nodeId));\n    const chartEdges = edges.filter(edge => chart.edges.includes(edge.edgeId));\n\n    res.json({\n      chart,\n      nodes: chartNodes,\n      edges: chartEdges\n    });\n  } catch (error) {\n    console.error('Error fetching chart:', error);\n    res.status(500).json({ error: 'Failed to fetch chart' });\n  }\n};\n\n// Create a new chart\nexport const createChart: RequestHandler = async (req, res) => {\n  try {\n    const chartData: Omit<Chart, 'chartId' | 'createdAt' | 'updatedAt'> = req.body;\n    \n    const newChart: Chart = {\n      ...chartData,\n      chartId: `chart_${Date.now()}`,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    charts.push(newChart);\n    \n    // Add to history\n    chartHistory.push({\n      historyId: `history_${Date.now()}`,\n      chartId: newChart.chartId,\n      action: 'create',\n      changes: newChart,\n      timestamp: new Date().toISOString(),\n      userId: chartData.ownerId,\n    });\n\n    res.status(201).json(newChart);\n  } catch (error) {\n    console.error('Error creating chart:', error);\n    res.status(500).json({ error: 'Failed to create chart' });\n  }\n};\n\n// Update a chart\nexport const updateChart: RequestHandler = async (req, res) => {\n  try {\n    const { chartId } = req.params;\n    const updates = req.body;\n    \n    const chartIndex = charts.findIndex(c => c.chartId === chartId);\n    if (chartIndex === -1) {\n      return res.status(404).json({ error: 'Chart not found' });\n    }\n\n    const updatedChart = {\n      ...charts[chartIndex],\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    };\n\n    charts[chartIndex] = updatedChart;\n    \n    // Add to history\n    chartHistory.push({\n      historyId: `history_${Date.now()}`,\n      chartId: chartId,\n      action: 'update',\n      changes: updates,\n      timestamp: new Date().toISOString(),\n      userId: updatedChart.ownerId,\n    });\n\n    res.json(updatedChart);\n  } catch (error) {\n    console.error('Error updating chart:', error);\n    res.status(500).json({ error: 'Failed to update chart' });\n  }\n};\n\n// Add a node to a chart\nexport const addNode: RequestHandler = async (req, res) => {\n  try {\n    const { chartId } = req.params;\n    const nodeData: Omit<Node, 'nodeId' | 'createdAt'> = req.body;\n    \n    const newNode: Node = {\n      ...nodeData,\n      nodeId: `node_${Date.now()}`,\n      createdAt: new Date().toISOString(),\n    };\n\n    nodes.push(newNode);\n    \n    // Update chart to include new node\n    const chartIndex = charts.findIndex(c => c.chartId === chartId);\n    if (chartIndex !== -1) {\n      charts[chartIndex].nodes.push(newNode.nodeId);\n      charts[chartIndex].updatedAt = new Date().toISOString();\n    }\n    \n    // Add to history\n    chartHistory.push({\n      historyId: `history_${Date.now()}`,\n      chartId: chartId,\n      action: 'create',\n      nodeId: newNode.nodeId,\n      changes: newNode,\n      timestamp: new Date().toISOString(),\n      userId: newNode.createdBy,\n    });\n\n    res.status(201).json(newNode);\n  } catch (error) {\n    console.error('Error adding node:', error);\n    res.status(500).json({ error: 'Failed to add node' });\n  }\n};\n\n// Update a node\nexport const updateNode: RequestHandler = async (req, res) => {\n  try {\n    const { nodeId } = req.params;\n    const updates = req.body;\n    \n    const nodeIndex = nodes.findIndex(n => n.nodeId === nodeId);\n    if (nodeIndex === -1) {\n      return res.status(404).json({ error: 'Node not found' });\n    }\n\n    const updatedNode = {\n      ...nodes[nodeIndex],\n      ...updates,\n    };\n\n    nodes[nodeIndex] = updatedNode;\n    \n    // Add to history\n    chartHistory.push({\n      historyId: `history_${Date.now()}`,\n      chartId: updatedNode.chartId,\n      action: 'update',\n      nodeId: nodeId,\n      changes: updates,\n      timestamp: new Date().toISOString(),\n      userId: updatedNode.createdBy,\n    });\n\n    res.json(updatedNode);\n  } catch (error) {\n    console.error('Error updating node:', error);\n    res.status(500).json({ error: 'Failed to update node' });\n  }\n};\n\n// Delete a node\nexport const deleteNode: RequestHandler = async (req, res) => {\n  try {\n    const { nodeId } = req.params;\n    \n    const nodeIndex = nodes.findIndex(n => n.nodeId === nodeId);\n    if (nodeIndex === -1) {\n      return res.status(404).json({ error: 'Node not found' });\n    }\n\n    const node = nodes[nodeIndex];\n    nodes.splice(nodeIndex, 1);\n    \n    // Remove from chart\n    const chartIndex = charts.findIndex(c => c.chartId === node.chartId);\n    if (chartIndex !== -1) {\n      charts[chartIndex].nodes = charts[chartIndex].nodes.filter(id => id !== nodeId);\n      charts[chartIndex].updatedAt = new Date().toISOString();\n    }\n    \n    // Add to history\n    chartHistory.push({\n      historyId: `history_${Date.now()}`,\n      chartId: node.chartId,\n      action: 'delete',\n      nodeId: nodeId,\n      changes: node,\n      timestamp: new Date().toISOString(),\n      userId: node.createdBy,\n    });\n\n    res.json({ success: true });\n  } catch (error) {\n    console.error('Error deleting node:', error);\n    res.status(500).json({ error: 'Failed to delete node' });\n  }\n};\n\n// Add an edge\nexport const addEdge: RequestHandler = async (req, res) => {\n  try {\n    const { chartId } = req.params;\n    const edgeData: Omit<Edge, 'edgeId'> = req.body;\n    \n    const newEdge: Edge = {\n      ...edgeData,\n      edgeId: `edge_${Date.now()}`,\n    };\n\n    edges.push(newEdge);\n    \n    // Update chart to include new edge\n    const chartIndex = charts.findIndex(c => c.chartId === chartId);\n    if (chartIndex !== -1) {\n      charts[chartIndex].edges.push(newEdge.edgeId);\n      charts[chartIndex].updatedAt = new Date().toISOString();\n    }\n\n    res.status(201).json(newEdge);\n  } catch (error) {\n    console.error('Error adding edge:', error);\n    res.status(500).json({ error: 'Failed to add edge' });\n  }\n};\n\n// AI-powered node expansion\nexport const aiExpand: RequestHandler = async (req, res) => {\n  try {\n    const { nodeId, chartId, context }: AIExpansionRequest = req.body;\n    \n    // Import Vertex AI\n    const { VertexAI } = await import('@google-cloud/vertexai');\n    \n    const vertexAI = new VertexAI({\n      project: process.env.GOOGLE_CLOUD_PROJECT_ID,\n      location: 'us-central1',\n    });\n\n    const model = vertexAI.getGenerativeModel({\n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 1000,\n        temperature: 0.7,\n        topP: 0.9,\n      },\n    });\n\n    // Create AI prompt for node expansion\n    const prompt = `You are ArtisAI, an AI-powered marketplace assistant for Indian artisans. \n\nGiven this business node:\n- Title: \"${context.nodeContext.title}\"\n- Description: \"${context.nodeContext.description}\"\n- Type: \"${context.nodeContext.type}\"\n- Tags: ${context.nodeContext.tags.join(', ')}\n- Craft Type: ${context.craftType || 'handicrafts'}\n- Location: ${context.userLocale}\n\nGenerate 4-5 actionable sub-steps the artisan can take next. For each sub-step, return a JSON object with:\n- title: Short, actionable title\n- description: 1-2 line description of what to do\n- type: One of: action, resource, checklist, marketing, pricing, supplier, market\n- estimatedEffort: low, medium, or high\n- tags: Array of relevant tags\n- priority: low, medium, or high\n\nReturn only a valid JSON array of objects, no other text.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n\n    // Parse AI response\n    let suggestions;\n    try {\n      suggestions = JSON.parse(text);\n    } catch (parseError) {\n      console.error('Error parsing AI response:', parseError);\n      // Fallback suggestions\n      suggestions = [\n        {\n          title: \"Research Competitors\",\n          description: \"Study similar products and their pricing strategies\",\n          type: \"action\",\n          estimatedEffort: \"medium\",\n          tags: [\"research\", \"competition\"],\n          priority: \"high\"\n        },\n        {\n          title: \"Create Product Photos\",\n          description: \"Take high-quality photos showcasing your product\",\n          type: \"action\",\n          estimatedEffort: \"low\",\n          tags: [\"photography\", \"marketing\"],\n          priority: \"high\"\n        }\n      ];\n    }\n\n    const aiResponse: AIExpansionResponse = {\n      suggestions: suggestions\n    };\n\n    // Add to history\n    chartHistory.push({\n      historyId: `history_${Date.now()}`,\n      chartId: chartId,\n      action: 'ai_generate',\n      nodeId: nodeId,\n      changes: { prompt: prompt, response: aiResponse },\n      timestamp: new Date().toISOString(),\n      userId: 'ai-system',\n    });\n\n    res.json(aiResponse);\n  } catch (error) {\n    console.error('Error in AI expansion:', error);\n    res.status(500).json({ error: 'Failed to generate AI suggestions' });\n  }\n};\n\n// Get chart history\nexport const getChartHistory: RequestHandler = async (req, res) => {\n  try {\n    const { chartId } = req.params;\n    const chartHistoryItems = chartHistory.filter(h => h.chartId === chartId);\n    res.json(chartHistoryItems);\n  } catch (error) {\n    console.error('Error fetching chart history:', error);\n    res.status(500).json({ error: 'Failed to fetch chart history' });\n  }\n};\n\n// Export chart as PNG/SVG\nexport const exportChart: RequestHandler = async (req, res) => {\n  try {\n    const { chartId } = req.params;\n    const { format = 'png' } = req.query;\n    \n    // In production, this would generate actual PNG/SVG\n    // For now, return a placeholder response\n    res.json({\n      success: true,\n      message: `Chart exported as ${format}`,\n      downloadUrl: `/exports/${chartId}.${format}`\n    });\n  } catch (error) {\n    console.error('Error exporting chart:', error);\n    res.status(500).json({ error: 'Failed to export chart' });\n  }\n};\n\n// Generate AI node with custom name and auto-connections\nexport const generateNode: RequestHandler = async (req, res) => {\n  try {\n    const { \n      nodeType, \n      nodeName, \n      craftType, \n      location, \n      existingNodes, \n      existingEdges \n    } = req.body;\n\n    if (!nodeType || !nodeName) {\n      return res.status(400).json({ error: 'Node type and name are required' });\n    }\n\n    // Import Vertex AI for node generation\n    const { VertexAI } = await import('@google-cloud/vertexai');\n    \n    const vertexAI = new VertexAI({\n      project: process.env.GOOGLE_CLOUD_PROJECT_ID,\n      location: 'us-central1',\n    });\n\n    const model = vertexAI.getGenerativeModel({\n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 1500,\n        temperature: 0.7,\n        topP: 0.9,\n      },\n    });\n\n    const prompt = `You are ArtisAI, an AI assistant for Indian artisans. Generate a detailed business node based on user input.\n\nContext:\n- Node Type: ${nodeType}\n- Node Name: ${nodeName}\n- Craft Type: ${craftType || 'handicrafts'}\n- Location: ${location || 'India'}\n- Existing Nodes: ${JSON.stringify(existingNodes || [])}\n- Existing Edges: ${JSON.stringify(existingEdges || [])}\n\nGenerate a comprehensive node with:\n- Enhanced title (improve the user's input)\n- Detailed description (2-3 sentences)\n- Comprehensive detailedExplanation (bullet points with specific steps)\n- Relevant tags for this node type\n- Priority level (high/medium/low)\n- Suggested connections to existing nodes (array of node IDs to connect from)\n\nCRITICAL FORMATTING RULES:\n- Use ONLY dash (-) for bullet points, NO asterisks (*) anywhere\n- NO markdown formatting like **bold** or *italic*\n- Each line should start with a dash and space: \"- Your content here\"\n- detailedExplanation should have 6-8 bullet points\n\nReturn JSON format:\n{\n  \"title\": \"Enhanced node title\",\n  \"description\": \"Brief description of the node\",\n  \"detailedExplanation\": \"Bullet-pointed detailed explanation with dashes\",\n  \"tags\": [\"tag1\", \"tag2\", \"tag3\"],\n  \"priority\": \"high|medium|low\",\n  \"connections\": [\n    {\"from\": \"existing-node-id-1\", \"reason\": \"Why this connection makes sense\"},\n    {\"from\": \"existing-node-id-2\", \"reason\": \"Why this connection makes sense\"}\n  ]\n}`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    \n    let text: string;\n    if (typeof response.text === 'function') {\n      text = response.text().trim();\n    } else if (response.candidates && response.candidates[0] && response.candidates[0].content) {\n      text = response.candidates[0].content.parts[0].text.trim();\n    } else {\n      throw new Error('Unexpected response structure from Gemini');\n    }\n\n    // Clean up any remaining markdown formatting\n    text = text\n      .replace(/\\*\\*([^*]+)\\*\\*/g, '$1') // Remove **bold**\n      .replace(/\\*([^*]+)\\*/g, '$1') // Remove *italic*\n      .replace(/^\\s*\\*\\s+/gm, '- ') // Replace * with - at start of lines\n      .replace(/^\\s*‚Ä¢\\s+/gm, '- ') // Replace ‚Ä¢ with - at start of lines\n      .replace(/\\n\\s*\\n/g, '\\n') // Remove extra blank lines\n      .trim();\n\n    // Clean up the response\n    const cleanedText = text.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n    \n    let nodeData;\n    try {\n      nodeData = JSON.parse(cleanedText);\n    } catch (parseError) {\n      console.error('Failed to parse AI response:', parseError);\n      // Fallback response\n      nodeData = {\n        title: nodeName,\n        description: `AI-generated ${nodeType} node for ${craftType} business`,\n        detailedExplanation: `- This is a ${nodeType} node for your ${craftType} business\\n- AI will provide more specific guidance when you click on it\\n- Use this node to track your progress`,\n        tags: [nodeType],\n        priority: nodeType === 'milestone' ? 'high' : 'medium',\n        connections: []\n      };\n    }\n\n    res.json(nodeData);\n  } catch (error) {\n    console.error('Error generating AI node:', error);\n    res.status(500).json({ error: 'Failed to generate AI node' });\n  }\n};\n\n// Save business flow data\nexport const saveBusinessFlow: RequestHandler = async (req: AuthenticatedRequest, res) => {\n  try {\n    const { userId } = req.params;\n    const flowData = req.body;\n\n    if (!userId) {\n      return res.status(400).json({ error: 'User ID is required' });\n    }\n\n    // Validate required fields\n    if (!flowData.title || !flowData.title.trim()) {\n      return res.status(400).json({ error: 'Plan title is required' });\n    }\n\n    // Import Firebase models\n    const { FirebaseModels, isFirebaseConfigured } = await import('../database/firebase');\n    \n    if (!isFirebaseConfigured) {\n      return res.status(500).json({ error: 'Firebase not configured' });\n    }\n\n    // Check for duplicate plan names\n    const existingFlows = await FirebaseModels.businessFlow.findByUserId(userId);\n    const duplicateName = existingFlows.find(flow => \n      flow.title && flow.title.toLowerCase().trim() === flowData.title.toLowerCase().trim()\n    );\n\n    if (duplicateName) {\n      return res.status(400).json({ \n        error: 'A plan with this name already exists',\n        message: 'Please choose a different name for your business plan'\n      });\n    }\n\n    // Create new business flow (always create new, don't update existing)\n    const result = await FirebaseModels.businessFlow.create({\n      user_id: userId,\n      ...flowData,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    });\n    \n    res.json({ \n      success: true, \n      message: 'Business flow saved successfully',\n      data: result \n    });\n  } catch (error) {\n    console.error('Error saving business flow:', error);\n    res.status(500).json({ error: 'Failed to save business flow' });\n  }\n};\n\n// Get latest business flow for user\nexport const getLatestBusinessFlow: RequestHandler = async (req: AuthenticatedRequest, res) => {\n  try {\n    const { userId } = req.params;\n\n    if (!userId) {\n      return res.status(400).json({ error: 'User ID is required' });\n    }\n\n    // Import Firebase models\n    const { FirebaseModels, isFirebaseConfigured } = await import('../database/firebase');\n    \n    if (!isFirebaseConfigured) {\n      return res.status(500).json({ error: 'Firebase not configured' });\n    }\n\n    // Get latest business flow\n    const latestFlow = await FirebaseModels.businessFlow.getLatest(userId);\n    \n    if (!latestFlow) {\n      return res.json({ \n        success: true, \n        hasFlow: false, \n        message: 'No business flow found' \n      });\n    }\n\n    res.json({ \n      success: true, \n      hasFlow: true, \n      data: latestFlow \n    });\n  } catch (error) {\n    console.error('Error fetching business flow:', error);\n    res.status(500).json({ error: 'Failed to fetch business flow' });\n  }\n};\n\n// Get all business flows for user\nexport const getAllBusinessFlows: RequestHandler = async (req: AuthenticatedRequest, res) => {\n  try {\n    const { userId } = req.params;\n\n    if (!userId) {\n      return res.status(400).json({ error: 'User ID is required' });\n    }\n\n    // Import Firebase models\n    const { FirebaseModels, isFirebaseConfigured } = await import('../database/firebase');\n    \n    if (!isFirebaseConfigured) {\n      return res.status(500).json({ error: 'Firebase not configured' });\n    }\n\n    // Get all business flows\n    const flows = await FirebaseModels.businessFlow.findByUserId(userId);\n    \n    res.json({ \n      success: true, \n      flows: flows \n    });\n  } catch (error) {\n    console.error('Error fetching business flows:', error);\n    res.status(500).json({ error: 'Failed to fetch business flows' });\n  }\n};\n\n// Update existing business flow\nexport const updateBusinessFlow: RequestHandler = async (req: AuthenticatedRequest, res) => {\n  try {\n    const { userId, flowId } = req.params;\n    const flowData = req.body;\n\n    if (!userId || !flowId) {\n      return res.status(400).json({ error: 'User ID and Flow ID are required' });\n    }\n\n    // Validate required fields\n    if (!flowData.title || !flowData.title.trim()) {\n      return res.status(400).json({ error: 'Plan title is required' });\n    }\n\n    // Import Firebase models\n    const { FirebaseModels, isFirebaseConfigured } = await import('../database/firebase');\n    \n    if (!isFirebaseConfigured) {\n      return res.status(500).json({ error: 'Firebase not configured' });\n    }\n\n    // Check if flow exists and belongs to user\n    const existingFlow = await FirebaseModels.businessFlow.findById(flowId);\n    if (!existingFlow || existingFlow.user_id !== userId) {\n      return res.status(404).json({ error: 'Business flow not found' });\n    }\n\n    // Check for duplicate plan names (excluding current flow)\n    const allFlows = await FirebaseModels.businessFlow.findByUserId(userId);\n    const duplicateName = allFlows.find(flow => \n      flow.id !== flowId && \n      flow.title && \n      flow.title.toLowerCase().trim() === flowData.title.toLowerCase().trim()\n    );\n\n    if (duplicateName) {\n      return res.status(400).json({ \n        error: 'A plan with this name already exists',\n        message: 'Please choose a different name for your business plan'\n      });\n    }\n\n    // Update the business flow\n    const result = await FirebaseModels.businessFlow.update(flowId, {\n      ...flowData,\n      updated_at: new Date().toISOString()\n    });\n    \n    res.json({ \n      success: true, \n      message: 'Business flow updated successfully',\n      data: result \n    });\n  } catch (error) {\n    console.error('Error updating business flow:', error);\n    res.status(500).json({ error: 'Failed to update business flow' });\n  }\n};\n\n// Delete business flow\nexport const deleteBusinessFlow: RequestHandler = async (req: AuthenticatedRequest, res) => {\n  try {\n    const { userId, flowId } = req.params;\n\n    if (!userId || !flowId) {\n      return res.status(400).json({ error: 'User ID and Flow ID are required' });\n    }\n\n    // Import Firebase models\n    const { FirebaseModels, isFirebaseConfigured } = await import('../database/firebase');\n    \n    if (!isFirebaseConfigured) {\n      return res.status(500).json({ error: 'Firebase not configured' });\n    }\n\n    // Check if flow exists and belongs to user\n    const existingFlow = await FirebaseModels.businessFlow.findById(flowId);\n    if (!existingFlow || existingFlow.user_id !== userId) {\n      return res.status(404).json({ error: 'Business flow not found' });\n    }\n\n    // Delete the business flow\n    await FirebaseModels.businessFlow.delete(flowId);\n    \n    res.json({ \n      success: true, \n      message: 'Business flow deleted successfully'\n    });\n  } catch (error) {\n    console.error('Error deleting business flow:', error);\n    res.status(500).json({ error: 'Failed to delete business flow' });\n  }\n};\n\n","import { RequestHandler } from \"express\";\n\ninterface QuestionnaireAnswers {\n  [key: string]: any;\n}\n\ninterface Question {\n  question: string;\n  options?: string[];\n  type: 'open' | 'multiple-choice' | 'location' | 'craft-type';\n  field: string;\n  required: boolean;\n}\n\ninterface FlowNode {\n  id: string;\n  title: string;\n  description: string;\n  type: string;\n  quickActions: string[];\n  children: string[];\n  position?: { x: number; y: number };\n}\n\ninterface FlowData {\n  nodes: FlowNode[];\n  edges: { from: string; to: string; label?: string }[];\n}\n\n// Static questionnaire - no API calls needed\n// Context: QUESTIONNAIRE MODE - Handled client-side with static questions\nexport const generateNextQuestion: RequestHandler = async (req, res) => {\n  // This endpoint is no longer used - questionnaire is now completely static\n  res.status(410).json({ \n    error: 'This endpoint is deprecated. Questionnaire is now static.' \n  });\n};\n\n// Generate complete business flow using Gemini AI\n// Context: FLOW GENERATION MODE - Builds flowchart from collected answers\nexport const generateFlow: RequestHandler = async (req, res) => {\n  try {\n    const { answers }: { answers: QuestionnaireAnswers } = req.body;\n\n    // Import Vertex AI\n    const { VertexAI } = await import('@google-cloud/vertexai');\n    \n    const vertexAI = new VertexAI({\n      project: process.env.GOOGLE_CLOUD_PROJECT_ID,\n      location: 'us-central1',\n    });\n\n    const model = vertexAI.getGenerativeModel({\n      model: 'gemini-2.0-flash-exp',\n      generationConfig: {\n        maxOutputTokens: 3000,\n        temperature: 0.7,\n        topP: 0.9,\n      },\n    });\n\n    // Create comprehensive prompt for flow generation with clear context switching\n    const prompt = `You are ArtisAI, an AI assistant for Indian artisans. You are now in FLOW GENERATION MODE.\n\nContext: Flow Generation Mode\n- Read the user's answers below\n- Build a business flowchart that shows the artisan's journey\n- Output in JSON with \"nodes\" and \"edges\"\n- Each node must have the exact structure specified\n- Do not add explanations, only return JSON\n\nUser Profile:\n${JSON.stringify(answers, null, 2)}\n\nRequired JSON Structure:\n{\n  \"nodes\": [\n    {\n      \"id\": \"string\",\n      \"title\": \"string\", \n      \"description\": \"string\",\n      \"detailedExplanation\": \"string - comprehensive explanation with specific steps, tips, and actionable advice for this artisan\",\n      \"type\": \"milestone|action|resource\",\n      \"quickActions\": [\"list of dynamic quick action suggestions\"],\n      \"children\": [\"list of child node ids\"]\n    }\n  ],\n  \"edges\": [\n    {\"from\": \"string\", \"to\": \"string\"}\n  ]\n}\n\nNode Requirements:\n- Create 6-10 nodes specific to this artisan's craft, location, and challenges\n- Use only these node types: milestone, action, resource\n- Each node must have actionable quickActions\n- Connect nodes logically with edges\n- Focus on Indian artisan business journey\n- Each detailedExplanation should be formatted as bullet points with:\n  - Specific steps and actionable advice (use - for each point)\n  - Location-specific tips for ${answers.location || 'India'}\n  - Local market insights and cultural context for ${answers.location || 'India'}\n  - Regional suppliers, markets, and business opportunities\n  - Local festivals, seasons, and events relevant to ${answers.craft || 'handicrafts'}\n  - Regional pricing strategies and customer preferences\n  - Local government schemes, grants, or support programs\n  - Location-specific marketing channels and platforms\n  - Practical implementation guidance for ${answers.location || 'India'}\n  - Common challenges and how to overcome them locally\n  - ArtisAI service suggestions where relevant (AI Image Generator, Marketing Assistant, Video Generator, etc.)\n  - Format: Use bullet points (-) for each actionable item\n  - Structure: 8-12 bullet points covering all aspects\n\nCRITICAL FORMATTING RULES FOR detailedExplanation:\n- Use ONLY dash (-) for bullet points, NO asterisks (*) anywhere\n- NO markdown formatting like **bold** or *italic*\n- NO special characters except dashes for bullets\n- Each line should start with a dash and space: \"- Your content here\"\n- Do not use any other formatting symbols\n- Example: \"- This is a proper bullet point\" NOT \"* This is wrong\"\n\nCraft Context:\n- Craft type: ${answers.craft || 'handicrafts'}\n- Location: ${answers.location || 'India'} \n- Main challenge: ${answers.challenge || 'business growth'}\n- Experience level: ${answers.experience_level || 'beginner'}\n- Target market: ${answers.target_market || 'local customers'}\n\nLocation-Specific Requirements:\n- Provide location-specific market insights for ${answers.location || 'India'}\n- Include local cultural context and traditions relevant to ${answers.craft || 'handicrafts'}\n- Suggest local suppliers, markets, and business opportunities in ${answers.location || 'India'}\n- Reference local festivals, seasons, and events that could boost sales\n- Include regional pricing strategies and customer preferences\n- Mention local government schemes, grants, or support programs\n- Suggest location-specific marketing channels and platforms\n\nReturn only the JSON structure, no explanations.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    \n    // Debug: Log response structure (commented out for production)\n    // console.log('Gemini response structure:', JSON.stringify(response, null, 2));\n    \n    // Handle different response structures\n    let text: string;\n    if (typeof response.text === 'function') {\n      text = response.text().trim();\n    } else if (response.candidates && response.candidates[0] && response.candidates[0].content) {\n      text = response.candidates[0].content.parts[0].text.trim();\n    } else if (response.text) {\n      text = response.text.trim();\n    } else {\n      console.error('Unexpected response structure:', response);\n      throw new Error('Unexpected response structure from Gemini');\n    }\n\n    // Clean up any remaining markdown formatting\n    text = text\n      .replace(/\\*\\*([^*]+)\\*\\*/g, '$1') // Remove **bold**\n      .replace(/\\*([^*]+)\\*/g, '$1') // Remove *italic*\n      .replace(/^\\s*\\*\\s+/gm, '- ') // Replace * with - at start of lines\n      .replace(/^\\s*‚Ä¢\\s+/gm, '- ') // Replace ‚Ä¢ with - at start of lines\n      .replace(/\\n\\s*\\n/g, '\\n') // Remove extra blank lines\n      .trim();\n\n    // Clean up the response\n    const cleanedText = text.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n    \n    let flowData: FlowData;\n    try {\n      flowData = JSON.parse(cleanedText);\n    } catch (parseError) {\n      console.error('Error parsing Gemini flow response:', parseError);\n      console.error('Raw response:', cleanedText);\n      \n      // Fallback flow\n      flowData = generateFallbackFlow(answers);\n    }\n\n    // Validate and enhance the flow data\n    flowData = enhanceFlowData(flowData, answers);\n\n    res.json(flowData);\n  } catch (error) {\n    console.error('Error generating flow:', error);\n    \n    // Return error instead of fallback\n    res.status(500).json({ \n      error: 'Failed to generate business flow',\n      message: 'Unable to create your personalized business roadmap. Please try again later.',\n      details: error.message\n    });\n  }\n};\n\n// Generate adaptive fallback question based on user answers\nfunction generateAdaptiveFallbackQuestion(answers: QuestionnaireAnswers): Question {\n  const craft = answers.craft?.toLowerCase() || '';\n  const location = answers.location?.toLowerCase() || '';\n  const challenge = answers.challenge?.toLowerCase() || '';\n  const sellingStatus = answers.selling_status?.toLowerCase() || '';\n  const targetMarket = answers.target_market?.toLowerCase() || '';\n  const goal = answers.goal?.toLowerCase() || '';\n\n  // Priority order for questions\n  if (!challenge) {\n    return {\n      question: \"What's your biggest business challenge right now?\",\n      type: 'multiple-choice',\n      field: 'challenge',\n      required: true,\n      options: ['Pricing Strategy', 'Finding Customers', 'Marketing', 'Suppliers', 'Online Presence', 'Other']\n    };\n  }\n\n  if (!sellingStatus) {\n    return {\n      question: \"Do you currently sell online or offline?\",\n      type: 'multiple-choice',\n      field: 'selling_status',\n      required: true,\n      options: ['Online only', 'Offline only', 'Both', 'Not selling yet', 'Other']\n    };\n  }\n\n  if (!targetMarket) {\n    return {\n      question: \"What's your target market?\",\n      type: 'multiple-choice',\n      field: 'target_market',\n      required: true,\n      options: ['Local customers', 'National market', 'International', 'Tourists', 'Wholesale buyers', 'Other']\n    };\n  }\n\n  if (!goal) {\n    return {\n      question: \"What's your main goal for the next 6 months?\",\n      type: 'multiple-choice',\n      field: 'goal',\n      required: true,\n      options: ['Increase sales', 'Improve product quality', 'Expand product line', 'Find new suppliers', 'Build online presence', 'Other']\n    };\n  }\n\n  // Craft-specific questions\n  if (craft && !answers.experience_level) {\n    if (craft.includes('textile') || craft.includes('weaving')) {\n      return {\n        question: \"How long have you been practicing textile work?\",\n        type: 'multiple-choice',\n        field: 'experience_level',\n        required: true,\n        options: ['Less than 1 year', '1-3 years', '3-5 years', '5+ years', 'Other']\n      };\n    } else if (craft.includes('pottery') || craft.includes('ceramic')) {\n      return {\n        question: \"What's your pottery experience level?\",\n        type: 'multiple-choice',\n        field: 'experience_level',\n        required: true,\n        options: ['Beginner', 'Intermediate', 'Advanced', 'Master craftsman', 'Other']\n      };\n    } else if (craft.includes('jewelry')) {\n      return {\n        question: \"What type of jewelry do you specialize in?\",\n        type: 'multiple-choice',\n        field: 'jewelry_type',\n        required: true,\n        options: ['Traditional Indian', 'Modern Contemporary', 'Fusion Style', 'Custom Orders', 'Other']\n      };\n    }\n  }\n\n  // Challenge-specific follow-up\n  if (challenge && !answers.challenge_details) {\n    if (challenge.includes('pricing')) {\n      return {\n        question: \"What's your current pricing strategy?\",\n        type: 'multiple-choice',\n        field: 'pricing_strategy',\n        required: true,\n        options: ['Cost-based pricing', 'Market-based pricing', 'Value-based pricing', 'I need help with pricing', 'Other']\n      };\n    } else if (challenge.includes('marketing')) {\n      return {\n        question: \"Which marketing channels do you currently use?\",\n        type: 'multiple-choice',\n        field: 'marketing_channels',\n        required: true,\n        options: ['Social media only', 'Word of mouth', 'Local advertising', 'Online platforms', 'None', 'Other']\n      };\n    } else if (challenge.includes('suppliers')) {\n      return {\n        question: \"What type of suppliers do you need?\",\n        type: 'multiple-choice',\n        field: 'supplier_type',\n        required: true,\n        options: ['Raw materials', 'Tools and equipment', 'Packaging materials', 'All of the above', 'Other']\n      };\n    }\n  }\n\n  // Location-specific questions\n  if (location && !answers.local_markets) {\n    return {\n      question: \"Do you participate in local markets or fairs?\",\n      type: 'multiple-choice',\n      field: 'local_markets',\n      required: true,\n      options: ['Yes, regularly', 'Sometimes', 'Never', 'Want to start', 'Other']\n    };\n  }\n\n  // Business story question\n  if (!answers.story) {\n    return {\n      question: \"Tell us about your craft story and what makes it unique:\",\n      type: 'open',\n      field: 'story',\n      required: false\n    };\n  }\n\n  // Default fallback\n  return {\n    question: \"What additional support do you need for your craft business?\",\n    type: 'multiple-choice',\n    field: 'additional_support',\n    required: true,\n    options: ['Business planning', 'Marketing help', 'Technical skills', 'Financial guidance', 'All of the above', 'Other']\n  };\n}\n\n// Fallback flow generation if AI fails\nfunction generateFallbackFlow(answers: QuestionnaireAnswers): FlowData {\n  const craft = answers.craft || 'handicrafts';\n  const location = answers.location || 'India';\n  const challenge = answers.challenge || 'marketing';\n\n  return {\n    nodes: [\n      {\n        id: '1',\n        title: 'Complete Profile',\n        description: `Set up your ${craft} artisan profile with business information`,\n        type: 'milestone',\n        quickActions: ['Add Business Info', 'Upload Photos', 'Write Story'],\n        children: ['2', '3'],\n        position: { x: 0, y: 0 }\n      },\n      {\n        id: '2',\n        title: 'Create Catalog',\n        description: 'Develop product listings with photos and descriptions',\n        type: 'action',\n        quickActions: ['Take Photos', 'Write Descriptions', 'Set Categories'],\n        children: ['4'],\n        position: { x: 300, y: -100 }\n      },\n      {\n        id: '3',\n        title: 'Find Suppliers',\n        description: `Locate suppliers for ${craft} in ${location}`,\n        type: 'supplier',\n        quickActions: ['Search Suppliers', 'Compare Prices', 'Contact Wholesalers'],\n        children: ['4'],\n        position: { x: 300, y: 100 }\n      },\n      {\n        id: '4',\n        title: 'Set Pricing',\n        description: 'Calculate costs and set competitive prices',\n        type: 'pricing',\n        quickActions: ['Calculate Costs', 'Research Competitors', 'Set Prices'],\n        children: ['5'],\n        position: { x: 600, y: 0 }\n      },\n      {\n        id: '5',\n        title: 'Launch Marketing',\n        description: `Focus on ${challenge} - promote through social media and local channels`,\n        type: 'marketing',\n        quickActions: ['Create Social Media', 'Generate Content', 'Find Markets'],\n        children: ['6'],\n        position: { x: 900, y: 0 }\n      },\n      {\n        id: '6',\n        title: 'Start Selling',\n        description: 'Begin selling and building customer relationships',\n        type: 'milestone',\n        quickActions: ['Process Orders', 'Handle Service', 'Track Sales'],\n        children: [],\n        position: { x: 1200, y: 0 }\n      }\n    ],\n    edges: [\n      { from: '1', to: '2' },\n      { from: '1', to: '3' },\n      { from: '2', to: '4' },\n      { from: '3', to: '4' },\n      { from: '4', to: '5' },\n      { from: '5', to: '6' }\n    ]\n  };\n}\n\n// Enhance flow data with additional properties\nfunction enhanceFlowData(flowData: FlowData, answers: QuestionnaireAnswers): FlowData {\n  // Add position data if missing\n  flowData.nodes = flowData.nodes.map((node, index) => ({\n    ...node,\n    position: node.position || { \n      x: (index % 3) * 400, \n      y: Math.floor(index / 3) * 200 \n    }\n  }));\n\n  // Add meta information\n  flowData.nodes = flowData.nodes.map(node => ({\n    ...node,\n    meta: {\n      status: 'not-started',\n      ai_generated: true,\n      tags: [node.type],\n      priority: node.type === 'milestone' ? 'high' : 'medium'\n    }\n  }));\n\n  return flowData;\n}\n\n// Get all questionnaires for a user\nexport const getQuestionnaires: RequestHandler = async (req, res) => {\n  try {\n    const { userId } = req.params;\n    \n    // Mock data - in production, fetch from Firestore\n    const questionnaires = [\n      {\n        id: 'q1',\n        title: 'My First Business Plan',\n        craft: 'Pottery',\n        location: 'Jaipur',\n        status: 'completed',\n        createdAt: new Date('2024-01-15'),\n        updatedAt: new Date('2024-01-15'),\n        answers: {\n          craft: 'Pottery',\n          location: 'Jaipur',\n          challenge: 'Marketing',\n          experience_level: 'Intermediate',\n          selling_status: 'Not selling yet',\n          target_market: 'Local customers',\n          goal: 'Start selling online'\n        }\n      },\n      {\n        id: 'q2',\n        title: 'Jewelry Business Roadmap',\n        craft: 'Jewelry',\n        location: 'Mumbai',\n        status: 'in_progress',\n        createdAt: new Date('2024-01-20'),\n        updatedAt: new Date('2024-01-22'),\n        answers: {\n          craft: 'Jewelry',\n          location: 'Mumbai',\n          challenge: 'Pricing',\n          experience_level: 'Beginner'\n        }\n      }\n    ];\n    \n    res.json({ questionnaires });\n  } catch (error) {\n    console.error('Error fetching questionnaires:', error);\n    res.status(500).json({ error: 'Failed to fetch questionnaires' });\n  }\n};\n\n// Get specific questionnaire\nexport const getQuestionnaire: RequestHandler = async (req, res) => {\n  try {\n    const { questionnaireId } = req.params;\n    \n    // Mock data - in production, fetch from Firestore\n    const questionnaire = {\n      id: questionnaireId,\n      title: 'My Business Plan',\n      craft: 'Pottery',\n      location: 'Jaipur',\n      status: 'completed',\n      createdAt: new Date('2024-01-15'),\n      updatedAt: new Date('2024-01-15'),\n      answers: {\n        craft: 'Pottery',\n        location: 'Jaipur',\n        challenge: 'Marketing',\n        experience_level: 'Intermediate',\n        selling_status: 'Not selling yet',\n        target_market: 'Local customers',\n        goal: 'Start selling online'\n      }\n    };\n    \n    res.json({ questionnaire });\n  } catch (error) {\n    console.error('Error fetching questionnaire:', error);\n    res.status(500).json({ error: 'Failed to fetch questionnaire' });\n  }\n};\n\n// Create new questionnaire\nexport const createQuestionnaire: RequestHandler = async (req, res) => {\n  try {\n    const { title, craft, location } = req.body;\n    \n    // Mock data - in production, save to Firestore\n    const newQuestionnaire = {\n      id: `q_${Date.now()}`,\n      title: title || 'New Business Plan',\n      craft: craft || '',\n      location: location || '',\n      status: 'draft',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      answers: {}\n    };\n    \n    console.log('Creating new questionnaire:', newQuestionnaire);\n    res.json({ questionnaire: newQuestionnaire });\n  } catch (error) {\n    console.error('Error creating questionnaire:', error);\n    res.status(500).json({ error: 'Failed to create questionnaire' });\n  }\n};\n\n// Update questionnaire\nexport const updateQuestionnaire: RequestHandler = async (req, res) => {\n  try {\n    const { questionnaireId } = req.params;\n    const { title, answers, status } = req.body;\n    \n    // Mock data - in production, update in Firestore\n    const updatedQuestionnaire = {\n      id: questionnaireId,\n      title: title || 'Updated Business Plan',\n      status: status || 'in_progress',\n      updatedAt: new Date(),\n      answers: answers || {}\n    };\n    \n    console.log('Updating questionnaire:', updatedQuestionnaire);\n    res.json({ questionnaire: updatedQuestionnaire });\n  } catch (error) {\n    console.error('Error updating questionnaire:', error);\n    res.status(500).json({ error: 'Failed to update questionnaire' });\n  }\n};\n\n// Delete questionnaire\nexport const deleteQuestionnaire: RequestHandler = async (req, res) => {\n  try {\n    const { questionnaireId } = req.params;\n    \n    console.log('Deleting questionnaire:', questionnaireId);\n    res.json({ success: true, message: 'Questionnaire deleted successfully' });\n  } catch (error) {\n    console.error('Error deleting questionnaire:', error);\n    res.status(500).json({ error: 'Failed to delete questionnaire' });\n  }\n};\n\n// Save questionnaire answers to Firestore\nexport const saveAnswers: RequestHandler = async (req, res) => {\n  try {\n    const { userId, answers }: { userId: string; answers: QuestionnaireAnswers } = req.body;\n    \n    // In production, save to Firestore\n    // For now, just return success\n    res.json({ success: true, message: 'Answers saved successfully' });\n  } catch (error) {\n    console.error('Error saving answers:', error);\n    res.status(500).json({ error: 'Failed to save answers' });\n  }\n};\n\n// Save generated flow to Firestore\nexport const saveFlow: RequestHandler = async (req, res) => {\n  try {\n    const { userId, flowData }: { userId: string; flowData: FlowData } = req.body;\n    \n    // In production, save to Firestore\n    // For now, just return success\n    res.json({ success: true, message: 'Flow saved successfully' });\n  } catch (error) {\n    console.error('Error saving flow:', error);\n    res.status(500).json({ error: 'Failed to save flow' });\n  }\n};\n\n// Test endpoint to verify questionnaire is working\nexport const testQuestionnaire: RequestHandler = async (req, res) => {\n  try {\n    res.json({ \n      success: true, \n      message: 'Questionnaire system is running',\n      note: 'No fallback flows - Gemini required for flow generation'\n    });\n  } catch (error) {\n    console.error('Error testing questionnaire:', error);\n    res.status(500).json({ error: 'Failed to test questionnaire' });\n  }\n};","import { RequestHandler } from 'express';\nimport { initializeVertexAI, extractTextFromResponse, generateImageWithGemini25 } from './ai';\n\ninterface GeneratePostRequest {\n  prompt: string;\n  platform: 'instagram' | 'facebook' | 'twitter';\n  language: string;\n  productImage?: {\n    name: string;\n    data: string;\n  };\n}\n\ninterface GeneratePostResponse {\n    image?: string;\n  video?: string;\n    caption: string;\n    hashtags: string[];\n  platform: string;\n}\n\n// Initialize Vertex AI\nlet aiInstance: any = null;\n\nconst getVertexAI = async () => {\n  if (!aiInstance) {\n    aiInstance = await initializeVertexAI();\n  }\n  return aiInstance;\n};\n\n// Generate platform-specific content\nconst generatePlatformContent = async (\n  prompt: string, \n  platform: string, \n  language: string,\n  productImage?: { name: string; data: string }\n): Promise<{ caption: string; hashtags: string[] }> => {\n  try {\n    const { model } = await getVertexAI();\n    \n    const platformContext = {\n      instagram: \"Instagram post with engaging visual content, trendy hashtags, and emojis\",\n      facebook: \"Facebook post with detailed description, community-focused content, and relevant hashtags\",\n      twitter: \"X (Twitter) post with concise, engaging text, trending hashtags, and character limit awareness\"\n    };\n\n    console.log('Platform context for', platform, ':', platformContext[platform as keyof typeof platformContext]);\n\n    const systemPrompt = `You are a social media content creator specializing in ${platform} posts for artisans and craft businesses.\n\nPlatform: ${platform}\nLanguage: ${language}\nPlatform Guidelines: ${platformContext[platform as keyof typeof platformContext]}\n\n${productImage ? `Product Image: ${productImage.name} - Use this product as the main focus of the content.` : ''}\n\nUser Request: ${prompt}\n\nGenerate:\n1. A compelling caption (2-3 sentences for Instagram, 1-2 sentences for Facebook, 1 sentence for Twitter)\n2. 5-10 relevant hashtags for the platform and content\n\nFormat your response as JSON:\n{\n  \"caption\": \"Your generated caption here\",\n  \"hashtags\": [\"hashtag1\", \"hashtag2\", \"hashtag3\"]\n}`;\n\n    const result = await model.generateContent(systemPrompt);\n\n    const response = await result.response;\n    const text = extractTextFromResponse(response);\n    \n    try {\n      // Clean markdown code blocks from the response\n      const cleanedText = text.replace(/```json\\n?/g, '').replace(/```\\n?/g, '').trim();\n      const parsed = JSON.parse(cleanedText);\n      return {\n        caption: parsed.caption || 'Generated caption',\n        hashtags: parsed.hashtags || []\n      };\n    } catch (parseError) {\n      console.error('Error parsing AI response:', parseError);\n      return {\n        caption: text || 'Generated caption',\n        hashtags: ['artisan', 'handmade', 'craft']\n      };\n    }\n  } catch (error) {\n    console.error('Error generating platform content:', error);\n    return {\n      caption: `Check out this amazing ${prompt.toLowerCase()}! Perfect for your collection.`,\n      hashtags: ['artisan', 'handmade', 'craft', 'unique', 'beautiful']\n    };\n  }\n};\n\n// Generate image using Vertex AI Imagen\nconst generateImage = async (prompt: string, platform: string, productImage?: { name: string; data: string }): Promise<string | null> => {\n  try {\n    if (!productImage) {\n      // If no product image provided, return a placeholder\n      const dimensions = platform === 'instagram' ? '400x400' : '600x400';\n      const encodedText = encodeURIComponent(prompt.substring(0, 20));\n      return `https://dummyimage.com/${dimensions}/6366f1/ffffff&text=${encodedText}`;\n    }\n\n    // Use Gemini 2.5 Flash Image Preview for true image-to-image generation\n    const imagePrompt = `Create professional product photography for ${platform} that preserves the exact design and appearance of the uploaded pottery/product.\n    \n    CRITICAL REQUIREMENTS:\n    - PRESERVE the original product design, shape, colors, patterns, and textures exactly as they are\n    - DO NOT change the product's design, style, or artistic elements\n    - ONLY enhance the photography setup, lighting, and presentation\n    - Platform: ${platform} (${platform === 'instagram' ? 'square format 1:1' : 'landscape format 16:9'})\n    - Background: Clean, professional white or neutral background\n    - Lighting: Soft, even lighting that highlights the product's details\n    - Composition: Center the product as the main subject\n    - Quality: High resolution, commercial photography style\n    - Focus: Showcase the product's authentic craftsmanship and design\n    \n    The goal is to create professional product photography that makes the existing design look its best, NOT to redesign or modify the product itself.`;\n\n    console.log('üé® Using Gemini 2.5 Flash Image Preview for image generation...');\n    \n    // Add a small delay to avoid quota issues\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Use Gemini 2.5 Flash Image Preview for both analysis and generation\n    const generatedImageUrl = await generateImageWithGemini25(imagePrompt, productImage.data);\n    \n    if (generatedImageUrl) {\n      console.log('‚úÖ Image generated successfully with Gemini 2.5');\n      return generatedImageUrl;\n    } else {\n      console.log('‚ö†Ô∏è Image generation returned null, using fallback');\n      // Fallback to placeholder if AI generation fails\n      const dimensions = platform === 'instagram' ? '400x400' : '600x400';\n      const encodedText = encodeURIComponent(prompt.substring(0, 20));\n      return `https://dummyimage.com/${dimensions}/6366f1/ffffff&text=${encodedText}`;\n    }\n  } catch (error) {\n    console.error('‚ùå Image generation failed:', error);\n    \n    // Check if it's a quota error\n    if (error instanceof Error && error.message.includes('429')) {\n      console.log('‚ö†Ô∏è Quota exceeded, using fallback image');\n    }\n    \n    // Fallback to placeholder if AI generation fails\n    const dimensions = platform === 'instagram' ? '400x400' : '600x400';\n    const encodedText = encodeURIComponent(prompt.substring(0, 20));\n    return `https://dummyimage.com/${dimensions}/6366f1/ffffff&text=${encodedText}`;\n  }\n};\n\n// Generate video using Vertex AI Veo\nconst generateVideo = async (prompt: string, platform: string): Promise<string | null> => {\n  try {\n    // For now, return null as video generation is more complex\n    // In a real implementation, you would use the Veo API\n    return null;\n  } catch (error) {\n    console.error('Error generating video:', error);\n    return null;\n  }\n};\n\n// Main post generation handler\nexport const handleGeneratePost: RequestHandler = async (req, res) => {\n  try {\n    const { prompt, platform, language, productImage }: GeneratePostRequest = req.body;\n\n    if (!prompt || !platform) {\n      return res.status(400).json({ \n        error: \"Prompt and platform are required\" \n      });\n    }\n\n    console.log(`üé® Generating ${platform} post:`, { prompt, language, hasImage: !!productImage });\n\n    // Generate content for the platform\n    const content = await generatePlatformContent(prompt, platform, language, productImage);\n    \n    // Generate image\n    const image = await generateImage(prompt, platform, productImage);\n    \n    // Generate video (optional)\n    const video = await generateVideo(prompt, platform);\n\n    const response: GeneratePostResponse = {\n      image,\n      video,\n      caption: content.caption,\n      hashtags: content.hashtags,\n      platform\n    };\n\n    console.log(`‚úÖ Generated ${platform} post successfully`);\n    res.json(response);\n\n  } catch (error) {\n    console.error('‚ùå Error generating social post:', error);\n    res.status(500).json({ \n      error: \"Failed to generate social media post\",\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};\n\n// Get available platforms\nexport const handleGetPlatforms: RequestHandler = async (req, res) => {\n  try {\n    const platforms = [\n      {\n        id: 'instagram',\n        name: 'Instagram',\n        description: 'Visual content with hashtags and stories',\n        icon: 'üì∏',\n        color: '#E4405F'\n      },\n      {\n        id: 'facebook',\n        name: 'Facebook',\n        description: 'Community-focused posts with detailed descriptions',\n        icon: 'üë•',\n        color: '#1877F2'\n      },\n      {\n        id: 'twitter',\n        name: 'X (Twitter)',\n        description: 'Concise posts with trending hashtags',\n        icon: 'üê¶',\n        color: '#1DA1F2'\n      }\n    ];\n\n    res.json({ platforms });\n  } catch (error) {\n    console.error('‚ùå Error getting platforms:', error);\n    res.status(500).json({ \n      error: \"Failed to get platforms\",\n      details: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n};","import { initializeApp, getApps } from 'firebase/app';\nimport { getFirestore, collection, doc, getDocs, getDoc, addDoc, updateDoc, deleteDoc, query, where, orderBy, limit, Timestamp } from 'firebase/firestore';\n\n// Firebase configuration - read environment variables at runtime\nconst getFirebaseConfig = () => {\n  console.log('üîç Firebase config - Environment variables at runtime:');\n  console.log('FIREBASE_PROJECT_ID:', process.env.FIREBASE_PROJECT_ID);\n  console.log('FIREBASE_API_KEY:', process.env.FIREBASE_API_KEY ? 'Set' : 'Not set');\n  \n  return {\n    apiKey: process.env.FIREBASE_API_KEY || \"your-api-key\",\n    authDomain: process.env.FIREBASE_AUTH_DOMAIN || \"your-project.firebaseapp.com\",\n    projectId: process.env.FIREBASE_PROJECT_ID || \"your-project-id\",\n    storageBucket: process.env.FIREBASE_STORAGE_BUCKET || \"your-project.appspot.com\",\n    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n    appId: process.env.FIREBASE_APP_ID || \"1:123456789:web:abcdef123456\"\n  };\n};\n\n// Initialize Firebase lazily when first needed\nlet app: any = null;\nlet db: any = null;\n\nconst initializeFirebase = () => {\n  if (!app) {\n    const firebaseConfig = getFirebaseConfig();\n    console.log('üî• Firebase config being used:', firebaseConfig);\n    app = getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];\n    db = getFirestore(app);\n  }\n  return { app, db };\n};\n\n// Export Firebase models with lazy initialization\nexport { initializeFirebase };\n\n// Helper function to convert Firestore timestamps\nconst convertTimestamps = (data: any) => {\n  if (!data) return data;\n  \n  const converted = { ...data };\n  Object.keys(converted).forEach(key => {\n    if (converted[key] instanceof Timestamp) {\n      converted[key] = converted[key].toDate();\n    } else if (typeof converted[key] === 'object' && converted[key] !== null) {\n      converted[key] = convertTimestamps(converted[key]);\n    }\n  });\n  return converted;\n};\n\n// Check if Firebase is configured\nexport const isFirebaseConfigured = () => {\n  return process.env.FIREBASE_API_KEY && \n         process.env.FIREBASE_AUTH_DOMAIN && \n         process.env.FIREBASE_PROJECT_ID;\n};\n\n// Health check\nexport const healthCheck = async (): Promise<boolean> => {\n  try {\n    if (!isFirebaseConfigured()) {\n      return false;\n    }\n    \n    // Try to read from a collection to test connection\n    const { db } = initializeFirebase();\n    const testQuery = query(collection(db, 'users'), limit(1));\n    await getDocs(testQuery);\n    return true;\n  } catch (error) {\n    console.error('Firebase health check failed:', error);\n    return false;\n  }\n};\n\n// Generic CRUD operations\nexport const createDocument = async (collectionName: string, data: any) => {\n  const { db } = initializeFirebase();\n  const docRef = await addDoc(collection(db, collectionName), {\n    ...data,\n    created_at: Timestamp.now(),\n    updated_at: Timestamp.now()\n  });\n  return { id: docRef.id, ...data };\n};\n\nexport const getDocument = async (collectionName: string, docId: string) => {\n  const { db } = initializeFirebase();\n  const docRef = doc(db, collectionName, docId);\n  const docSnap = await getDoc(docRef);\n  \n  if (docSnap.exists()) {\n    return { id: docSnap.id, ...convertTimestamps(docSnap.data()) };\n  }\n  return null;\n};\n\nexport const updateDocument = async (collectionName: string, docId: string, data: any) => {\n  const { db } = initializeFirebase();\n  const docRef = doc(db, collectionName, docId);\n  await updateDoc(docRef, {\n    ...data,\n    updated_at: Timestamp.now()\n  });\n  return { id: docId, ...data };\n};\n\nexport const deleteDocument = async (collectionName: string, docId: string) => {\n  const { db } = initializeFirebase();\n  const docRef = doc(db, collectionName, docId);\n  await deleteDoc(docRef);\n  return true;\n};\n\nexport const getDocuments = async (collectionName: string, filters: any[] = [], orderByField?: string, orderDirection: 'asc' | 'desc' = 'desc', limitCount?: number) => {\n  const { db } = initializeFirebase();\n  let q = query(collection(db, collectionName));\n  \n  // Apply filters\n  filters.forEach(filter => {\n    q = query(q, where(filter.field, filter.operator, filter.value));\n  });\n  \n  // Apply ordering\n  if (orderByField) {\n    q = query(q, orderBy(orderByField, orderDirection));\n  }\n  \n  // Apply limit\n  if (limitCount) {\n    q = query(q, limit(limitCount));\n  }\n  \n  const querySnapshot = await getDocs(q);\n  const documents: any[] = [];\n  \n  querySnapshot.forEach((doc) => {\n    documents.push({ id: doc.id, ...convertTimestamps(doc.data()) });\n  });\n  \n  return documents;\n};\n\n// Specific model operations for the dashboard\nexport const FirebaseModels = {\n  // Users\n  users: {\n    create: (data: any) => createDocument('users', data),\n    findById: (id: string) => getDocument('users', id),\n    findAll: () => getDocuments('users'),\n    update: (id: string, data: any) => updateDocument('users', id, data),\n    delete: (id: string) => deleteDocument('users', id)\n  },\n\n  // AI Insights\n  aiInsights: {\n    create: (data: any) => createDocument('ai_insights', data),\n    findById: (id: string) => getDocument('ai_insights', id),\n    findByUserId: (userId: string, limitCount?: number) => \n      getDocuments('ai_insights', [{ field: 'user_id', operator: '==', value: userId }], 'created_at', 'desc', limitCount),\n    findByType: (userId: string, type: string) => \n      getDocuments('ai_insights', [\n        { field: 'user_id', operator: '==', value: userId },\n        { field: 'type', operator: '==', value: type }\n      ]),\n    update: (id: string, data: any) => updateDocument('ai_insights', id, data),\n    delete: (id: string) => deleteDocument('ai_insights', id),\n    \n    getDashboardSummary: async (userId: string) => {\n      const insights = await getDocuments('ai_insights', [{ field: 'user_id', operator: '==', value: userId }]);\n      const activeInsights = insights.filter(insight => insight.status === 'active');\n      \n      return {\n        totalInsights: activeInsights.length,\n        highPriorityCount: activeInsights.filter(insight => insight.priority === 'high').length,\n        actionableCount: activeInsights.filter(insight => insight.actionable).length,\n        recentInsights: activeInsights.slice(0, 5)\n      };\n    }\n  },\n\n  // Products Collection\n  products: {\n    create: (data: any) => createDocument('products', data),\n    findById: (id: string) => getDocument('products', id),\n    findByUserId: (userId: string, limitCount?: number) => \n      getDocuments('products', [{ field: 'user_id', operator: '==', value: userId }], 'created_at', 'desc', limitCount),\n    update: (id: string, data: any) => updateDocument('products', id, data),\n    delete: (id: string) => deleteDocument('products', id),\n    \n    // Get products for dropdown (simplified format)\n    getForDropdown: async (userId: string) => {\n      const products = await getDocuments('products', [{ field: 'user_id', operator: '==', value: userId }], 'created_at', 'desc');\n      return products.map(product => ({\n        id: product.id,\n        name: product.product_name || 'Unnamed Product',\n        price: product.selling_price || 0,\n        quantity: product.quantity || 0,\n        dateAdded: product.created_at,\n        materialCost: product.material_cost || 0,\n        sellingPrice: product.selling_price || 0\n      }));\n    },\n    \n    // Reduce product quantity when sold\n    reduceQuantity: async (productId: string, quantitySold: number) => {\n      const product = await getDocument('products', productId);\n      if (!product) {\n        throw new Error('Product not found');\n      }\n      \n      const currentQuantity = product.quantity || 0;\n      if (currentQuantity < quantitySold) {\n        throw new Error(`Insufficient inventory. Available: ${currentQuantity}, Requested: ${quantitySold}`);\n      }\n      \n      const newQuantity = currentQuantity - quantitySold;\n      return await updateDocument('products', productId, { quantity: newQuantity });\n    },\n    \n    // Find product by name and user (for fallback to business_metrics)\n    findByProductName: async (userId: string, productName: string) => {\n      const products = await getDocuments('products', [\n        { field: 'user_id', operator: '==', value: userId },\n        { field: 'product_name', operator: '==', value: productName }\n      ]);\n      return products[0] || null;\n    }\n  },\n\n  // Sales Collection\n  sales: {\n    create: (data: any) => createDocument('sales', data),\n    findById: (id: string) => getDocument('sales', id),\n    findByUserId: (userId: string, limitCount?: number) => \n      getDocuments('sales', [{ field: 'user_id', operator: '==', value: userId }], 'sale_date', 'desc', limitCount),\n    update: (id: string, data: any) => updateDocument('sales', id, data),\n    delete: (id: string) => deleteDocument('sales', id),\n    \n    // Get sales data for charts\n    getChartData: async (userId: string) => {\n      const sales = await getDocuments('sales', [{ field: 'user_id', operator: '==', value: userId }], 'sale_date', 'asc');\n      return sales.map(sale => ({\n        date: sale.sale_date.split('T')[0],\n        sales: sale.quantity || 0,\n        revenue: (sale.price_per_unit || 0) * (sale.quantity || 0)\n      }));\n    },\n    \n    // Get total sales and growth\n    getTotals: async (userId: string) => {\n      const sales = await getDocuments('sales', [{ field: 'user_id', operator: '==', value: userId }], 'sale_date', 'desc');\n      \n      const totalProductsSold = sales.reduce((sum, sale) => sum + (sale.quantity || 0), 0);\n      const totalRevenue = sales.reduce((sum, sale) => sum + ((sale.price_per_unit || 0) * (sale.quantity || 0)), 0);\n      \n      // Calculate growth (last 7 days vs previous 7 days)\n      const now = new Date();\n      const sevenDaysAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const fourteenDaysAgo = new Date(now.getTime() - 14 * 24 * 60 * 60 * 1000);\n      \n      const recentSales = sales.filter(sale => new Date(sale.sale_date) >= sevenDaysAgo);\n      const previousSales = sales.filter(sale => {\n        const date = new Date(sale.sale_date);\n        return date >= fourteenDaysAgo && date < sevenDaysAgo;\n      });\n      \n      const recentTotal = recentSales.reduce((sum, sale) => sum + ((sale.price_per_unit || 0) * (sale.quantity || 0)), 0);\n      const previousTotal = previousSales.reduce((sum, sale) => sum + ((sale.price_per_unit || 0) * (sale.quantity || 0)), 0);\n      const salesGrowth = previousTotal > 0 ? ((recentTotal - previousTotal) / previousTotal) * 100 : 0;\n      \n      return {\n        totalProductsSold,\n        totalRevenue,\n        salesGrowth: Math.round(salesGrowth * 10) / 10\n      };\n    }\n  },\n\n  // Business Flow Collection\n  businessFlow: {\n    create: (data: any) => createDocument('business_flow', data),\n    findById: (id: string) => getDocument('business_flow', id),\n    findByUserId: (userId: string, limitCount?: number) => \n      getDocuments('business_flow', [{ field: 'user_id', operator: '==', value: userId }], 'created_at', 'desc', limitCount),\n    update: (id: string, data: any) => updateDocument('business_flow', id, data),\n    delete: (id: string) => deleteDocument('business_flow', id),\n    \n    // Get latest business flow for user\n    getLatest: async (userId: string) => {\n      const flows = await getDocuments('business_flow', [{ field: 'user_id', operator: '==', value: userId }], 'created_at', 'desc', 1);\n      return flows.length > 0 ? flows[0] : null;\n    },\n    \n    // Save or update business flow\n    saveOrUpdate: async (userId: string, flowData: any) => {\n      const existingFlow = await getDocuments('business_flow', [{ field: 'user_id', operator: '==', value: userId }], 'created_at', 'desc', 1);\n      \n      if (existingFlow.length > 0) {\n        // Update existing flow\n        return await updateDocument('business_flow', existingFlow[0].id, {\n          ...flowData,\n          updated_at: new Date().toISOString()\n        });\n      } else {\n        // Create new flow\n        return await createDocument('business_flow', {\n          user_id: userId,\n          ...flowData,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        });\n      }\n    }\n  },\n\n  // Business Metrics (keeping for backward compatibility)\n  businessMetrics: {\n    create: (data: any) => createDocument('business_metrics', data),\n    findById: (id: string) => getDocument('business_metrics', id),\n    findByUserId: (userId: string, metricType?: string, limitCount?: number) => {\n      const filters = [{ field: 'user_id', operator: '==', value: userId }];\n      if (metricType) {\n        filters.push({ field: 'metric_type', operator: '==', value: metricType });\n      }\n      return getDocuments('business_metrics', filters, 'date_recorded', 'desc', limitCount);\n    },\n    update: (id: string, data: any) => updateDocument('business_metrics', id, data),\n    delete: (id: string) => deleteDocument('business_metrics', id),\n    \n    getWeeklyGrowth: async (userId: string) => {\n      const metrics = await getDocuments('business_metrics', [\n        { field: 'user_id', operator: '==', value: userId },\n        { field: 'metric_type', operator: '==', value: 'revenue' }\n      ], 'date_recorded', 'desc', 10);\n      \n      if (metrics.length < 2) return 0;\n      \n      const recent = metrics[0].value;\n      const previous = metrics[1].value;\n      \n      if (previous === 0) return 0;\n      \n      return Math.round(((recent - previous) / previous) * 100 * 100) / 100;\n    }\n  },\n\n  // Recommendations\n  recommendations: {\n    create: (data: any) => createDocument('recommendations', data),\n    findById: (id: string) => getDocument('recommendations', id),\n    findByUserId: (userId: string, timeframe?: string) => {\n      const filters = [{ field: 'user_id', operator: '==', value: userId }];\n      if (timeframe) {\n        filters.push({ field: 'timeframe', operator: '==', value: timeframe });\n      }\n      return getDocuments('recommendations', filters, 'priority', 'desc');\n    },\n    update: (id: string, data: any) => updateDocument('recommendations', id, data),\n    delete: (id: string) => deleteDocument('recommendations', id)\n  },\n\n  // Market Trends\n  marketTrends: {\n    create: (data: any) => createDocument('market_trends', data),\n    findById: (id: string) => getDocument('market_trends', id),\n    findActive: () => getDocuments('market_trends', [\n      { field: 'valid_until', operator: '>=', value: new Date() }\n    ], 'confidence_score', 'desc'),\n    update: (id: string, data: any) => updateDocument('market_trends', id, data),\n    delete: (id: string) => deleteDocument('market_trends', id)\n  },\n\n  // Business Profiles\n  businessProfiles: {\n    create: (data: any) => createDocument('business_profiles', data),\n    findById: (id: string) => getDocument('business_profiles', id),\n    findByUserId: (userId: string) => \n      getDocuments('business_profiles', [{ field: 'user_id', operator: '==', value: userId }]),\n    update: (id: string, data: any) => updateDocument('business_profiles', id, data),\n    delete: (id: string) => deleteDocument('business_profiles', id)\n  },\n\n  // Social Accounts\n  socialAccounts: {\n    create: (data: any) => createDocument('social_accounts', data),\n    findById: (id: string) => getDocument('social_accounts', id),\n    findByUserId: (userId: string) => \n      getDocuments('social_accounts', [{ field: 'user_id', operator: '==', value: userId }]),\n    update: (id: string, data: any) => updateDocument('social_accounts', id, data),\n    delete: (id: string) => deleteDocument('social_accounts', id)\n  },\n\n  // Content Posts\n  contentPosts: {\n    create: (data: any) => createDocument('content_posts', data),\n    findById: (id: string) => getDocument('content_posts', id),\n    findByUserId: (userId: string) => \n      getDocuments('content_posts', [{ field: 'user_id', operator: '==', value: userId }], 'created_at', 'desc'),\n    update: (id: string, data: any) => updateDocument('content_posts', id, data),\n    delete: (id: string) => deleteDocument('content_posts', id)\n  }\n};\n","import { FirebaseModels } from './firebase';\n\n// Function to create user-specific data\nexport async function createUserData(userId: string, userInfo: {\n  email: string;\n  displayName?: string;\n  businessName?: string;\n  businessType?: string;\n  location?: string;\n}) {\n  try {\n    console.log(`üå± Creating user data for: ${userId}`);\n    \n    // Create user profile\n    const userProfile = {\n      id: userId,\n      email: userInfo.email,\n      display_name: userInfo.displayName || userInfo.email.split('@')[0],\n      business_name: userInfo.businessName || `${userInfo.displayName || 'User'}'s Business`,\n      business_type: userInfo.businessType || 'artisan',\n      location: userInfo.location || 'Unknown',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    \n    await FirebaseModels.users.create(userProfile);\n    console.log(`‚úÖ Created user profile for ${userId}`);\n    \n    // Create business profile\n    const businessProfile = {\n      id: `business_${userId}`,\n      user_id: userId,\n      business_name: userProfile.business_name,\n      business_type: userProfile.business_type,\n      location: userProfile.location,\n      description: `Welcome to ${userProfile.business_name}! We create beautiful ${userProfile.business_type} products.`,\n      website: '',\n      social_media: {},\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    \n    await FirebaseModels.businessProfiles.create(businessProfile);\n    console.log(`‚úÖ Created business profile for ${userId}`);\n    \n    // Create sample insights for this user\n    const userInsights = sampleInsights.map(insight => ({\n      ...insight,\n      id: `insight_${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      user_id: userId,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }));\n    \n    for (const insight of userInsights) {\n      await FirebaseModels.aiInsights.create(insight);\n    }\n    console.log(`‚úÖ Created ${userInsights.length} insights for ${userId}`);\n    \n    // Create sample business metrics\n    const userMetrics = sampleBusinessMetrics.map(metric => ({\n      ...metric,\n      id: `metric_${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      user_id: userId,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }));\n    \n    for (const metric of userMetrics) {\n      await FirebaseModels.businessMetrics.create(metric);\n    }\n    console.log(`‚úÖ Created ${userMetrics.length} business metrics for ${userId}`);\n    \n    // Create sample recommendations\n    const userRecommendations = sampleRecommendations.map(rec => ({\n      ...rec,\n      id: `rec_${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      user_id: userId,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }));\n    \n    for (const recommendation of userRecommendations) {\n      await FirebaseModels.recommendations.create(recommendation);\n    }\n    console.log(`‚úÖ Created ${userRecommendations.length} recommendations for ${userId}`);\n    \n    console.log(`üéâ Successfully created user data for ${userId}`);\n    return { success: true, userId };\n    \n  } catch (error) {\n    console.error(`‚ùå Error creating user data for ${userId}:`, error);\n    throw error;\n  }\n}\n\n// Sample data for Firebase seeding\nconst sampleUsers = [\n  {\n    email: 'sarah@artisan.com',\n    name: 'Sarah Johnson',\n    business_name: 'Sarah\\'s Ceramic Studio',\n    business_type: 'ceramics',\n    location: 'Portland, OR'\n  },\n  {\n    email: 'mike@handmade.com',\n    name: 'Mike Chen',\n    business_name: 'Handwoven Treasures',\n    business_type: 'textiles',\n    location: 'Seattle, WA'\n  }\n];\n\nconst sampleInsights = [\n  {\n    type: 'trend',\n    title: 'Handmade Ceramics Trending',\n    description: 'Ceramic home decor items are seeing 40% increased demand in your region. Consider expanding your pottery collection.',\n    detailed_description: 'Market analysis shows ceramic vases, bowls, and decorative pieces are trending strongly in urban areas. Social media mentions increased 65% in the past month. Target demographic: 25-45 year olds with disposable income.',\n    priority: 'high',\n    actionable: true,\n    category: 'marketing',\n    confidence: 87,\n    source: 'market_data',\n    tags: ['ceramics', 'home-decor', 'trending', 'pottery'],\n    suggested_actions: [\n      'Create a new ceramic collection',\n      'Update product photography',\n      'Target Instagram marketing',\n      'Partner with home decor influencers'\n    ],\n    estimated_impact: 'high',\n    timeframe: 'short_term',\n    status: 'active'\n  },\n  {\n    type: 'opportunity',\n    title: 'Local Craft Fair Application',\n    description: 'Spring Artisan Market opens applications next week. High foot traffic and perfect for your target audience.',\n    detailed_description: 'The Spring Artisan Market at Central Park attracts 5,000+ visitors over 3 days. Previous vendors report 200-500 sales per event. Application fee: $150. Deadline: March 15th.',\n    priority: 'high',\n    actionable: true,\n    category: 'sales',\n    confidence: 92,\n    source: 'external_trends',\n    tags: ['craft-fair', 'local-market', 'sales-opportunity', 'spring'],\n    suggested_actions: [\n      'Prepare application materials',\n      'Plan booth layout and display',\n      'Create special event pricing',\n      'Order business cards and signage'\n    ],\n    estimated_impact: 'high',\n    timeframe: 'immediate',\n    status: 'active'\n  },\n  {\n    type: 'pricing',\n    title: 'Pricing Optimization Opportunity',\n    description: 'Your handwoven scarves are priced 20% below market average. Consider increasing prices by 15-25%.',\n    detailed_description: 'Competitor analysis shows similar handwoven scarves sell for $45-65. Your current price of $38 leaves room for 20-30% increase while maintaining competitiveness.',\n    priority: 'medium',\n    actionable: true,\n    category: 'finance',\n    confidence: 78,\n    source: 'ai_analysis',\n    tags: ['pricing', 'scarf', 'revenue-optimization', 'market-analysis'],\n    suggested_actions: [\n      'Research competitor pricing',\n      'Test price increase on 2-3 items',\n      'Update pricing strategy',\n      'Communicate value proposition'\n    ],\n    estimated_impact: 'medium',\n    timeframe: 'short_term',\n    status: 'active'\n  },\n  {\n    type: 'inventory',\n    title: 'Inventory Replenishment Alert',\n    description: 'Running low on popular items: ceramic bowls (3 left), handwoven scarves (1 left).',\n    detailed_description: 'Your best-selling ceramic bowls and handwoven scarves are nearly out of stock. These items account for 35% of your monthly revenue.',\n    priority: 'medium',\n    actionable: true,\n    category: 'operations',\n    confidence: 95,\n    source: 'user_behavior',\n    tags: ['inventory', 'restock', 'popular-items', 'revenue-critical'],\n    suggested_actions: [\n      'Order ceramic bowl materials',\n      'Weave additional scarves',\n      'Update inventory tracking',\n      'Consider bulk ordering'\n    ],\n    estimated_impact: 'high',\n    timeframe: 'immediate',\n    status: 'active'\n  },\n  {\n    type: 'recommendation',\n    title: 'Social Media Strategy Enhancement',\n    description: 'Your Instagram engagement increased 30% this month. Double down on video content and behind-the-scenes posts.',\n    detailed_description: 'Video posts receive 3x more engagement than static images. Behind-the-scenes content showing your creative process gets 40% more saves and shares.',\n    priority: 'medium',\n    actionable: true,\n    category: 'marketing',\n    confidence: 82,\n    source: 'user_behavior',\n    tags: ['social-media', 'instagram', 'video-content', 'engagement'],\n    suggested_actions: [\n      'Create weekly process videos',\n      'Post behind-the-scenes content',\n      'Use trending hashtags',\n      'Engage with artisan community'\n    ],\n    estimated_impact: 'medium',\n    timeframe: 'short_term',\n    status: 'active'\n  },\n  {\n    type: 'market',\n    title: 'Seasonal Opportunity: Wedding Season',\n    description: 'Wedding season starts in 2 months. Custom ceramic gifts and decorations are in high demand.',\n    detailed_description: 'March-June is peak wedding season. Custom ceramic centerpieces, guest favors, and decorative items see 200% demand increase. Average order value: $300-800.',\n    priority: 'high',\n    actionable: true,\n    category: 'sales',\n    confidence: 89,\n    source: 'market_data',\n    tags: ['wedding', 'seasonal', 'custom-orders', 'high-value'],\n    suggested_actions: [\n      'Create wedding collection',\n      'Update website with custom options',\n      'Reach out to wedding planners',\n      'Prepare sample packages'\n    ],\n    estimated_impact: 'high',\n    timeframe: 'short_term',\n    status: 'active'\n  }\n];\n\nconst sampleMetrics = [\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 2500.00, unit: 'USD', date_recorded: new Date('2024-01-15') },\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 2800.00, unit: 'USD', date_recorded: new Date('2024-01-22') },\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 3200.00, unit: 'USD', date_recorded: new Date('2024-01-29') },\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 3500.00, unit: 'USD', date_recorded: new Date('2024-02-05') },\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 3800.00, unit: 'USD', date_recorded: new Date('2024-02-12') },\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 4200.00, unit: 'USD', date_recorded: new Date('2024-02-19') },\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 4500.00, unit: 'USD', date_recorded: new Date('2024-02-26') },\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 4800.00, unit: 'USD', date_recorded: new Date('2024-03-05') },\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 5200.00, unit: 'USD', date_recorded: new Date('2024-03-12') },\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 5500.00, unit: 'USD', date_recorded: new Date('2024-03-19') },\n  { metric_type: 'revenue', metric_name: 'Monthly Revenue', value: 5800.00, unit: 'USD', date_recorded: new Date('2024-03-26') },\n  { metric_type: 'orders', metric_name: 'Daily Orders', value: 12, unit: 'count', date_recorded: new Date('2024-01-29') },\n  { metric_type: 'orders', metric_name: 'Daily Orders', value: 15, unit: 'count', date_recorded: new Date('2024-02-15') },\n  { metric_type: 'orders', metric_name: 'Daily Orders', value: 18, unit: 'count', date_recorded: new Date('2024-03-10') },\n  { metric_type: 'customers', metric_name: 'New Customers', value: 8, unit: 'count', date_recorded: new Date('2024-01-29') },\n  { metric_type: 'customers', metric_name: 'New Customers', value: 12, unit: 'count', date_recorded: new Date('2024-02-15') },\n  { metric_type: 'customers', metric_name: 'New Customers', value: 15, unit: 'count', date_recorded: new Date('2024-03-10') },\n  { metric_type: 'social', metric_name: 'Instagram Followers', value: 2847, unit: 'count', date_recorded: new Date('2024-03-26') },\n  { metric_type: 'social', metric_name: 'Instagram Engagement Rate', value: 4.2, unit: 'percent', date_recorded: new Date('2024-03-26') },\n  { metric_type: 'website', metric_name: 'Monthly Visitors', value: 2340, unit: 'count', date_recorded: new Date('2024-03-26') },\n  { metric_type: 'website', metric_name: 'Conversion Rate', value: 2.8, unit: 'percent', date_recorded: new Date('2024-03-26') },\n  { metric_type: 'website', metric_name: 'Average Order Value', value: 85.50, unit: 'USD', date_recorded: new Date('2024-03-26') }\n];\n\nconst sampleRecommendations = [\n  {\n    title: 'Apply for Spring Artisan Market',\n    description: 'Submit application for the upcoming Spring Artisan Market to increase local visibility and sales.',\n    category: 'sales',\n    priority: 'high',\n    timeframe: 'immediate',\n    status: 'pending',\n    estimated_effort: 'medium',\n    estimated_impact: 'high',\n    suggested_actions: ['Prepare application materials', 'Plan booth layout', 'Create event pricing']\n  },\n  {\n    title: 'Restock Popular Inventory Items',\n    description: 'Order materials and create additional ceramic bowls and handwoven scarves to meet demand.',\n    category: 'operations',\n    priority: 'high',\n    timeframe: 'immediate',\n    status: 'pending',\n    estimated_effort: 'high',\n    estimated_impact: 'high',\n    suggested_actions: ['Order ceramic materials', 'Schedule weaving time', 'Update inventory system']\n  },\n  {\n    title: 'Update Pricing Strategy',\n    description: 'Research competitor pricing and implement price increases for handwoven scarves.',\n    category: 'finance',\n    priority: 'medium',\n    timeframe: 'short_term',\n    status: 'pending',\n    estimated_effort: 'low',\n    estimated_impact: 'medium',\n    suggested_actions: ['Research competitor prices', 'Test price increases', 'Update website pricing']\n  },\n  {\n    title: 'Create Wedding Season Collection',\n    description: 'Develop a specialized collection of ceramic items for wedding season demand.',\n    category: 'sales',\n    priority: 'high',\n    timeframe: 'short_term',\n    status: 'pending',\n    estimated_effort: 'high',\n    estimated_impact: 'high',\n    suggested_actions: ['Design wedding items', 'Create samples', 'Update website', 'Contact wedding planners']\n  },\n  {\n    title: 'Enhance Social Media Video Content',\n    description: 'Increase video content production to boost engagement and reach.',\n    category: 'marketing',\n    priority: 'medium',\n    timeframe: 'short_term',\n    status: 'pending',\n    estimated_effort: 'medium',\n    estimated_impact: 'medium',\n    suggested_actions: ['Plan video content', 'Create behind-the-scenes videos', 'Use trending hashtags']\n  },\n  {\n    title: 'Develop Wholesale Partnerships',\n    description: 'Establish relationships with local retailers and online marketplaces for wholesale distribution.',\n    category: 'growth',\n    priority: 'low',\n    timeframe: 'long_term',\n    status: 'pending',\n    estimated_effort: 'high',\n    estimated_impact: 'high',\n    suggested_actions: ['Research potential partners', 'Create wholesale catalog', 'Develop pricing structure']\n  }\n];\n\nconst sampleMarketTrends = [\n  {\n    trend_type: 'product',\n    title: 'Ceramic Home Decor Trending',\n    description: 'Handmade ceramic home decor items are experiencing significant growth in urban markets.',\n    impact_level: 'high',\n    confidence_score: 85,\n    source: 'Social Media Analytics',\n    region: 'North America',\n    category: 'products',\n    tags: ['ceramics', 'home-decor', 'handmade', 'trending'],\n    valid_from: new Date('2024-01-01'),\n    valid_until: new Date('2024-06-30')\n  },\n  {\n    trend_type: 'seasonal',\n    title: 'Wedding Season Demand',\n    description: 'Custom ceramic and textile items for weddings show 200% increase in demand during spring months.',\n    impact_level: 'high',\n    confidence_score: 90,\n    source: 'Market Research',\n    region: 'North America',\n    category: 'seasonal',\n    tags: ['wedding', 'seasonal', 'custom', 'ceramics'],\n    valid_from: new Date('2024-03-01'),\n    valid_until: new Date('2024-06-30')\n  },\n  {\n    trend_type: 'competitor',\n    title: 'Local Artisan Pricing Increase',\n    description: 'Local artisans in the region have increased pricing by 15% on average due to material cost increases.',\n    impact_level: 'medium',\n    confidence_score: 75,\n    source: 'Competitor Analysis',\n    region: 'Pacific Northwest',\n    category: 'competitor',\n    tags: ['pricing', 'competitor', 'market-analysis'],\n    valid_from: new Date('2024-01-15'),\n    valid_until: new Date('2024-12-31')\n  },\n  {\n    trend_type: 'product',\n    title: 'Sustainable Textiles Rising',\n    description: 'Eco-friendly and sustainable textile products are gaining popularity among conscious consumers.',\n    impact_level: 'medium',\n    confidence_score: 80,\n    source: 'Consumer Research',\n    region: 'Global',\n    category: 'products',\n    tags: ['sustainable', 'textiles', 'eco-friendly', 'conscious-consumer'],\n    valid_from: new Date('2024-02-01'),\n    valid_until: new Date('2024-12-31')\n  },\n  {\n    trend_type: 'seasonal',\n    title: 'Holiday Gift Season Preparation',\n    description: 'Artisan gifts see 300% demand increase during November-December holiday season.',\n    impact_level: 'high',\n    confidence_score: 88,\n    source: 'Historical Sales Data',\n    region: 'North America',\n    category: 'seasonal',\n    tags: ['holiday', 'gifts', 'seasonal', 'high-demand'],\n    valid_from: new Date('2024-11-01'),\n    valid_until: new Date('2024-12-31')\n  }\n];\n\nexport async function seedFirebaseDatabase(): Promise<void> {\n  try {\n    console.log('üå± Starting Firebase database seeding...');\n    \n    // Create sample users\n    const users = [];\n    for (const userData of sampleUsers) {\n      const user = await FirebaseModels.users.create(userData);\n      users.push(user);\n      console.log(`‚úÖ Created user: ${user.name}`);\n    }\n    \n    // Use the first user for sample data\n    const userId = users[0].id;\n    \n    // Create sample insights\n    for (const insightData of sampleInsights) {\n      await FirebaseModels.aiInsights.create({ ...insightData, user_id: userId });\n    }\n    console.log(`‚úÖ Created ${sampleInsights.length} AI insights`);\n    \n    // Create sample business metrics\n    for (const metricData of sampleMetrics) {\n      await FirebaseModels.businessMetrics.create({ ...metricData, user_id: userId });\n    }\n    console.log(`‚úÖ Created ${sampleMetrics.length} business metrics`);\n    \n    // Create sample recommendations\n    for (const recData of sampleRecommendations) {\n      await FirebaseModels.recommendations.create({ ...recData, user_id: userId });\n    }\n    console.log(`‚úÖ Created ${sampleRecommendations.length} recommendations`);\n    \n    // Create sample market trends\n    for (const trendData of sampleMarketTrends) {\n      await FirebaseModels.marketTrends.create(trendData);\n    }\n    console.log(`‚úÖ Created ${sampleMarketTrends.length} market trends`);\n    \n    console.log('üéâ Firebase database seeding completed successfully!');\n  } catch (error) {\n    console.error('‚ùå Firebase database seeding failed:', error);\n    throw error;\n  }\n}\n\n","import { RequestHandler, Request, Response, NextFunction } from 'express';\nimport { createUserData } from '../database/firebase-seed';\n\n// Extend Request interface to include userId\ninterface AuthenticatedRequest extends Request {\n  userId?: string;\n}\n\n// Middleware to extract user ID from request\nexport const extractUserId = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  // Try to get user ID from various sources\n  let userId = req.params.userId || req.query.userId as string || req.headers['x-user-id'] as string;\n  \n  // If no user ID provided, use default for testing\n  if (!userId || userId === 'default-user') {\n    userId = '00000000-0000-0000-0000-000000000001';\n  }\n  \n  // Validate user ID format (accept both UUIDs and Firebase UIDs)\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n  const firebaseUidRegex = /^[a-zA-Z0-9]{28}$/; // Firebase UIDs are 28 characters long\n  \n  if (!userId.match(uuidRegex) && !userId.match(firebaseUidRegex)) {\n    userId = '00000000-0000-0000-0000-000000000001';\n  }\n  \n  req.userId = userId;\n  next();\n};\n\n\n// Get dashboard data for a user\nexport const getDashboardData: RequestHandler = async (req: AuthenticatedRequest, res) => {\n  try {\n    console.log('Dashboard API called for user:', req.params.userId);\n    \n    // Lazy import Firebase modules after environment variables are loaded\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    // Get user ID from the request (set by middleware)\n    const userId = req.userId || '00000000-0000-0000-0000-000000000001';\n\n    // Simple quota check - for demo purposes, simulate quota exceeded for certain users\n    const isQuotaExceeded = userId === 'quota-exceeded-user' || Math.random() < 0.1; // 10% chance for demo\n    \n    if (isQuotaExceeded) {\n      return res.status(429).json({\n        error: 'QUOTA_EXCEEDED',\n        message: 'AI recommendations quota exceeded. Please try again tomorrow.'\n      });\n    }\n    \n    // Check if Firebase is configured and accessible\n    console.log('Firebase configured:', isFirebaseConfigured());\n    \n    if (!isFirebaseConfigured()) {\n      console.log('Firebase not configured, returning empty data');\n      const emptyData = {\n        insights: [],\n        summary: {\n          totalInsights: 0,\n          highPriorityCount: 0,\n          actionableCount: 0,\n          weeklyGrowth: 0,\n          topCategories: []\n        },\n        recommendations: {\n          immediate: [],\n          shortTerm: [],\n          longTerm: []\n        },\n        marketTrends: {\n          trendingProducts: [],\n          seasonalOpportunities: [],\n          competitorInsights: []\n        }\n      };\n      return res.json(emptyData);\n    }\n    \n    const isHealthy = await healthCheck();\n    console.log('Firebase health check:', isHealthy);\n    \n    if (!isHealthy) {\n      console.log('Firebase not healthy, returning empty data');\n      const emptyData = {\n        insights: [],\n        summary: {\n          totalInsights: 0,\n          highPriorityCount: 0,\n          actionableCount: 0,\n          weeklyGrowth: 0,\n          topCategories: []\n        },\n        recommendations: {\n          immediate: [],\n          shortTerm: [],\n          longTerm: []\n        },\n        marketTrends: {\n          trendingProducts: [],\n          seasonalOpportunities: [],\n          competitorInsights: []\n        }\n      };\n      return res.json(emptyData);\n    }\n    \n    // Try to get data from separate collections first, fallback to business_metrics\n    let products = [];\n    let sales = [];\n    let businessMetrics = [];\n    \n    try {\n      products = await FirebaseModels.products.findByUserId(userId);\n      sales = await FirebaseModels.sales.findByUserId(userId);\n      \n      // Combine all data for backward compatibility\n      businessMetrics = [\n        ...products.map(p => ({ ...p, metric_type: 'products' })),\n        ...sales.map(s => ({ ...s, metric_type: 'sales' }))\n      ];\n    } catch (error) {\n      \n      // Fallback to business_metrics collection\n      businessMetrics = await FirebaseModels.businessMetrics.findByUserId(userId);\n    }\n    \n    // Get existing insights from stored metrics (no auto-generation)\n    const insights = await getInsightsFromMetrics(userId);\n    \n    // Calculate summary from generated insights\n    const totalInsights = insights.length;\n    const highPriorityCount = insights.filter(i => i.priority === 'high').length;\n    const actionableCount = insights.filter(i => i.actionable).length;\n    \n    // Get top categories\n    const categoryCount = insights.reduce((acc: any, insight) => {\n      acc[insight.category] = (acc[insight.category] || 0) + 1;\n      return acc;\n    }, {});\n    const topCategories = Object.entries(categoryCount)\n      .sort(([,a], [,b]) => (b as number) - (a as number))\n      .slice(0, 3)\n      .map(([category]) => category);\n    \n    // Calculate weekly growth from metrics\n    const weeklyGrowth = await FirebaseModels.businessMetrics.getWeeklyGrowth(userId);\n    \n    // No automatic AI recommendations generation - only manual or after events\n    const recommendations = {\n      immediate: [],\n      shortTerm: [],\n      longTerm: []\n    };\n    \n    // Generate market trends based on metrics\n    const marketTrends = generateMarketTrendsFromMetrics(businessMetrics);\n\n    // Store insights as business metrics for persistence\n    await storeInsightsAsMetrics(userId, insights);\n\n    const dashboardData = {\n      insights: insights,\n      summary: {\n        totalInsights,\n        highPriorityCount,\n        actionableCount,\n        weeklyGrowth: weeklyGrowth || 0,\n        topCategories\n      },\n      recommendations: recommendations,\n      marketTrends: marketTrends,\n      businessMetrics: businessMetrics // All data is now stored as business metrics\n    };\n\n    res.json(dashboardData);\n  } catch (error) {\n    console.error('Dashboard API error:', error);\n    console.error('Error stack:', error.stack);\n    \n    // Return detailed error information for debugging\n    res.status(500).json({ \n      error: 'Failed to fetch dashboard data',\n      details: error.message,\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,\n      debug: {\n        userId: req.params.userId,\n        timestamp: new Date().toISOString(),\n        environment: process.env.NODE_ENV,\n        firebaseConfig: {\n          FIREBASE_API_KEY: process.env.FIREBASE_API_KEY ? 'Set' : 'Not set',\n          FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID ? 'Set' : 'Not set'\n        }\n      }\n    });\n  }\n};\n\n// Get AI insights for a user\nexport const getInsights: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    const userId = req.params.userId || '00000000-0000-0000-0000-000000000001';\n    const { type, limit = 50, offset = 0 } = req.query;\n    \n    // Check if Firebase is configured and accessible\n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      // Return empty array when Firebase is not configured or not accessible\n      return res.json([]);\n    }\n    \n    let insights;\n    if (type) {\n      insights = await FirebaseModels.aiInsights.findByType(userId, type as string);\n    } else {\n      const limitCount = limit ? parseInt(limit as string) : 50;\n      insights = await FirebaseModels.aiInsights.findByUserId(userId, limitCount);\n    }\n    \n    res.json(insights);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch insights' });\n  }\n};\n\n// Create a new AI insight\nexport const createInsight: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    const userId = req.params.userId || '00000000-0000-0000-0000-000000000001';\n    \n    // Check if Firebase is configured and accessible\n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.status(503).json({ error: 'Firebase not available' });\n    }\n    \n    const insightData = {\n      ...req.body,\n      user_id: userId,\n      status: 'active'\n    };\n    \n    const insight = await FirebaseModels.aiInsights.create(insightData);\n    res.status(201).json(insight);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to create insight' });\n  }\n};\n\n// Update insight status\nexport const updateInsightStatus: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    const { insightId } = req.params;\n    const { status } = req.body;\n    \n    // Check if Firebase is configured and accessible\n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.status(503).json({ error: 'Firebase not available' });\n    }\n    \n    const insight = await FirebaseModels.aiInsights.update(insightId, { status });\n    if (!insight) {\n      return res.status(404).json({ error: 'Insight not found' });\n    }\n    \n    res.json(insight);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to update insight status' });\n  }\n};\n\n// Manually generate new AI insights\nexport const generateInsights: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    const userId = req.params.userId || '00000000-0000-0000-0000-000000000001';\n    \n    // Check if Firebase is configured and accessible\n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.status(503).json({ error: 'Firebase not available' });\n    }\n    \n    // Get current business metrics\n    let products = [];\n    let sales = [];\n    let businessMetrics = [];\n    \n    try {\n      products = await FirebaseModels.products.findByUserId(userId);\n      sales = await FirebaseModels.sales.findByUserId(userId);\n      \n      // Combine all data for backward compatibility\n      businessMetrics = [\n        ...products.map(p => ({ ...p, metric_type: 'products' })),\n        ...sales.map(s => ({ ...s, metric_type: 'sales' }))\n      ];\n    } catch (error) {\n      \n      // Fallback to business_metrics collection\n      businessMetrics = await FirebaseModels.businessMetrics.findByUserId(userId);\n    }\n    \n    // Generate new AI insights based on current business metrics\n    const newInsights = await generateInsightsFromMetrics(userId, businessMetrics);\n    \n    // Store the new insights in the database\n    const storedInsights = [];\n    for (const insight of newInsights) {\n      try {\n        const storedInsight = await FirebaseModels.aiInsights.create({\n          ...insight,\n          user_id: userId,\n          status: 'active',\n          generated_at: new Date().toISOString()\n        });\n        storedInsights.push(storedInsight);\n      } catch (error) {\n        // Skip storing this insight if it fails\n      }\n    }\n    \n    res.json({\n      message: 'AI insights generated successfully',\n      insights: storedInsights,\n      count: storedInsights.length\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to generate insights' });\n  }\n};\n\n// Get business metrics\nexport const getBusinessMetrics: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    const userId = req.params.userId || '00000000-0000-0000-0000-000000000001';\n    const { metricType, limit = 100 } = req.query;\n    \n    // Check if Firebase is configured and accessible\n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.json([]);\n    }\n    \n    const limitCount = limit ? parseInt(limit as string) : 100;\n    const metrics = await FirebaseModels.businessMetrics.findByUserId(\n      userId, \n      metricType as string, \n      limitCount\n    );\n    \n    res.json(metrics);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch business metrics' });\n  }\n};\n\n// Create business metric\nexport const createBusinessMetric: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    const userId = req.params.userId || '00000000-0000-0000-0000-000000000001';\n    \n    // Check if Firebase is configured and accessible\n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.status(503).json({ error: 'Firebase not available' });\n    }\n    \n    const metricData = {\n      ...req.body,\n      user_id: userId\n    };\n    \n    const metric = await FirebaseModels.businessMetrics.create(metricData);\n    res.status(201).json(metric);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to create business metric' });\n  }\n};\n\n// Get recommendations\nexport const getRecommendations: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    const userId = req.params.userId || '00000000-0000-0000-0000-000000000001';\n    const { timeframe } = req.query;\n    \n    // Check if Firebase is configured and accessible\n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.json([]);\n    }\n    \n    const recommendations = await FirebaseModels.recommendations.findByUserId(\n      userId, \n      timeframe as string\n    );\n    \n    res.json(recommendations);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch recommendations' });\n  }\n};\n\n// Update recommendation status\nexport const updateRecommendationStatus: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    const { recommendationId } = req.params;\n    const { status } = req.body;\n    \n    // Check if Firebase is configured and accessible\n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.status(503).json({ error: 'Firebase not available' });\n    }\n    \n    const recommendation = await FirebaseModels.recommendations.update(recommendationId, { status });\n    if (!recommendation) {\n      return res.status(404).json({ error: 'Recommendation not found' });\n    }\n    \n    res.json(recommendation);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to update recommendation status' });\n  }\n};\n\n// Get market trends\nexport const getMarketTrends: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    // Check if Firebase is configured and accessible\n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.json([]);\n    }\n    \n    const trends = await FirebaseModels.marketTrends.findActive();\n    res.json(trends);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch market trends' });\n  }\n};\n\n// Simple test endpoint for debugging\nexport const testEndpoint: RequestHandler = async (req, res) => {\n  try {\n    // Test Firebase configuration\n    const { isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    const debugInfo = {\n      message: 'Dashboard API is working',\n      timestamp: new Date().toISOString(),\n      userId: req.params.userId,\n      environment: process.env.NODE_ENV,\n      firebaseConfig: {\n        FIREBASE_API_KEY: process.env.FIREBASE_API_KEY ? 'Set' : 'Not set',\n        FIREBASE_AUTH_DOMAIN: process.env.FIREBASE_AUTH_DOMAIN ? 'Set' : 'Not set',\n        FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID ? 'Set' : 'Not set',\n        FIREBASE_STORAGE_BUCKET: process.env.FIREBASE_STORAGE_BUCKET ? 'Set' : 'Not set',\n        FIREBASE_MESSAGING_SENDER_ID: process.env.FIREBASE_MESSAGING_SENDER_ID ? 'Set' : 'Not set',\n        FIREBASE_APP_ID: process.env.FIREBASE_APP_ID ? 'Set' : 'Not set'\n      },\n      firebaseStatus: {\n        isConfigured: isFirebaseConfigured(),\n        isHealthy: isFirebaseConfigured() ? await healthCheck() : false\n      }\n    };\n    \n    res.json(debugInfo);\n  } catch (error) {\n    res.status(500).json({ \n      error: 'Test endpoint failed', \n      details: error.message,\n      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\n    });\n  }\n};\n\n// Health check\nexport const healthCheckEndpoint: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    if (!isFirebaseConfigured()) {\n      return res.status(503).json({ \n        status: 'unhealthy', \n        reason: 'Firebase not configured',\n        timestamp: new Date().toISOString() \n      });\n    }\n    \n    const isHealthy = await healthCheck();\n    \n    if (isHealthy) {\n      res.json({ status: 'healthy', timestamp: new Date().toISOString() });\n    } else {\n      res.status(503).json({ status: 'unhealthy', timestamp: new Date().toISOString() });\n    }\n  } catch (error) {\n    res.status(503).json({ status: 'unhealthy', error: error.message });\n  }\n};\n\n// Seed database with sample data\nexport const seedDatabase: RequestHandler = async (req, res) => {\n  try {\n    // Lazy import Firebase modules after environment variables are loaded\n    const { isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    // Check if Firebase is configured and accessible\n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.status(503).json({ error: 'Firebase not available' });\n    }\n    \n    const { seedFirebaseDatabase } = await import('../database/firebase-seed');\n    await seedFirebaseDatabase();\n    res.json({ message: 'Firebase database seeded successfully with sample data' });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to seed Firebase database' });\n  }\n};\n\n// Create user data endpoint\nexport const createUserDataEndpoint: RequestHandler = async (req, res) => {\n  try {\n    const { userId, userInfo } = req.body;\n    \n    if (!userId) {\n      return res.status(400).json({ error: 'User ID is required' });\n    }\n    \n    if (!userInfo || !userInfo.email) {\n      return res.status(400).json({ error: 'User info with email is required' });\n    }\n    \n    const result = await createUserData(userId, userInfo);\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to create user data' });\n  }\n};\n\n// Add business metric endpoint\nexport const addBusinessMetric: RequestHandler = async (req: AuthenticatedRequest, res) => {\n  try {\n    const { userId } = req.params;\n    const { metricType, value, date, productName, price, quantity, materialCost, sellingPrice } = req.body;\n    \n    if (!userId) {\n      return res.status(400).json({ error: 'User ID is required' });\n    }\n    \n    if (!metricType || value === undefined) {\n      return res.status(400).json({ error: 'Metric type and value are required' });\n    }\n    \n    // Lazy import Firebase modules\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.status(503).json({ error: 'Firebase not available' });\n    }\n    \n    let result;\n    \n    if (metricType === 'products') {\n      // Save to products collection\n      const productData = {\n        user_id: userId,\n        product_name: productName || '',\n        quantity: quantity ? parseInt(quantity) : 0,\n        material_cost: materialCost ? parseFloat(materialCost) : 0,\n        selling_price: sellingPrice ? parseFloat(sellingPrice) : 0,\n        added_date: date || new Date().toISOString()\n      };\n      \n      result = await FirebaseModels.products.create(productData);\n    } else if (metricType === 'sales') {\n      // Validate required fields for sales\n      if (!productName || !quantity || quantity <= 0) {\n        return res.status(400).json({ \n          error: 'Product name and valid quantity are required for sales' \n        });\n      }\n      \n      // Find the product to reduce inventory\n      let productToUpdate = null;\n      \n      try {\n        // Try to find product in products collection first\n        productToUpdate = await FirebaseModels.products.findByProductName(userId, productName);\n        \n        if (!productToUpdate) {\n          // Fallback: find in business_metrics collection\n          const fallbackProducts = await FirebaseModels.businessMetrics.findByUserId(userId, 'products');\n          productToUpdate = fallbackProducts.find(p => p.product_name === productName);\n        }\n        \n        if (!productToUpdate) {\n          return res.status(400).json({ \n            error: `Product \"${productName}\" not found in inventory` \n          });\n        }\n        \n        // Check if sufficient inventory\n        const currentQuantity = productToUpdate.quantity || 0;\n        const quantityToSell = parseInt(quantity);\n        \n        if (currentQuantity < quantityToSell) {\n          return res.status(400).json({ \n            error: `Insufficient inventory. Available: ${currentQuantity}, Requested: ${quantityToSell}` \n          });\n        }\n        \n        // Reduce inventory - check if it's from products collection or business_metrics\n        if (productToUpdate.id && !productToUpdate.id.startsWith('metric_')) {\n          // This is a products collection ID (Firebase auto-generated IDs don't start with 'metric_')\n          await FirebaseModels.products.reduceQuantity(productToUpdate.id, quantityToSell);\n        } else {\n          // Update in business_metrics collection\n          const newQuantity = currentQuantity - quantityToSell;\n          await FirebaseModels.businessMetrics.update(productToUpdate.id, { \n            quantity: newQuantity \n          });\n        }\n        \n      } catch (inventoryError) {\n        return res.status(500).json({ \n          error: 'Failed to update inventory',\n          details: inventoryError.message \n        });\n      }\n      \n      // Save to sales collection\n      const saleData = {\n        user_id: userId,\n        product_name: productName || '',\n        quantity: quantity ? parseInt(quantity) : 0,\n        price_per_unit: price ? parseFloat(price) : 0,\n        sale_date: date || new Date().toISOString()\n      };\n      \n      result = await FirebaseModels.sales.create(saleData);\n    } else {\n      // Fallback to business_metrics for other types\n      const metricData = {\n        user_id: userId,\n        metric_type: metricType,\n        value: parseFloat(value),\n        date_recorded: date || new Date().toISOString(),\n        product_name: productName || '',\n        price: price ? parseFloat(price) : 0,\n        quantity: quantity ? parseInt(quantity) : 0,\n        material_cost: materialCost ? parseFloat(materialCost) : 0,\n        selling_price: sellingPrice ? parseFloat(sellingPrice) : 0\n      };\n      \n      result = await FirebaseModels.businessMetrics.create(metricData);\n    }\n    \n    res.json({ \n      success: true, \n      message: `${metricType === 'products' ? 'Product' : metricType === 'sales' ? 'Sale' : 'Metric'} added successfully`, \n      data: result \n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to add business metric' });\n  }\n};\n\n// Get products for a user (for sales dropdown)\nexport const getUserProducts: RequestHandler = async (req: AuthenticatedRequest, res) => {\n  try {\n    const { userId } = req.params;\n    \n    if (!userId) {\n      return res.status(400).json({ error: 'User ID is required' });\n    }\n    \n    // Lazy import Firebase modules\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.status(503).json({ error: 'Firebase not available' });\n    }\n    \n    try {\n      // Try to get products from the products collection first\n      const products = await FirebaseModels.products.getForDropdown(userId);\n      \n      res.json({ \n        success: true, \n        products: products \n      });\n    } catch (error) {\n      \n      // Fallback to business_metrics collection if products collection fails\n      const fallbackProducts = await FirebaseModels.businessMetrics.findByUserId(userId, 'products');\n      \n      // Format products for dropdown\n      const formattedProducts = fallbackProducts.map(product => ({\n        id: product.id,\n        name: product.product_name || 'Unnamed Product',\n        price: product.selling_price || 0,\n        quantity: product.quantity || 0,\n        dateAdded: product.created_at,\n        materialCost: product.material_cost || 0,\n        sellingPrice: product.selling_price || 0\n      }));\n      \n      res.json({ \n        success: true, \n        products: formattedProducts \n      });\n    }\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch products' });\n  }\n};\n\n// Get all business metrics for a user\nexport const getAllBusinessMetrics: RequestHandler = async (req: AuthenticatedRequest, res) => {\n  try {\n    const { userId } = req.params;\n    \n    if (!userId) {\n      return res.status(400).json({ error: 'User ID is required' });\n    }\n    \n    // Lazy import Firebase modules\n    const { FirebaseModels, isFirebaseConfigured, healthCheck } = await import('../database/firebase');\n    \n    if (!isFirebaseConfigured() || !(await healthCheck())) {\n      return res.status(503).json({ error: 'Firebase not available' });\n    }\n    \n    // Get all business metrics for the user\n    const businessMetrics = await FirebaseModels.businessMetrics.findByUserId(userId);\n    \n    // Separate regular metrics from AI insights\n    const regularMetrics = businessMetrics.filter(metric => metric.metric_type !== 'ai_insight');\n    const aiInsights = businessMetrics.filter(metric => metric.metric_type === 'ai_insight');\n    \n    res.json({\n      success: true,\n      data: {\n        businessMetrics: regularMetrics,\n        aiInsights: aiInsights,\n        total: businessMetrics.length\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to get business metrics' });\n  }\n};\n\n// Helper function to generate AI insights from business metrics\nasync function generateInsightsFromMetrics(userId: string, metrics: any[]): Promise<any[]> {\n  const insights = [];\n  const currentDate = new Date().toISOString();\n  \n  // Filter out AI insight metrics to avoid circular generation\n  const businessMetrics = metrics.filter(metric => metric.metric_type !== 'ai_insight');\n  \n  // Group metrics by type\n  const metricsByType = businessMetrics.reduce((acc, metric) => {\n    if (!acc[metric.metric_type]) {\n      acc[metric.metric_type] = [];\n    }\n    acc[metric.metric_type].push(metric);\n    return acc;\n  }, {});\n  \n  // Generate revenue insights\n  if (metricsByType.revenue && metricsByType.revenue.length > 0) {\n    const revenueMetrics = metricsByType.revenue.sort((a, b) => new Date(b.date_recorded).getTime() - new Date(a.date_recorded).getTime());\n    const latestRevenue = Number(revenueMetrics[0].value);\n    const previousRevenue = Number(revenueMetrics[1]?.value || latestRevenue);\n    const growthRate = previousRevenue > 0 ? ((latestRevenue - previousRevenue) / previousRevenue) * 100 : 0;\n    \n    if (growthRate > 20) {\n      insights.push({\n        id: `insight_${userId}_revenue_growth_${Date.now()}`,\n        type: 'trend',\n        title: 'Strong Revenue Growth Detected',\n        description: `Your revenue has grown by ${growthRate.toFixed(1)}% compared to the previous period. This is excellent growth!`,\n        priority: 'high',\n        date: currentDate,\n        actionable: true,\n        category: 'finance',\n        confidence: 90,\n        source: 'ai_analysis',\n        tags: ['revenue', 'growth', 'positive'],\n        suggestedActions: [\n          'Analyze what drove this growth',\n          'Consider scaling successful strategies',\n          'Plan for continued growth'\n        ],\n        estimatedImpact: 'high',\n        timeframe: 'short_term'\n      });\n    } else if (growthRate < -10) {\n      insights.push({\n        id: `insight_${userId}_revenue_decline_${Date.now()}`,\n        type: 'alert',\n        title: 'Revenue Decline Alert',\n        description: `Your revenue has decreased by ${Math.abs(growthRate).toFixed(1)}% compared to the previous period. Immediate attention needed.`,\n        priority: 'high',\n        date: currentDate,\n        actionable: true,\n        category: 'finance',\n        confidence: 85,\n        source: 'ai_analysis',\n        tags: ['revenue', 'decline', 'urgent'],\n        suggestedActions: [\n          'Review recent changes in strategy',\n          'Analyze customer feedback',\n          'Consider promotional campaigns'\n        ],\n        estimatedImpact: 'high',\n        timeframe: 'immediate'\n      });\n    }\n  }\n  \n  // Generate customer insights\n  if (metricsByType.customers && metricsByType.customers.length > 0) {\n    const customerMetrics = metricsByType.customers.sort((a, b) => new Date(b.date_recorded).getTime() - new Date(a.date_recorded).getTime());\n    const latestCustomers = Number(customerMetrics[0].value);\n    \n    if (latestCustomers > 100) {\n      insights.push({\n        id: `insight_${userId}_customer_milestone_${Date.now()}`,\n        type: 'opportunity',\n        title: 'Customer Milestone Reached',\n        description: `Congratulations! You've reached ${latestCustomers} customers. This is a significant milestone for your business.`,\n        priority: 'medium',\n        date: currentDate,\n        actionable: true,\n        category: 'growth',\n        confidence: 95,\n        source: 'ai_analysis',\n        tags: ['customers', 'milestone', 'growth'],\n        suggestedActions: [\n          'Celebrate this achievement with your team',\n          'Consider customer appreciation campaigns',\n          'Plan for the next milestone'\n        ],\n        estimatedImpact: 'medium',\n        timeframe: 'short_term'\n      });\n    }\n  }\n  \n  // Generate sales insights\n  if (metricsByType.sales && metricsByType.sales.length > 0) {\n    const salesMetrics = metricsByType.sales.sort((a, b) => new Date(b.date_recorded).getTime() - new Date(a.date_recorded).getTime());\n    const latestSales = Number(salesMetrics[0].value);\n    const avgSales = salesMetrics.reduce((sum, m) => sum + Number(m.value), 0) / salesMetrics.length;\n    \n    if (latestSales > avgSales * 1.5) {\n      insights.push({\n        id: `insight_${userId}_sales_spike_${Date.now()}`,\n        type: 'trend',\n        title: 'Sales Spike Detected',\n        description: `Your recent sales of ${latestSales} are significantly above your average of ${avgSales.toFixed(0)}. Great performance!`,\n        priority: 'medium',\n        date: currentDate,\n        actionable: true,\n        category: 'sales',\n        confidence: 80,\n        source: 'ai_analysis',\n        tags: ['sales', 'spike', 'performance'],\n        suggestedActions: [\n          'Identify what caused this spike',\n          'Replicate successful strategies',\n          'Maintain momentum'\n        ],\n        estimatedImpact: 'medium',\n        timeframe: 'short_term'\n      });\n    }\n  }\n  \n  return insights;\n}\n\n// Helper function to generate AI-powered recommendations using Vertex AI\nasync function generateAIRecommendations(products: any[], sales: any[], businessMetrics: any[]): Promise<any> {\n  try {\n    // Import Vertex AI\n    const { initializeVertexAI } = await import('./ai');\n    const { model } = await initializeVertexAI();\n    \n    if (!model) {\n      return generateRecommendationsFromData(products, sales, businessMetrics);\n    }\n\n    // Prepare business data for AI analysis\n    const businessData = {\n      products: products.map(p => ({\n        name: p.product_name,\n        materialCost: p.material_cost,\n        sellingPrice: p.selling_price,\n        quantity: p.quantity,\n        profitMargin: p.selling_price > 0 ? ((p.selling_price - p.material_cost) / p.selling_price * 100).toFixed(1) : 0\n      })),\n      sales: sales.map(s => ({\n        product: s.product_name,\n        quantity: s.quantity,\n        revenue: s.value || s.price_per_unit * s.quantity,\n        date: s.sale_date || s.date_recorded\n      })),\n      totalRevenue: sales.reduce((sum, s) => sum + (s.value || s.price_per_unit * s.quantity), 0),\n      totalProducts: products.length,\n      totalSales: sales.reduce((sum, s) => sum + s.quantity, 0)\n    };\n\n    const prompt = `You are an AI business advisor for a local artisan marketplace. Analyze the following business data and provide personalized recommendations.\n\nBusiness Data:\n- Products: ${JSON.stringify(businessData.products, null, 2)}\n- Recent Sales: ${JSON.stringify(businessData.sales, null, 2)}\n- Total Revenue: $${businessData.totalRevenue}\n- Total Products: ${businessData.totalProducts}\n- Total Units Sold: ${businessData.totalSales}\n\nPlease provide recommendations in the following JSON format:\n{\n  \"immediate\": [\n    {\n      \"id\": \"rec_1\",\n      \"title\": \"Action Title\",\n      \"description\": \"Detailed description of the recommendation\",\n      \"priority\": \"high|medium|low\",\n      \"category\": \"inventory|sales|pricing|growth|strategy|operations\",\n      \"timeframe\": \"immediate|short_term|long_term\",\n      \"actionable\": true\n    }\n  ],\n  \"shortTerm\": [...],\n  \"longTerm\": [...]\n}\n\nFocus on:\n1. Inventory management (low stock, high-value items)\n2. Sales optimization (pricing, marketing)\n3. Business growth opportunities\n4. Operational improvements\n5. Financial insights\n\nMake recommendations specific, actionable, and based on the actual data provided.`;\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    const text = response.text();\n    \n    // Try to parse JSON response\n    try {\n      const recommendations = JSON.parse(text);\n      return recommendations;\n    } catch (parseError) {\n      // Fallback to basic recommendations\n      return generateRecommendationsFromData(products, sales, businessMetrics);\n    }\n  } catch (error) {\n    // Fallback to basic recommendations\n    return generateRecommendationsFromData(products, sales, businessMetrics);\n  }\n}\n\n// Helper function to generate data-driven recommendations (fallback)\nfunction generateRecommendationsFromData(products: any[], sales: any[], businessMetrics: any[]): any {\n  const recommendations = {\n    immediate: [],\n    shortTerm: [],\n    longTerm: []\n  };\n\n  // Analyze inventory levels\n  const lowStockProducts = products.filter(p => (p.quantity || 0) <= 5);\n  const outOfStockProducts = products.filter(p => (p.quantity || 0) === 0);\n  const highValueProducts = products.filter(p => (p.quantity || 0) * (p.material_cost || 0) > 1000);\n\n  // Analyze sales performance\n  const recentSales = sales.filter(s => {\n    const saleDate = new Date(s.sale_date || s.date_recorded);\n    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n    return saleDate >= sevenDaysAgo;\n  });\n\n  const totalRevenue = recentSales.reduce((sum, sale) => sum + ((sale.price_per_unit || sale.price || 0) * (sale.quantity || 0)), 0);\n  const totalProductsSold = recentSales.reduce((sum, sale) => sum + (sale.quantity || 0), 0);\n\n  // Calculate profit margins\n  const productProfits = products.map(p => {\n    const sellingPrice = p.selling_price || 0;\n    const materialCost = p.material_cost || 0;\n    const margin = sellingPrice > 0 ? ((sellingPrice - materialCost) / sellingPrice) * 100 : 0;\n    return { ...p, profitMargin: margin };\n  });\n\n  const lowMarginProducts = productProfits.filter(p => p.profitMargin < 20 && p.profitMargin > 0);\n  const highMarginProducts = productProfits.filter(p => p.profitMargin > 50);\n\n  // IMMEDIATE RECOMMENDATIONS (Critical actions needed now)\n  if (outOfStockProducts.length > 0) {\n    recommendations.immediate.push({\n      id: 'restock-critical',\n      title: 'Critical: Restock Out-of-Stock Products',\n      description: `${outOfStockProducts.length} products are completely out of stock: ${outOfStockProducts.map(p => p.product_name).join(', ')}`,\n      priority: 'high',\n      category: 'inventory',\n      timeframe: 'immediate',\n      actionable: true\n    });\n  }\n\n  if (lowStockProducts.length > 0) {\n    recommendations.immediate.push({\n      id: 'restock-low',\n      title: 'Alert: Low Stock Warning',\n      description: `${lowStockProducts.length} products are running low on stock. Consider restocking soon.`,\n      priority: 'medium',\n      category: 'inventory',\n      timeframe: 'immediate',\n      actionable: true\n    });\n  }\n\n  if (totalRevenue === 0 && products.length > 0) {\n    recommendations.immediate.push({\n      id: 'no-sales',\n      title: 'Action: No Recent Sales',\n      description: 'You have products in inventory but no sales in the last 7 days. Consider marketing or pricing adjustments.',\n      priority: 'high',\n      category: 'sales',\n      timeframe: 'immediate',\n      actionable: true\n    });\n  }\n\n  // SHORT-TERM RECOMMENDATIONS (Next 1-4 weeks)\n  if (lowMarginProducts.length > 0) {\n    recommendations.shortTerm.push({\n      id: 'improve-margins',\n      title: 'Improve: Profit Margins',\n      description: `${lowMarginProducts.length} products have low profit margins (<20%). Consider increasing prices or reducing costs.`,\n      priority: 'medium',\n      category: 'pricing',\n      timeframe: 'short_term',\n      actionable: true\n    });\n  }\n\n  if (highValueProducts.length > 0) {\n    recommendations.shortTerm.push({\n      id: 'optimize-inventory',\n      title: 'Optimize: High-Value Inventory',\n      description: `You have ‚Çπ${highValueProducts.reduce((sum, p) => sum + (p.quantity * p.material_cost), 0).toLocaleString()} tied up in high-value inventory. Consider sales strategies.`,\n      priority: 'medium',\n      category: 'inventory',\n      timeframe: 'short_term',\n      actionable: true\n    });\n  }\n\n  if (recentSales.length > 0) {\n    const avgOrderValue = totalRevenue / recentSales.length;\n    if (avgOrderValue < 500) {\n      recommendations.shortTerm.push({\n        id: 'increase-aov',\n        title: 'Increase: Average Order Value',\n        description: `Current AOV is ‚Çπ${avgOrderValue.toFixed(0)}. Consider bundling products or upselling strategies.`,\n        priority: 'medium',\n        category: 'sales',\n        timeframe: 'short_term',\n        actionable: true\n      });\n    }\n  }\n\n  // LONG-TERM RECOMMENDATIONS (Next 1-3 months)\n  if (highMarginProducts.length > 0) {\n    recommendations.longTerm.push({\n      id: 'scale-profitable',\n      title: 'Scale: Profitable Products',\n      description: `${highMarginProducts.length} products have excellent profit margins (>50%). Consider expanding production.`,\n      priority: 'low',\n      category: 'growth',\n      timeframe: 'long_term',\n      actionable: true\n    });\n  }\n\n  if (products.length > 10) {\n    recommendations.longTerm.push({\n      id: 'diversify-portfolio',\n      title: 'Analyze: Product Portfolio',\n      description: `You have ${products.length} products. Consider analyzing which ones to focus on and which to phase out.`,\n      priority: 'low',\n      category: 'strategy',\n      timeframe: 'long_term',\n      actionable: true\n    });\n  }\n\n  if (totalProductsSold > 0) {\n    const inventoryTurnover = totalProductsSold / products.reduce((sum, p) => sum + (p.quantity || 0), 1);\n    if (inventoryTurnover < 0.5) {\n      recommendations.longTerm.push({\n        id: 'improve-turnover',\n        title: 'Improve: Inventory Turnover',\n        description: 'Your inventory turnover is low. Consider better demand forecasting and inventory management.',\n        priority: 'medium',\n        category: 'operations',\n        timeframe: 'long_term',\n        actionable: true\n      });\n    }\n  }\n\n  // Add general business recommendations if no specific data\n  if (products.length === 0) {\n    recommendations.immediate.push({\n      id: 'add-products',\n      title: 'Add: Your First Products',\n      description: 'Start by adding products to your inventory to begin tracking your business metrics.',\n      priority: 'high',\n      category: 'onboarding',\n      timeframe: 'immediate',\n      actionable: true\n    });\n  }\n\n  return recommendations;\n}\n\n// Helper function to generate market trends from metrics\nfunction generateMarketTrendsFromMetrics(metrics: any[]): any {\n  const trends = {\n    trendingProducts: [],\n    seasonalOpportunities: [],\n    competitorInsights: []\n  };\n  \n  // Analyze metrics to generate trends\n  const revenueMetrics = metrics.filter(m => m.metric_type === 'revenue');\n  if (revenueMetrics.length > 0) {\n    const avgRevenue = revenueMetrics.reduce((sum, m) => sum + Number(m.value), 0) / revenueMetrics.length;\n    if (avgRevenue > 1000) {\n      trends.trendingProducts.push('Premium products showing strong demand');\n    }\n  }\n  \n  const customerMetrics = metrics.filter(m => m.metric_type === 'customers');\n  if (customerMetrics.length > 0) {\n    const latestCustomers = Number(customerMetrics.sort((a, b) => new Date(b.date_recorded).getTime() - new Date(a.date_recorded).getTime())[0].value);\n    if (latestCustomers > 50) {\n      trends.seasonalOpportunities.push('Customer base growing - consider seasonal promotions');\n    }\n  }\n  \n  return trends;\n}\n\n// Helper function to store insights as business metrics\nasync function storeInsightsAsMetrics(userId: string, insights: any[]): Promise<void> {\n  try {\n    const { FirebaseModels } = await import('../database/firebase');\n    \n    for (const insight of insights) {\n      // Store each insight as a business metric\n      const insightMetric = {\n        id: `insight_metric_${insight.id}`,\n        user_id: userId,\n        metric_type: 'ai_insight',\n        value: insight.confidence || 0, // Use confidence as the numeric value\n        description: insight.description,\n        date_recorded: insight.date,\n        metadata: {\n          insight_id: insight.id,\n          type: insight.type,\n          title: insight.title,\n          priority: insight.priority,\n          actionable: insight.actionable,\n          category: insight.category,\n          source: insight.source,\n          tags: insight.tags || [],\n          suggestedActions: insight.suggestedActions || [],\n          estimatedImpact: insight.estimatedImpact,\n          timeframe: insight.timeframe\n        },\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      \n      // Check if this insight already exists as a metric\n      try {\n        const existingMetric = await FirebaseModels.businessMetrics.findById(insightMetric.id);\n        if (!existingMetric) {\n          await FirebaseModels.businessMetrics.create(insightMetric);\n        }\n      } catch (error) {\n        // If metric doesn't exist, create it\n        await FirebaseModels.businessMetrics.create(insightMetric);\n      }\n    }\n  } catch (error) {\n    // Don't throw error as this is not critical for the main flow\n  }\n}\n\n// Helper function to get insights from business metrics\nasync function getInsightsFromMetrics(userId: string): Promise<any[]> {\n  try {\n    const { FirebaseModels } = await import('../database/firebase');\n    \n    // Get all AI insight metrics for the user\n    const insightMetrics = await FirebaseModels.businessMetrics.findByUserId(userId, 'ai_insight');\n    \n    // Convert metrics back to insights\n    const insights = insightMetrics.map(metric => ({\n      id: metric.metadata?.insight_id || metric.id,\n      type: metric.metadata?.type || 'insight',\n      title: metric.metadata?.title || 'AI Insight',\n      description: metric.description,\n      priority: metric.metadata?.priority || 'medium',\n      date: metric.date_recorded,\n      actionable: metric.metadata?.actionable || false,\n      category: metric.metadata?.category || 'general',\n      confidence: metric.value,\n      source: metric.metadata?.source || 'ai_analysis',\n      tags: Array.isArray(metric.metadata?.tags) ? metric.metadata.tags : [],\n      suggestedActions: Array.isArray(metric.metadata?.suggestedActions) ? metric.metadata.suggestedActions : [],\n      estimatedImpact: metric.metadata?.estimatedImpact || 'medium',\n      timeframe: metric.metadata?.timeframe || 'short_term'\n    }));\n    \n    return insights;\n  } catch (error) {\n    return [];\n  }\n}\n","import { config } from \"dotenv\";\nimport path from \"path\";\n\n// Load environment variables from .env.local (dev) or .env.production (prod)\nconst envFile = process.env.NODE_ENV === 'production' ? '.env.production' : '.env.local';\nconfig({ path: path.resolve(process.cwd(), envFile) });\n\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleSpeechToText, handleSpeechHealth } from \"./routes/speech\";\nimport { handleAIChat, handleAIHealth } from \"./routes/ai\";\nimport { handleImageGenerate, handleImageEnhance, handleImageBgSwap } from \"./routes/images\";\nimport { handleGenerateVideo, handleVideoStatus, handleVideoDownload, handleDebugVeo3 } from \"./routes/videos\";\nimport { handleLocationSearch, generateLocationInsights, reverseGeocode } from \"./routes/location\";\nimport * as businessFlowRoutes from \"./routes/business-flow\";\nimport { \n  generateFlow, \n  saveAnswers, \n  saveFlow, \n  getQuestionnaires, \n  getQuestionnaire, \n  createQuestionnaire, \n  updateQuestionnaire, \n  deleteQuestionnaire,\n  testQuestionnaire\n} from \"./routes/questionnaire\";\nimport * as socialRoutes from \"./routes/social\";\nimport * as dashboardRoutes from \"./routes/dashboard\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json({ limit: '25mb' }));\n  app.use(express.urlencoded({ extended: true, limit: '25mb' }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  // Debug endpoint to check environment variables\n  app.get(\"/api/debug/env\", (_req, res) => {\n    res.json({\n      FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\n      FIREBASE_API_KEY: process.env.FIREBASE_API_KEY ? 'Set' : 'Not set',\n      FIREBASE_AUTH_DOMAIN: process.env.FIREBASE_AUTH_DOMAIN ? 'Set' : 'Not set',\n      FIREBASE_STORAGE_BUCKET: process.env.FIREBASE_STORAGE_BUCKET ? 'Set' : 'Not set',\n      FIREBASE_MESSAGING_SENDER_ID: process.env.FIREBASE_MESSAGING_SENDER_ID ? 'Set' : 'Not set',\n      FIREBASE_APP_ID: process.env.FIREBASE_APP_ID ? 'Set' : 'Not set'\n    });\n  });\n\n  // Debug endpoint to check Firebase configuration at runtime\n  app.get(\"/api/debug/firebase\", async (_req, res) => {\n    try {\n      // Import Firebase module and check configuration\n      const firebase = await import(\"./database/firebase\");\n      \n      // Manually create config to see what's being used\n      const config = {\n        apiKey: process.env.FIREBASE_API_KEY || \"your-api-key\",\n        authDomain: process.env.FIREBASE_AUTH_DOMAIN || \"your-project.firebaseapp.com\",\n        projectId: process.env.FIREBASE_PROJECT_ID || \"your-project-id\",\n        storageBucket: process.env.FIREBASE_STORAGE_BUCKET || \"your-project.appspot.com\",\n        messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID || \"123456789\",\n        appId: process.env.FIREBASE_APP_ID || \"1:123456789:web:abcdef123456\"\n      };\n      \n      res.json({\n        environmentVars: {\n          FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\n          FIREBASE_API_KEY: process.env.FIREBASE_API_KEY ? 'Set' : 'Not set',\n        },\n        firebaseConfig: config,\n        isConfigured: firebase.isFirebaseConfigured()\n      });\n    } catch (error) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n\n  // Speech recognition endpoints\n  app.post(\"/api/speech/recognize\", handleSpeechToText);\n  app.get(\"/api/speech/health\", handleSpeechHealth);\n\n  // AI chat endpoints\n  app.post(\"/api/ai/chat\", handleAIChat);\n  app.get(\"/api/ai/health\", handleAIHealth);\n\n  // Image endpoints\n  app.post(\"/api/images/generate\", handleImageGenerate);\n  app.post(\"/api/images/enhance\", handleImageEnhance);\n  app.post(\"/api/images/bg-swap\", handleImageBgSwap);\n\n  // Video generation endpoints\n  app.post(\"/api/videos/generate\", handleGenerateVideo);\n  app.get(\"/api/videos/:videoId/status\", handleVideoStatus);\n  app.get(\"/api/videos/:videoId/download\", handleVideoDownload);\n  app.get(\"/api/videos/debug/veo3\", handleDebugVeo3);\n\n  // Location-based search endpoints\n  app.post(\"/api/location/search\", handleLocationSearch);\n  app.post(\"/api/location/insights\", generateLocationInsights);\n  app.get(\"/api/location/reverse-geocode\", reverseGeocode);\n\n  // Business Flow endpoints\n  app.get(\"/api/business-flow/charts/:userId\", businessFlowRoutes.getCharts);\n  app.get(\"/api/business-flow/charts/:chartId\", businessFlowRoutes.getChart);\n  app.post(\"/api/business-flow/charts\", businessFlowRoutes.createChart);\n  app.patch(\"/api/business-flow/charts/:chartId\", businessFlowRoutes.updateChart);\n  app.post(\"/api/business-flow/charts/:chartId/nodes\", businessFlowRoutes.addNode);\n  app.patch(\"/api/business-flow/nodes/:nodeId\", businessFlowRoutes.updateNode);\n  app.delete(\"/api/business-flow/nodes/:nodeId\", businessFlowRoutes.deleteNode);\n  app.post(\"/api/business-flow/charts/:chartId/edges\", businessFlowRoutes.addEdge);\n  app.post(\"/api/business-flow/ai-expand\", businessFlowRoutes.aiExpand);\n  app.post(\"/api/business-flow/generate-node\", businessFlowRoutes.generateNode);\n  app.get(\"/api/business-flow/charts/:chartId/history\", businessFlowRoutes.getChartHistory);\n  app.get(\"/api/business-flow/charts/:chartId/export\", businessFlowRoutes.exportChart);\n  \n  // Business Flow data persistence endpoints\n  app.post(\"/api/business-flow/:userId/save\", businessFlowRoutes.saveBusinessFlow);\n  app.get(\"/api/business-flow/:userId/latest\", businessFlowRoutes.getLatestBusinessFlow);\n  app.get(\"/api/business-flow/:userId/all\", businessFlowRoutes.getAllBusinessFlows);\n  app.put(\"/api/business-flow/:userId/:flowId\", businessFlowRoutes.updateBusinessFlow);\n  app.delete(\"/api/business-flow/:userId/:flowId\", businessFlowRoutes.deleteBusinessFlow);\n\n  // Questionnaire endpoints (static questionnaire, Gemini only for flow generation)\n  app.get(\"/api/questionnaires/:userId\", getQuestionnaires);\n  app.get(\"/api/questionnaires/:userId/:questionnaireId\", getQuestionnaire);\n  app.post(\"/api/questionnaires\", createQuestionnaire);\n  app.put(\"/api/questionnaires/:questionnaireId\", updateQuestionnaire);\n  app.delete(\"/api/questionnaires/:questionnaireId\", deleteQuestionnaire);\n  app.post(\"/api/questionnaire/generate-flow\", generateFlow);\n  app.post(\"/api/questionnaire/save-answers\", saveAnswers);\n  app.post(\"/api/questionnaire/save-flow\", saveFlow);\n  app.get(\"/api/questionnaire/test\", testQuestionnaire);\n\n  // Social Media endpoints\n  app.post(\"/api/social/generate-post\", socialRoutes.handleGeneratePost);\n  app.get(\"/api/social/platforms\", socialRoutes.handleGetPlatforms);\n\n  // Dashboard endpoints (specific routes first to avoid conflicts)\n  app.get(\"/api/dashboard/test\", dashboardRoutes.testEndpoint);\n  app.get(\"/api/dashboard/health\", dashboardRoutes.healthCheckEndpoint);\n  app.post(\"/api/dashboard/seed\", dashboardRoutes.seedDatabase);\n  app.post(\"/api/dashboard/create-user\", dashboardRoutes.createUserDataEndpoint);\n  app.post(\"/api/dashboard/:userId/add-metric\", dashboardRoutes.extractUserId, dashboardRoutes.addBusinessMetric);\n  app.get(\"/api/dashboard/:userId/products\", dashboardRoutes.extractUserId, dashboardRoutes.getUserProducts);\n  app.get(\"/api/dashboard/:userId/all-metrics\", dashboardRoutes.extractUserId, dashboardRoutes.getAllBusinessMetrics);\n  app.get(\"/api/dashboard/market-trends\", dashboardRoutes.getMarketTrends);\n  app.patch(\"/api/dashboard/insights/:insightId/status\", dashboardRoutes.updateInsightStatus);\n  app.patch(\"/api/dashboard/recommendations/:recommendationId/status\", dashboardRoutes.updateRecommendationStatus);\n  app.get(\"/api/dashboard/:userId\", dashboardRoutes.extractUserId, dashboardRoutes.getDashboardData);\n  app.get(\"/api/dashboard/:userId/insights\", dashboardRoutes.extractUserId, dashboardRoutes.getInsights);\n  app.post(\"/api/dashboard/:userId/insights\", dashboardRoutes.extractUserId, dashboardRoutes.createInsight);\n  app.post(\"/api/dashboard/:userId/insights/generate\", dashboardRoutes.extractUserId, dashboardRoutes.generateInsights);\n  app.get(\"/api/dashboard/:userId/metrics\", dashboardRoutes.extractUserId, dashboardRoutes.getBusinessMetrics);\n  app.post(\"/api/dashboard/:userId/metrics\", dashboardRoutes.extractUserId, dashboardRoutes.createBusinessMetric);\n  app.get(\"/api/dashboard/:userId/recommendations\", dashboardRoutes.extractUserId, dashboardRoutes.getRecommendations);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index.js\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`üöÄ Fusion Starter server running on port ${port}`);\n  console.log(`üì± Frontend: http://localhost:${port}`);\n  console.log(`üîß API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"üõë Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"üõë Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["config","vertexAI","initializeVertexAI","model","healthCheck","promisify","VertexAI","path","query","FirebaseModels","isFirebaseConfigured","app","db","doc","limit","seedFirebaseDatabase","express","firebase","businessFlowRoutes.getCharts","businessFlowRoutes.getChart","businessFlowRoutes.createChart","businessFlowRoutes.updateChart","businessFlowRoutes.addNode","businessFlowRoutes.updateNode","businessFlowRoutes.deleteNode","businessFlowRoutes.addEdge","businessFlowRoutes.aiExpand","businessFlowRoutes.generateNode","businessFlowRoutes.getChartHistory","businessFlowRoutes.exportChart","businessFlowRoutes.saveBusinessFlow","businessFlowRoutes.getLatestBusinessFlow","businessFlowRoutes.getAllBusinessFlows","businessFlowRoutes.updateBusinessFlow","businessFlowRoutes.deleteBusinessFlow","socialRoutes.handleGeneratePost","socialRoutes.handleGetPlatforms","dashboardRoutes.testEndpoint","dashboardRoutes.healthCheckEndpoint","dashboardRoutes.seedDatabase","dashboardRoutes.createUserDataEndpoint","dashboardRoutes.extractUserId","dashboardRoutes.addBusinessMetric","dashboardRoutes.getUserProducts","dashboardRoutes.getAllBusinessMetrics","dashboardRoutes.getMarketTrends","dashboardRoutes.updateInsightStatus","dashboardRoutes.updateRecommendationStatus","dashboardRoutes.getDashboardData","dashboardRoutes.getInsights","dashboardRoutes.createInsight","dashboardRoutes.generateInsights","dashboardRoutes.getBusinessMetrics","dashboardRoutes.createBusinessMetric","dashboardRoutes.getRecommendations"],"mappings":"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"}